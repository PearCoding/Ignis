static RayPayloadComponents = MaxRayPayloadComponents;

#[export]
fn ig_render(settings: &Settings) -> () {
    let device = @get_device(settings.device);

    let dtb  = device.load_scene_database();
    let displacement_map = device.load_image("/home/niklas/hiwi/Ignis/scenes/textures/grid_weight.png");
    //let pix = |x:i32,y:i32| {make_vec4(0,0,0,1)};
    //displacement_map = make_image_rgba32(pix, 1, 1);

    let acc  = TraceAccessor {
        info     = device.load_scene_info(),
        shapes   = device.load_shape_table(dtb.shapes),
        entities = device.load_entity_table(dtb.entities),
        bvhs     = device.load_bvh_table(dtb.bvhs, displacement_map)
    };

    let scene = SceneGeometry {
        info     = acc.info,
        database = acc,
        bvh      = device.load_scene_bvh()
    };

    let pipeline = Pipeline {
        on_generate   = @ | id, size, xmin, ymin, xmax, ymax | -> i32 {
            ignis_handle_ray_generation(device.id, id, size, xmin, ymin, xmax, ymax)
        },
        on_miss_shade = @ | first, last | {
            ignis_handle_miss_shader(device.id, first, last);
        },
        on_hit_shade  = @ | entity_id, first, last| {
            ignis_handle_hit_shader(device.id, entity_id, first, last);
        },
        on_advanced_shadow = @ | mat_id, first, last, is_hit | {
            ignis_handle_advanced_shadow_shader(device.id, mat_id, first, last, is_hit);
        }
    };

    ignis_handle_callback_shader(device.id, 0/*BeforeIteration*/);
    device.trace(scene, pipeline, settings.spi);
    ignis_handle_callback_shader(device.id, 1/*AfterIteration*/);
    device.present();
}
