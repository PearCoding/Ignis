// Based on https://www.shadertoy.com/view/lsjGWD
// and https://iquilezles.org/articles/voronoise/

// Some distance functions
fn @euclidean_dist_2(a: Vec2, b: Vec2)         = vec2_len(vec2_sub(a, b));
fn @manhatten_dist_2(a: Vec2, b: Vec2)         = vec2_sum(vec2_abs(vec2_sub(a, b)));
fn @chebyshev_dist_2(a: Vec2, b: Vec2)         = vec2_max_value(vec2_abs(vec2_sub(a, b)));
fn @minkowski_dist_2(a: Vec2, b: Vec2, p: f32) = math_builtins::pow(vec2_sum(vec2_powf(vec2_abs(vec2_sub(a, b)), p)), 1 / p);

fn @euclidean_dist_3(a: Vec3, b: Vec3)         = vec3_len(vec3_sub(a, b));
fn @manhatten_dist_3(a: Vec3, b: Vec3)         = vec3_sum(vec3_abs(vec3_sub(a, b)));
fn @chebyshev_dist_3(a: Vec3, b: Vec3)         = vec3_max_value(vec3_abs(vec3_sub(a, b)));
fn @minkowski_dist_3(a: Vec3, b: Vec3, p: f32) = math_builtins::pow(vec3_sum(vec3_powf(vec3_abs(vec3_sub(a, b)), p)), 1 / p);

type VoronoiDistanceFunction2D = fn (Vec2, Vec2) -> f32;
type VoronoiDistanceFunction3D = fn (Vec3, Vec3) -> f32;

enum VoronoiDistance {
    Euclidean,
    Manhatten,
    Chebyshev,
    Minkowski(f32)
}

fn @get_voronoi_distance_function2(dist: VoronoiDistance) = match dist {
    VoronoiDistance::Manhatten    => manhatten_dist_2,
    VoronoiDistance::Chebyshev    => chebyshev_dist_2,
    VoronoiDistance::Minkowski(p) => @|a,b| minkowski_dist_2(a,b,p),
    _ => euclidean_dist_2,
};

fn @get_voronoi_distance_function3(dist: VoronoiDistance) = match dist {
    VoronoiDistance::Manhatten    => manhatten_dist_3,
    VoronoiDistance::Chebyshev    => chebyshev_dist_3,
    VoronoiDistance::Minkowski(p) => @|a,b| minkowski_dist_3(a,b,p),
    _ => euclidean_dist_3,
};

enum VoronoiFeature {
    F1,
    F2
}

// ----------------------- 1D
fn @voronoi1_f1_gen(u: f32, seed: f32, randomness: f32) -> (f32, Color) {
    let ip = math_builtins::floor(u);
    let fp = math::fract(u); // Cell position

	let mut distance = 8.0 : f32;
    let mut target   = 0.0 : f32;
	
    for i in unroll(-1, 2) {
        let g = i as f32;
        let k = ip + g;
        let r = noise1(k, seed);
        let d = math_builtins::fabs(g + r * randomness - fp);

        target   = select(d < distance, k, target);
        distance = select(d < distance, d, distance);
    }

	(distance, cnoise1(target, seed))
}

fn @voronoi1_f2_gen(u: f32, seed: f32, randomness: f32) -> (f32, Color) {
    let ip = math_builtins::floor(u);
    let fp = math::fract(u); // Cell position

	let mut distance1 = 8.0 : f32;
    let mut target1   = 0.0 : f32;
	let mut distance2 = 8.0 : f32;
    let mut target2   = 0.0 : f32;
	
    for i in unroll(-1, 2) {
        let g = i as f32;
        let k = ip + g;
        let r = noise1(k, seed);
        let d = math_builtins::fabs(g + r * randomness - fp);

        if d < distance1 {
            distance2 = distance1;
            target2   = target1;
            distance1 = d;
            target1   = k;
        } else if d < distance2 {
            distance2 = d;
            target2   = k;
        }
    }

	(distance2, cnoise1(target2, seed))
}

fn @voronoi1_gen(u: f32, seed: f32, randomness: f32, feature: VoronoiFeature) = match feature {
    VoronoiFeature::F1 => voronoi1_f1_gen(u, seed, randomness),
                     _ => voronoi1_f2_gen(u, seed, randomness)
};

// ----------------------- 2D
fn @voronoi2_f1_gen(uv: Vec2, seed: f32, randomness: f32, dist_f: VoronoiDistanceFunction2D) -> (f32, Color) {
    let ip = vec2_floor(uv);
    let fp = vec2_map(uv, @|x| math::fract(x));

	let mut dist   = 8.0 : f32;
    let mut target = undef[Vec2]();
	
    for j in range(-1, 2) {
        for i in unroll(-1, 2) {
            let g = make_vec2(i as f32, j as f32);
            let k = vec2_add(ip, g);
            let r = vec2_mulf(make_vec2(noise2_v(k, seed), noise2_v(k, seed + DEFAULT_CNOISE_SEED_SHIFT0)), randomness);
            let d = dist_f(vec2_add(g, r), fp);

            target = select(d < dist, k, target);
            dist   = select(d < dist, d, dist);
        }
    }
    
	(dist, cnoise2(target, seed))
}

fn @voronoi2_f2_gen(uv: Vec2, seed: f32, randomness: f32, dist_f: VoronoiDistanceFunction2D) -> (f32, Color) {
    let ip = vec2_floor(uv);
    let fp = vec2_map(uv, @|x| math::fract(x));

	let mut dist1   = 8.0 : f32;
    let mut target1 = undef[Vec2]();
	let mut dist2   = 8.0 : f32;
    let mut target2 = undef[Vec2]();
	
    for j in range(-1, 2) {
        for i in unroll(-1, 2) {
            let g = make_vec2(i as f32, j as f32);
            let k = vec2_add(ip, g);
            let r = vec2_mulf(make_vec2(noise2_v(k, seed), noise2_v(k, seed + DEFAULT_CNOISE_SEED_SHIFT0)), randomness);
            let d = dist_f(vec2_add(g, r), fp);

            if d < dist1 {
                dist2   = dist1;
                target2 = target1;
                dist1   = d;
                target1 = k;
            } else if d < dist2 {
                dist2   = d;
                target2 = k;
            }
        }
    }
    
	(dist2, cnoise2(target2, seed))
}

fn @voronoi2_gen(uv: Vec2, seed: f32, randomness: f32, feature: VoronoiFeature, dist: VoronoiDistance) = match feature {
    VoronoiFeature::F1 => voronoi2_f1_gen(uv, seed, randomness, get_voronoi_distance_function2(dist)),
                     _ => voronoi2_f2_gen(uv, seed, randomness, get_voronoi_distance_function2(dist))
};

fn @voronoi3_f1_gen(uvw: Vec3, seed: f32, randomness: f32, dist_f: VoronoiDistanceFunction3D) -> (f32, Color) {
    let ip = vec3_floor(uvw);
    let fp = vec3_map(uvw, @|x| math::fract(x));

	let mut dist   = 8.0 : f32;
    let mut target = undef[Vec3]();
	
    for k in range(-1, 2) {
        for j in range(-1, 2) {
            for i in unroll(-1, 2) {
                let g = make_vec3(i as f32, j as f32, k as f32);
                let v = vec3_add(ip, g);
                let o = vec3_mulf(make_vec3(noise3_v(v, seed), noise3_v(v, seed + DEFAULT_CNOISE_SEED_SHIFT0), noise3_v(v, seed + DEFAULT_CNOISE_SEED_SHIFT1)), randomness);
                let d = dist_f(vec3_add(g, o), fp);

                target = select(d < dist, v, target);
                dist   = select(d < dist, d, dist);
            }
        }
    }
    
	(dist, cnoise3(target, seed))
}

fn @voronoi3_f2_gen(uvw: Vec3, seed: f32, randomness: f32, dist_f: VoronoiDistanceFunction3D) -> (f32, Color) {
    let ip = vec3_floor(uvw);
    let fp = vec3_map(uvw, @|x| math::fract(x));

	let mut dist1   = 8.0 : f32;
    let mut target1 = undef[Vec3]();
	let mut dist2   = 8.0 : f32;
    let mut target2 = undef[Vec3]();
	
    for k in range(-1, 2) {
        for j in range(-1, 2) {
            for i in unroll(-1, 2) {
                let g = make_vec3(i as f32, j as f32, k as f32);
                let v = vec3_add(ip, g);
                let o = vec3_mulf(make_vec3(noise3_v(v, seed), noise3_v(v, seed + DEFAULT_CNOISE_SEED_SHIFT0), noise3_v(v, seed + DEFAULT_CNOISE_SEED_SHIFT1)), randomness);
                let d = dist_f(vec3_add(g, o), fp);

                if d < dist1 {
                    dist2   = dist1;
                    target2 = target1;
                    dist1   = d;
                    target1 = v;
                } else if d < dist2 {
                    dist2   = d;
                    target2 = v;
                }
            }
        }
    }
    
	(dist2, cnoise3(target2, seed))
}

fn @voronoi3_gen(uvw: Vec3, seed: f32, randomness: f32, feature: VoronoiFeature, dist: VoronoiDistance) = match feature {
    VoronoiFeature::F1 => voronoi3_f1_gen(uvw, seed, randomness, get_voronoi_distance_function3(dist)),
                     _ => voronoi3_f2_gen(uvw, seed, randomness, get_voronoi_distance_function3(dist))
};

// Generic Fractional Brownian Motion
fn @fbm2_gen(uv: Vec2, seed: f32, octaves: i32, lacunarity: f32, gain: f32, feature: VoronoiFeature, dist: VoronoiDistance) -> (f32, Color) {
    let mut s = 0.0 : f32;
	let mut m = 0.0 : f32;
	let mut a = gain;
    let mut p = uv;
    let mut b = color_builtins::black;
	
	for _ in safe_unroll(0, octaves) {
        let(f, c) = voronoi2_gen(p, seed, 1, feature, dist);
		s += a * f;
		m += a;
		a *= gain;
		p = vec2_mulf(p, lacunarity);
        b = color_add(b, color_mulf(c, a));
	}

	(s / m, color_divf(b, m))
}

fn @fbm3_gen(uvw: Vec3, seed: f32, octaves: i32, lacunarity: f32, gain: f32, feature: VoronoiFeature, dist: VoronoiDistance) -> (f32, Color) {
    let mut s = 0.0 : f32;
	let mut m = 0.0 : f32;
	let mut a = gain;
    let mut p = uvw;
    let mut b = color_builtins::black;
	
	for _ in safe_unroll(0, octaves) {
        let(f, c) = voronoi3_gen(p, seed, 1, feature, dist);
		s += a * f;
		m += a;
		a *= gain;
		p = vec3_mulf(p, lacunarity);
        b = color_add(b, color_mulf(c, a));
	}

	(s / m, color_divf(b, m))
}

// TODO: Add option variants for different dist functions
fn @voronoi2(uv: Vec2, seed: f32)   = voronoi2_gen(uv , seed, 1, VoronoiFeature::F1, VoronoiDistance::Euclidean).0;
fn @voronoi3(uvw: Vec3, seed: f32)  = voronoi3_gen(uvw, seed, 1, VoronoiFeature::F1, VoronoiDistance::Euclidean).0;
fn @cvoronoi2(uv: Vec2, seed: f32)  = voronoi2_gen(uv , seed, 1, VoronoiFeature::F1, VoronoiDistance::Euclidean).1;
fn @cvoronoi3(uvw: Vec3, seed: f32) = voronoi3_gen(uvw, seed, 1, VoronoiFeature::F1, VoronoiDistance::Euclidean).1;
fn @fbm2(uv: Vec2, seed: f32)       = fbm2_arg(uv, seed, 6, 2, 0.5);
fn @fbm3(uvw: Vec3, seed: f32)      = fbm3_arg(uvw, seed, 6, 2, 0.5);
fn @cfbm2(uv: Vec2, seed: f32)      = cfbm2_arg(uv, seed, 6, 2, 0.5);
fn @cfbm3(uvw: Vec3, seed: f32)     = cfbm3_arg(uvw, seed, 6, 2, 0.5);
fn @fbm2_arg(uv: Vec2, seed: f32, octaves: i32, lacunarity: f32, gain: f32)   = fbm2_gen(uv , seed, octaves, lacunarity, gain, VoronoiFeature::F1, VoronoiDistance::Euclidean).0;
fn @fbm3_arg(uvw: Vec3, seed: f32, octaves: i32, lacunarity: f32, gain: f32)  = fbm3_gen(uvw, seed, octaves, lacunarity, gain, VoronoiFeature::F1, VoronoiDistance::Euclidean).0;
fn @cfbm2_arg(uv: Vec2, seed: f32, octaves: i32, lacunarity: f32, gain: f32)  = fbm2_gen(uv , seed, octaves, lacunarity, gain, VoronoiFeature::F1, VoronoiDistance::Euclidean).1;
fn @cfbm3_arg(uvw: Vec3, seed: f32, octaves: i32, lacunarity: f32, gain: f32) = fbm3_gen(uvw, seed, octaves, lacunarity, gain, VoronoiFeature::F1, VoronoiDistance::Euclidean).1;

// DEFAULT_NOISE_SEED defined in noise.art
fn @voronoi2_def(uv: Vec2)     = voronoi2(uv,    DEFAULT_NOISE_SEED);
fn @voronoi3_def(uvw: Vec3)    = voronoi3(uvw,   DEFAULT_NOISE_SEED);
fn @fbm2_def(uv: Vec2)         = fbm2(uv,        DEFAULT_NOISE_SEED);
fn @fbm3_def(uvw: Vec3)        = fbm3(uvw,       DEFAULT_NOISE_SEED);

fn @cvoronoi2_def(uv: Vec2)    = cvoronoi2(uv,    DEFAULT_NOISE_SEED);
fn @cvoronoi3_def(uvw: Vec3)   = cvoronoi3(uvw,   DEFAULT_NOISE_SEED);
fn @cfbm2_def(uv: Vec2)        = cfbm2(uv,        DEFAULT_NOISE_SEED);
fn @cfbm3_def(uvw: Vec3)       = cfbm3(uvw,       DEFAULT_NOISE_SEED);

fn @make_voronoi_texture(scale: Vec2, color: Color, seed: f32, transform: Mat3x3)   = make_gen_noise_texture(scale, color, seed, transform, voronoi2);
fn @make_fbm_texture(scale: Vec2, color: Color, seed: f32, transform: Mat3x3)       = make_gen_noise_texture(scale, color, seed, transform, fbm2);

fn @make_cvoronoi_texture(scale: Vec2, color: Color, seed: f32, transform: Mat3x3)   = make_gen_colored_noise_texture(scale, color, seed, transform, cvoronoi2);
fn @make_cfbm_texture(scale: Vec2, color: Color, seed: f32, transform: Mat3x3)       = make_gen_colored_noise_texture(scale, color, seed, transform, cfbm2);
