type PayloadInitializer = fn (/*payload:*/ RayPayload, /*sample:*/ i32, /*coord:*/ PixelCoord) -> ();

fn @make_simple_payload_initializer(f: fn(RayPayload)->()) = @|p: RayPayload, _:i32, _:PixelCoord| f(p);
fn @empty_payload_initializer(_: RayPayload, _:i32, _:PixelCoord) -> () {}

fn @make_camera_emitter(camera: Camera, config: RenderConfig, sampler: PixelSampler, initState: PayloadInitializer) -> RayEmitter {
    @ |sample, x, y, width, height, payload| {
        let rnd      = create_random_generator(create_random_seed(sample, config.iter, config.frame, x, y, config.seed));
        let (rx, ry) = sampler(rnd, config.iter * config.spi + sample, x, y);
        let coord    = make_pixelcoord_from_xy(x, y, width, height, rx, ry);
        let ray      = camera.generate_ray(rnd, coord);
        
        initState(payload, sample, coord);
        (ray, rnd)
    }
}

fn @make_list_emitter(rays: &[StreamRay], config: RenderConfig, initState: PayloadInitializer) -> RayEmitter {
    @ |sample, x, y, width, height, payload| {
        let rnd   = create_random_generator(create_random_seed(sample, config.iter, config.frame, x, y, config.seed));
        let coord = make_pixelcoord_from_xy(x, y, width, height, 0, 0);
        let id    = coord.linear;
        
        let stream_ray = if id < width { rays(id) } else { StreamRay{org=make_vec3(0,0,0), dir=make_vec3(0,0,1), tmin=0, tmax=0}};
        
        let ray = make_ray(stream_ray.org, stream_ray.dir, stream_ray.tmin, stream_ray.tmax, 0);
        
        initState(payload, sample, coord);
        (ray, rnd)
    }
}