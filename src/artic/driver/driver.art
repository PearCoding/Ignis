// TODO: Refactor out
struct WorkInfo {
    width:                           i32,
    height:                          i32,
    advanced_shadows:                bool,
    advanced_shadows_with_materials: bool,
    framebuffer_locked:              bool
}

// Driver functions ----------------------------------------------------------------

#[import(cc = "C")] fn ignis_get_work_info(&mut WorkInfo) -> ();
#[import(cc = "C")] fn ignis_get_film_data(&mut &mut [f32], &mut i32, &mut i32) -> ();
#[import(cc = "C")] fn ignis_get_aov_image(&[u8], &mut &mut [f32]) -> ();

#[import(cc = "C")] fn ignis_get_primary_stream(i32, &mut PrimaryStream, i32) -> ();
#[import(cc = "C")] fn ignis_get_primary_stream_const(i32, &mut PrimaryStream) -> ();
#[import(cc = "C")] fn ignis_get_secondary_stream(i32, &mut SecondaryStream, i32) -> ();
#[import(cc = "C")] fn ignis_get_secondary_stream_const(i32, &mut SecondaryStream) -> ();
#[import(cc = "C")] fn ignis_gpu_get_tmp_buffer(&mut &mut [i32]) -> ();
#[import(cc = "C")] fn ignis_gpu_swap_primary_streams() -> ();
#[import(cc = "C")] fn ignis_gpu_swap_secondary_streams() -> ();
#[import(cc = "C")] fn ignis_get_temporary_storage_host(&mut TemporaryStorageHost) -> ();
#[import(cc = "C")] fn ignis_load_bvh2_ent(&[u8], &mut &[Node2], &mut &[EntityLeaf1]) -> ();
#[import(cc = "C")] fn ignis_load_bvh4_ent(&[u8], &mut &[Node4], &mut &[EntityLeaf1]) -> ();
#[import(cc = "C")] fn ignis_load_bvh8_ent(&[u8], &mut &[Node8], &mut &[EntityLeaf1]) -> ();
#[import(cc = "C")] fn ignis_load_rays(&mut &[StreamRay]) -> ();
#[import(cc = "C")] fn ignis_load_dyntable(&[u8], &mut DynTableData) -> ();
#[import(cc = "C")] fn ignis_load_fixtable(&[u8], &mut &[u8], &mut i32) -> ();
#[import(cc = "C")] fn ignis_load_image(&[u8], &mut &[f32], &mut i32, &mut i32, i32) -> ();
#[import(cc = "C")] fn ignis_load_image_by_id(i32, &mut &[f32], &mut i32, &mut i32, i32) -> ();
#[import(cc = "C")] fn ignis_load_packed_image(&[u8], &mut &[u8], &mut i32, &mut i32, i32, bool) -> ();
#[import(cc = "C")] fn ignis_load_packed_image_by_id(i32, &mut &[u8], &mut i32, &mut i32, i32, bool) -> ();
#[import(cc = "C")] fn ignis_load_buffer(&[u8], &mut &[u8], &mut i32) -> ();
#[import(cc = "C")] fn ignis_load_buffer_by_id(i32, &mut &[u8], &mut i32) -> ();
#[import(cc = "C")] fn ignis_request_buffer(&[u8], &mut &[u8], i32, i32) -> ();

#[import(cc = "C")] fn ignis_dbg_dump_buffer(&[u8], &[u8]) -> ();
#[import(cc = "C")] fn ignis_flush_debug_output(&[u8], i32) -> ();

#[import(cc = "C")] fn ignis_register_thread() -> ();
#[import(cc = "C")] fn ignis_unregister_thread() -> ();

#[import(cc = "C")] fn ignis_handle_traverse_primary(i32) -> ();
#[import(cc = "C")] fn ignis_handle_traverse_secondary(i32) -> ();
#[import(cc = "C")] fn ignis_handle_miss_shader(i32, i32) -> ();
#[import(cc = "C")] fn ignis_handle_hit_shader(i32, i32, i32) -> ();
#[import(cc = "C")] fn ignis_handle_ray_generation(i32, i32, i32, i32, i32, i32) -> i32;
#[import(cc = "C")] fn ignis_handle_advanced_shadow_shader(i32, i32, i32, bool) -> ();
#[import(cc = "C")] fn ignis_handle_callback_shader(i32) -> ();

#[import(cc = "C")] fn ignis_get_parameter_i32(&[u8], i32, bool) -> i32;
#[import(cc = "C")] fn ignis_get_parameter_f32(&[u8], f32, bool) -> f32;
#[import(cc = "C")] fn ignis_get_parameter_vector(&[u8], f32, f32, f32, &mut f32, &mut f32, &mut f32, bool) -> ();
#[import(cc = "C")] fn ignis_get_parameter_color(&[u8], f32, f32, f32, f32, &mut f32, &mut f32, &mut f32, &mut f32, bool) -> ();
#[import(cc = "C")] fn ignis_get_parameter_string(&[u8], &[u8], bool) -> &[u8];

#[import(cc = "C")] fn ignis_set_parameter_i32(&[u8], i32, bool) -> ();
#[import(cc = "C")] fn ignis_set_parameter_f32(&[u8], f32, bool) -> ();
#[import(cc = "C")] fn ignis_set_parameter_vector(&[u8], f32, f32, f32, bool) -> ();
#[import(cc = "C")] fn ignis_set_parameter_color(&[u8], f32, f32, f32, f32, bool) -> ();

fn @get_work_info() -> WorkInfo {
    let mut work_info : WorkInfo;
    ignis_get_work_info(&mut work_info);
    work_info
}