struct PixelCoord {
    x: i32,      // X Coordinate
    y: i32,      // Y Coordinate
    linear: i32, // Linearized index to be used in flat buffers
    nx: f32,     // Normalized coordinate [-1, 1]
    ny: f32,     // Normalized coordinate [-1, 1]
    w:  i32,     // Width of framebuffer this pixel is associated with
    h:  i32,     // Height of framebuffer this pixel is associated with
}

fn @make_empty_pixelcoord() = PixelCoord {
    x = 0,
    y = 0,
    linear = 0,
    nx = 0,
    ny = 0,
    w  = 0,
    h  = 0,
};

fn @make_pixelcoord_from_xy(x: i32, y: i32, w: i32, h: i32, sx: f32, sy: f32) = PixelCoord {
    x = x,
    y = y,
    linear = y * w + x,
    nx = 2 * (x as f32 + sx) / (w as f32) - 1,
    ny = 1 - 2 * (y as f32 + sy) / (h as f32),
    w  = w,
    h  = h,
};

fn @make_pixelcoord_from_linear(linear: i32, w: i32, h: i32, sx: f32, sy: f32) -> PixelCoord {
    let x = linear % w;
    let y = linear / w;
    PixelCoord {
        x = x,
        y = y,
        linear = linear,
        nx = 2 * (x as f32 + sx) / (w as f32) - 1,
        ny = 1 - 2 * (y as f32 + sy) / (h as f32),
        w  = w,
        h  = h,
    }
}

fn @make_pixelcoord_from_normalized(nx: f32, ny: f32, w: i32, h: i32) -> PixelCoord {
    let x = min(math_builtins::floor(w as f32 * (nx + 1) / 2) as i32, w - 1);
    let y = min(math_builtins::floor(h as f32 * (1 - ny) / 2) as i32, h - 1);

    PixelCoord {
        x = x,
        y = y,
        linear = y * w + x,
        nx = nx,
        ny = ny,
        w  = w,
        h  = h,
    }
}

struct CameraSample {
    coord:  PixelCoord, // Sampled pixel
    dir:    Vec3,       // Sampled direction from given point TOWARDS the camera. The vector is NOT normalized
    weight: Color,      // Importance (already divided by pdf)
    pdf:    f32         // Pdf of sample to connect
}

// Opaque camera object
struct Camera {
    // Generates a ray for a point on the image plane
    generate_ray: fn (&mut RndState, PixelCoord) -> Ray,
    // Sample a point on the image plane with corresponding pixel for given point in the scene if possible
    // This call might fail if given point in scene is not within the direction of the camera
    sample_pixel: fn (&mut RndState, Vec3) -> Option[CameraSample],
    // Map point in scene to a pixel coordinate if possible
    // This call might fail if given point in scene is not within the direction of the camera
    pos_to_pixel: fn (Vec3) -> Option[PixelCoord],
    // Returns dx and dy vectors in respect to the pixel position (given as index)
    differential: fn (PixelCoord) -> (Vec3, Vec3)
}
