// Abstract geometry object (tied to one device)
struct Shape {
    // Computes the surface element after an intersection on this geometry
    surface_element:           fn (Ray, Hit, PointMapperSet)  -> SurfaceElement,
    surface_element_for_point: fn (i32, Vec2, PointMapperSet) -> SurfaceElement,
    local_bbox:                fn () -> BBox, // Query the local bounding box
    primitive_count:           i32 // Number of internal primitives
}

type ShapeTable  = fn (i32) -> Shape;

fn @make_shape_table(dtb: DynTable, gen: fn (u32, ShallowBuffer) -> Shape) -> ShapeTable {
    @ |id| {
        let entry = dtb.lookup(id);
        let data  = dtb.data(entry.offset);
        gen(entry.type_id, data)
    } 
}

fn @load_shape_table(device: Device, gen: fn (u32, ShallowBuffer) -> Shape) -> ShapeTable {
    let dtb = device.load_dyntable("shapes");
    make_shape_table(dtb, gen)
}

fn @make_null_shape() = Shape {
    surface_element           = @|_,_,_| make_invalid_surface_element(),
    surface_element_for_point = @|_,_,_| make_invalid_surface_element(),
    local_bbox                = @|| make_empty_bbox(), 
    primitive_count           = 0
};

fn @make_empty_shape_table() -> ShapeTable {
    @ |_id| { make_null_shape() } 
}
