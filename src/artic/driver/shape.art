// Abstract geometry object (tied to one device)
struct Shape {
    // Computes the surface element after an intersection on this geometry
    surface_element:           fn (Ray, Hit, PointMapperSet)  -> SurfaceElement,
    surface_element_for_point: fn (i32, Vec2, PointMapperSet) -> SurfaceElement,
    local_bbox:                BBox, // Local bounding box
}

type ShapeTable  = fn (i32) -> Shape;

fn @make_shape_table(dtb: DynTable, gen: fn (u32, DeviceBuffer) -> Shape) -> ShapeTable {
    @ |id| {
        let entry = dtb.lookup(id);
        let data  = dtb.data(entry.offset);
        gen(entry.type_id, data)
    } 
}

fn @load_shape_table(device: Device, gen: fn (u32, DeviceBuffer) -> Shape) -> ShapeTable {
    let dtb = device.load_dyntable("shapes");
    make_shape_table(dtb, gen)
}