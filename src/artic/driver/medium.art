struct MediumSample {
    pos:   Vec3,
    pdf:   f32,
    color: Color // Weighted transmission
}

fn @make_medium_sample(pos: Vec3, pdf: f32, color: Color) = make_option(MediumSample {
    pos   = pos,
    pdf   = pdf,
    color = color,
});

fn @reject_medium_sample() = Option[MediumSample]::None;

struct Medium {
    phase:          fn (/* pos */Vec3) -> PhaseFunction,                                                // Returns phase function for given position
    eval:           fn (/* start_pos */Vec3, /* end_pos */Vec3) -> Color,                               // Evaluate from position A to B
    eval_inf:       fn (/* start_pos */Vec3, /* direction */Vec3) -> Color,                             // Evaluate from position A with direction B towards infinity (most of the time its zero)
    sample:         fn (&mut RndState, /* start_pos */Vec3, /* end_pos */Vec3) -> Option[MediumSample], // Sample position between two positions and a direction based on the phase
    pdf:            fn (/* start_pos */Vec3, /* end_pos */Vec3, /* pos */Vec3) -> f32,                  // Pdf sampled
    is_homogeneous: bool
}

fn @transform_medium(medium: Medium, coord: CoordSystem) = medium.{
    phase    = @|p|      medium.phase(   mat3x4_transform_point(coord.to_local, p)),
    eval     = @|sp, ep| medium.eval(    mat3x4_transform_point(coord.to_local, sp), mat3x4_transform_point(coord.to_local, ep)),
    eval_inf = @|sp, d|  medium.eval_inf(mat3x4_transform_point(coord.to_local, sp), mat3x4_transform_direction(coord.to_local, d)),                     
    sample   = @|rnd, sp, ep| {
        if let Option[MediumSample]::Some(medium_sample) = medium.sample(rnd, mat3x4_transform_point(coord.to_local, sp), mat3x4_transform_point(coord.to_local, ep)) {
            make_option(medium_sample.{ pos=mat3x4_transform_point(coord.to_global, medium_sample.pos) })
        } else {
            Option[MediumSample]::None
        }
    },
    pdf = @|sp, ep, p| medium.pdf(mat3x4_transform_point(coord.to_local, sp), mat3x4_transform_point(coord.to_local, ep), mat3x4_transform_point(coord.to_local, p))
};

type MediumGenerator = fn (ShadingContext) -> Medium;
type MediaTable      = fn (i32) -> MediumGenerator;

struct MediumInterface {
    inner: i32,
    outer: i32,

    pick: fn (bool) -> i32,
}

fn @make_medium_interface(inner: i32, outer: i32) = MediumInterface {
    inner = inner,
    outer = outer,
    pick  = @|is_entering| { if is_entering { inner } else { outer } }
};

fn @no_medium_interface() = MediumInterface {
    inner = -1,
    outer = -1,
    pick  = @|_| -1
};
