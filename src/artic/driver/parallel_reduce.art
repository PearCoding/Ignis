struct ParallelReduceHandler {
    is_gpu: bool,
    acc:    Accelerator,
    config: GPUKernelConfiguration,
    accb:   DeviceBufferAccessor
}

fn @make_cpu_parallel_reduce_handler() = ParallelReduceHandler { 
    is_gpu = false,
    acc    = undef[Accelerator](),            // TODO: This is quite dangerous as it might trigger a bug in Thorin if this is not removed during code generator
    config = make_default_gpu_kernel_config(), // Not used
    accb   = make_cpu_buffer
};

fn @make_gpu_parallel_reduce_handler(acc: Accelerator, config: GPUKernelConfiguration, accb: DeviceBufferAccessor) = ParallelReduceHandler {
    is_gpu = true,
    acc    = acc,
    config = config,
    accb   = accb
};

/// Used to abstract the T in a more generic way
fn @reduce[T](handler: ParallelReduceHandler, n: i32, elem: fn (i32) -> T, op: fn (T, T) -> T) -> T {
    if handler.is_gpu {
        gpu_handle_device_reduce[T](handler, n, elem, op)
    } else {
        cpu_reduce[T](n, elem, op)
    }
}

/// GPU specific
fn @gpu_handle_device_reduce[T]( handler: ParallelReduceHandler
                               , n: i32
                               , elem: fn (i32) -> T
                               , op: fn (T, T) -> T) -> T {
    fn @reducer(block_size: i32) -> T {
        // TODO: This forces us to only use one reduce call at a single time (which is fair tbh)
        let tmp_buffer = gpu_request_buffer("__dev_tmp_reduce", sizeof[T]() as i32, handler.accb);

        let kernel_ptr = tmp_buffer.pointer(0) as &mut addrspace(1)[T];
        gpu_reduce[T](handler.acc, n, block_size,
            elem, op,
            @|v| kernel_ptr(0) = v
        );
        handler.acc.sync();

        let mut value: T;
        tmp_buffer.copy_to_host(0, (sizeof[T]() / sizeof[f32]()) as i32, &mut value as &mut [i32]);
        
        value
    }

    if n < handler.config.block_size_parallel_reduce * 10 {
        reducer(handler.config.block_size_parallel_reduce / 2)      
    } else {
        reducer(handler.config.block_size_parallel_reduce)
    }
}