// Device buffer. Granularity is 4 byte per index
// Everything with a _host suffix can be used on the host environment only
// Without a _host suffix the function can only be used in the device environment
struct DeviceBuffer {
    add_atomic_i32: fn (i32, i32) -> i32,
    add_atomic_f32: fn (i32, f32) -> f32,
    min_atomic_i32: fn (i32, i32) -> i32,
    max_atomic_i32: fn (i32, i32) -> i32,

    load_i32_host:  fn (i32) -> i32,     // Load from device to host. Will sync
    store_i32_host: fn (i32, i32) -> (), // Store from host to device. Will sync

    copy_from_host_async: fn (i32, i32, &[i32]) -> (),     // Copy from device (s, e) to host (0, e-s). Async!
    copy_to_host_async:   fn (i32, i32, &mut [i32]) -> (), // Copy from host (0, e-s) to device (s, e). Async!

    fill_i32_host_async: fn (i32, i32, i32) -> (), // Fill buffer from the host side. Async!
    fill_f32_host_async: fn (i32, i32, f32) -> (), // Fill buffer from the host side. Async!

    load_i32:       fn (i32) -> i32,
    load_f32:       fn (i32) -> f32,
    load_vec2:      fn (i32) -> Vec2,
    load_vec3:      fn (i32) -> Vec3,
    load_vec4:      fn (i32) -> Vec4,
    load_int2:      fn (i32) -> (i32, i32),
    load_int3:      fn (i32) -> (i32, i32, i32),
    load_int4:      fn (i32) -> (i32, i32, i32, i32),
    load_mat3x3:    fn (i32) -> Mat3x3,
    load_mat3x4:    fn (i32) -> Mat3x4,
    load_mat4x4:    fn (i32) -> Mat4x4,
    store_i32:      fn (i32, i32) -> (),
    store_f32:      fn (i32, f32) -> (),
    store_vec2:     fn (i32, Vec2) -> (),
    store_vec3:     fn (i32, Vec3) -> (),
    store_vec4:     fn (i32, Vec4) -> (),
    store_int2:     fn (i32, i32, i32) -> (),
    store_int3:     fn (i32, i32, i32, i32) -> (),
    store_int4:     fn (i32, i32, i32, i32, i32) -> (),
    store_mat3x3:   fn (i32, Mat3x3) -> (),
    store_mat3x4:   fn (i32, Mat3x4) -> (),
    store_mat4x4:   fn (i32, Mat4x4) -> (),

    handle:         u64,
    pointer:        fn (i32) -> &[f32],
    count:          i32, // Given in units of i32, not bytes! Zero if unknown
}

fn @make_null_device_buffer() = DeviceBuffer {
    add_atomic_i32 = @|_, _| 0:i32,
    add_atomic_f32 = @|_, _| 0:f32,
    min_atomic_i32 = @|_, _| 0:i32,
    max_atomic_i32 = @|_, _| 0:i32,
    load_i32_host  = @|_| 0:i32,
    store_i32_host = @|_, _| {},
    copy_from_host_async = @|_, _, _| {},
    copy_to_host_async   = @|_, _, _| {},
    fill_i32_host_async  = @|_, _, _| {},
    fill_f32_host_async  = @|_, _, _| {},
    load_i32       = @|_| 0:i32,
    load_f32       = @|_| 0:f32,
    load_vec2      = @|_| make_vec2(0,0),
    load_vec3      = @|_| make_vec3(0,0,0),
    load_vec4      = @|_| make_vec4(0,0,0,0),
    load_int2      = @|_| (0,0),
    load_int3      = @|_| (0,0,0),
    load_int4      = @|_| (0,0,0,0),
    load_mat3x3    = @|_| mat3x3_identity(),
    load_mat3x4    = @|_| mat3x4_identity(),
    load_mat4x4    = @|_| mat4x4_identity(),
    store_i32      = @|_, _| {},
    store_f32      = @|_, _| {},
    store_vec2     = @|_, _| {},
    store_vec3     = @|_, _| {},
    store_vec4     = @|_, _| {},
    store_int2     = @|_, _, _| {},
    store_int3     = @|_, _, _, _| {},
    store_int4     = @|_, _, _, _, _| {},
    store_mat3x3   = @|_, _| {},
    store_mat3x4   = @|_, _| {},
    store_mat4x4   = @|_, _| {},
    handle         = 0,
    pointer        = @|_| 0 as &[f32],
    count          = 0
};

fn @shift_device_buffer(off: i32, count: i32, buffer: DeviceBuffer) = DeviceBuffer {
    add_atomic_i32 = @|id, v| buffer.add_atomic_i32(id + off, v),
    add_atomic_f32 = @|id, v| buffer.add_atomic_f32(id + off, v),
    min_atomic_i32 = @|id, v| buffer.min_atomic_i32(id + off, v),
    max_atomic_i32 = @|id, v| buffer.max_atomic_i32(id + off, v),
    load_i32_host  = @|id| buffer.load_i32_host(id + off),
    store_i32_host = @|id, v| buffer.store_i32_host(id + off, v),
    copy_from_host_async = @|s, e, ptr| buffer.copy_from_host_async(s + off, e + off, ptr),
    copy_to_host_async   = @|s, e, ptr| buffer.copy_to_host_async(s + off, e + off, ptr),
    fill_i32_host_async  = @|s, e, v| buffer.fill_i32_host_async(s + off, e + off, v),
    fill_f32_host_async  = @|s, e, v| buffer.fill_f32_host_async(s + off, e + off, v),
    load_i32       = @|id| buffer.load_i32(id + off),
    load_f32       = @|id| buffer.load_f32(id + off),
    load_vec2      = @|id| buffer.load_vec2(id + off),
    load_vec3      = @|id| buffer.load_vec3(id + off),
    load_vec4      = @|id| buffer.load_vec4(id + off),
    load_int2      = @|id| buffer.load_int2(id + off),
    load_int3      = @|id| buffer.load_int3(id + off),
    load_int4      = @|id| buffer.load_int4(id + off),
    load_mat3x3    = @|id| buffer.load_mat3x3(id + off),
    load_mat3x4    = @|id| buffer.load_mat3x4(id + off),
    load_mat4x4    = @|id| buffer.load_mat4x4(id + off),
    store_i32      = @|id, v| buffer.store_i32(id + off, v),
    store_f32      = @|id, v| buffer.store_f32(id + off, v),
    store_vec2     = @|id, v| buffer.store_vec2(id + off, v),
    store_vec3     = @|id, v| buffer.store_vec3(id + off, v),
    store_vec4     = @|id, v| buffer.store_vec4(id + off, v),
    store_int2     = @|id, v1, v2| buffer.store_int2(id + off, v1, v2),
    store_int3     = @|id, v1, v2, v3| buffer.store_int3(id + off, v1, v2, v3),
    store_int4     = @|id, v1, v2, v3, v4| buffer.store_int4(id + off, v1, v2, v3, v4),
    store_mat3x3   = @|id, v| buffer.store_mat3x3(id + off, v),
    store_mat3x4   = @|id, v| buffer.store_mat3x4(id + off, v),
    store_mat4x4   = @|id, v| buffer.store_mat4x4(id + off, v),
    handle         = buffer.handle,
    pointer        = @|id| buffer.pointer(id + off),
    count          = count
};

// Shallow buffer. Granularity is 4 byte per index. Might be on the host or the device. Read only.
struct ShallowBuffer {
    load_i32:    fn (i32) -> i32,
    load_f32:    fn (i32) -> f32,
    load_vec2:   fn (i32) -> Vec2,
    load_vec3:   fn (i32) -> Vec3,
    load_vec4:   fn (i32) -> Vec4,
    load_int2:   fn (i32) -> (i32, i32),
    load_int3:   fn (i32) -> (i32, i32, i32),
    load_int4:   fn (i32) -> (i32, i32, i32, i32),
    load_mat3x3: fn (i32) -> Mat3x3,
    load_mat3x4: fn (i32) -> Mat3x4,
    load_mat4x4: fn (i32) -> Mat4x4,
    pointer:     fn (i32) -> &[f32],
    count:       i32, // Given in units of i32, not bytes! Zero if unknown.
}

fn @shift_shallow_buffer(off: i32, count: i32, buffer: ShallowBuffer) = ShallowBuffer {
    load_i32    = @|id| buffer.load_i32(id + off),
    load_f32    = @|id| buffer.load_f32(id + off),
    load_vec2   = @|id| buffer.load_vec2(id + off),
    load_vec3   = @|id| buffer.load_vec3(id + off),
    load_vec4   = @|id| buffer.load_vec4(id + off),
    load_int2   = @|id| buffer.load_int2(id + off),
    load_int3   = @|id| buffer.load_int3(id + off),
    load_int4   = @|id| buffer.load_int4(id + off),
    load_mat3x3 = @|id| buffer.load_mat3x3(id + off),
    load_mat3x4 = @|id| buffer.load_mat3x4(id + off),
    load_mat4x4 = @|id| buffer.load_mat4x4(id + off),
    pointer     = @|id| buffer.pointer(id + off),
    count       = count
};

// Device buffer accessor
type DeviceBufferAccessor  = fn (u64, &[f32], i32) -> DeviceBuffer;
type ShallowBufferAccessor = fn (&[f32], i32)      -> ShallowBuffer;
