struct LookupEntry {
    type_id: u32, // Type ID depends on the actual dyntable usecase
    flags:   u32, // Optional flags, currently not used
    offset:  u64  // Offset to start of the DynTable in bytes
}

// TODO: Prolly the mother of all cache misses :O
// Use a standard buffer if all elements have the same size!
struct DynTableData {
    count:  u64,            // Entry counts
    header: &[LookupEntry], // Pointer to an array of lookup entries
    size:   u64,            // Size in bytes of the buffer 'start' is pointing to
    start:  &[u8]           // Pointer to an buffer of size 'size'
}

struct DynTable {
    count:  u64,
    lookup: fn (i32) -> LookupEntry,
    data:   fn (u64) -> DeviceBuffer
}

fn @join_u32_to_u64(a: u32, b: u32) = ((b as u64) << 32) | (a as u64);
fn @split_u64_to_u32(a: u64)        = ((a & 0xFFFFFFFF) as u32, ((a >> 32) & 0xFFFFFFFF) as u32);

fn @make_dyntable(tbl: DynTableData, acc: DeviceBufferAccessor) -> DynTable {
    fn @get_lookup_entry(ind: i32) -> LookupEntry {
        // TODO: Check boundaries
        //tbl.header(ind)
        let data = acc((&tbl.header(ind)) as &[u8]);
        let (type_id, flags, off1, off2) = data.load_int4(0);
        LookupEntry {
             type_id = bitcast[u32](type_id),
             flags   = bitcast[u32](flags),
             offset  = join_u32_to_u64(bitcast[u32](off1), bitcast[u32](off2))
        }
    }
    
    fn @get_table_entry(off: u64) -> DeviceBuffer {
        // TODO: Check boundaries
        acc(&tbl.start(off) as &[u8])
    }

    DynTable {
        count  = tbl.count,
        lookup = @|id| get_lookup_entry(id),
        data   = @|off| get_table_entry(off)
    }
}

//-----------------

// Mandatory information for the tracing part
struct TraceAccessor {
    shapes:   ShapeTable,  // Defined in shape.art
    entities: EntityTable, // Defined in entity.art
}
