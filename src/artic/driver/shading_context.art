// Used as interface
struct CoordSystem {
    to_local:  Mat3x4, // Transform global to local
    to_global: Mat3x4  // Transform local to global (Precomputed inverse of to_local)
}

fn @make_identity_coordsystem() = CoordSystem {
    to_local  = mat3x4_identity(),
    to_global = mat3x4_identity()
};

struct ShadingContext {
    entity_id: i32,
    pixel:     PixelCoord,
    ray:       Ray,
    hit:       Hit,
    surf:      SurfaceElement,
    uvw:       Vec3,
    coord:     CoordSystem // Coordinate system for world & object coordinates. Note: The surf.local transforms from shading orientation to world orientation!
}

fn @make_surface_shading_context(entity_id: i32, pixel: PixelCoord, ray: Ray, hit: Hit, surf: SurfaceElement, coord: CoordSystem) = ShadingContext {
    entity_id = entity_id,
    pixel     = pixel,
    ray       = ray,
    hit       = hit,
    surf      = surf,
    uvw       = vec2_to_3(surf.tex_coords, 0),
    coord     = coord
};

fn @make_miss_shading_context(pixel: PixelCoord, ray: Ray) = ShadingContext {
    entity_id = -1,
    pixel     = pixel,
    ray       = ray,
    hit       = empty_hit(flt_max),
    surf      = make_invalid_surface_element(),
    uvw       = vec3_expand(0),
    coord     = make_identity_coordsystem()
};

fn @make_emissive_shading_context(ray: Ray, surf: SurfaceElement, uvw: Vec3) = ShadingContext {
    entity_id = -1,
    pixel     = make_empty_pixelcoord(),
    ray       = ray,
    hit       = empty_hit(flt_max),
    surf      = surf,
    uvw       = uvw,
    coord     = make_identity_coordsystem() // TODO: ?
};

type BSDFShader     = fn (ShadingContext) -> Bsdf;
type MaterialShader = fn (ShadingContext) -> Material;
