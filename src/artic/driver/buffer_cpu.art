fn @cpu_load_vec4(p: &[f32], elem: i32) {
    let v = (p as &[simd[f32 * 4]])(elem);
    make_vec4(v(0), v(1), v(2), v(3)) 
}

fn @make_cpu_buffer(p: &[u8], count: i32) = DeviceBuffer {
    add_atomic_i32 = @ |i, v| cpu_atomic_add_i32(&(p as &[i32])(i) as &mut i32, v),
    add_atomic_f32 = @ |i, v| cpu_atomic_add_f32(&mut ((p as &mut [f32])(i)), v),
    min_atomic_i32 = @ |i, v| cpu_atomic_min_i32(&mut ((p as &mut [i32])(i)), v),
    max_atomic_i32 = @ |i, v| cpu_atomic_max_i32(&mut ((p as &mut [i32])(i)), v),

    load_i32_host  = @ |i| (p as &[i32])(i),
    store_i32_host = @ |i, v| { (p as &mut [i32])(i) = v; },

    copy_from_host = @ |s, e, ptr| {
        for i in safe_unroll(s, e) {
            (p as &mut [i32])(i) = ptr(i);
        }
    },
    copy_to_host   = @ |s, e, ptr| {
        for i in safe_unroll(s, e) {
            ptr(i) = (p as &[i32])(i);
        }
    },

    load_f32    = @ |i| (p as &[f32])(i),
    load_i32    = @ |i| (p as &[i32])(i),
    load_vec2   = @ |i| { let q = p as &[f32]; make_vec2(q(i + 0), q(i + 1)) },
    load_vec3   = @ |i| { let q = p as &[f32]; make_vec3(q(i + 0), q(i + 1), q(i + 2)) },
    load_vec4   = @ |i| { let v = (&p(i * 4) as &[simd[f32 * 4]])(0); make_vec4(v(0), v(1), v(2), v(3)) },
    load_int2   = @ |i| { let q = p as &[i32]; (q(i + 0), q(i + 1)) },
    load_int3   = @ |i| { let q = p as &[i32]; (q(i + 0), q(i + 1), q(i + 2)) },
    //load_int4   = @ |i| { let q = p as &[i32]; (q(i + 0), q(i + 1), q(i + 2), q(i + 3)) },
    load_int4   = @ |i| { let v = ((&p(i * 4)) as &[simd[i32 * 4]])(0); (v(0), v(1), v(2), v(3)) },
    load_mat3x3 = @ |i| { let q = p as &[f32]; 
        make_mat3x3(make_vec3(q(i + 0), q(i + 1), q(i + 2)),
                    make_vec3(q(i + 3), q(i + 4), q(i + 5)),
                    make_vec3(q(i + 6), q(i + 7), q(i + 8))) },
    load_mat3x4 = @ |i| {
        let q  = &p(i * 4) as &[simd[f32 * 4]];
        let v0 = q(0);
        let v1 = q(1);
        let v2 = q(2);
        make_mat3x4(make_vec3(v0(0), v0(1), v0(2)),
                    make_vec3(v0(3), v1(0), v1(1)),
                    make_vec3(v1(2), v1(3), v2(0)),
                    make_vec3(v2(1), v2(2), v2(3)))
    },
    load_mat4x4 = @ |i| {
        let q  = &p(i * 4) as &[simd[f32 * 4]];
        let v0 = q(0);
        let v1 = q(1);
        let v2 = q(2);
        let v3 = q(3);
        make_mat4x4(make_vec4(v0(0), v0(1), v0(2), v0(3)),
                    make_vec4(v1(0), v1(1), v1(2), v1(3)),
                    make_vec4(v2(0), v2(1), v2(2), v2(3)),
                    make_vec4(v3(0), v3(1), v3(2), v3(3)))
    },
    store_i32     = @ |i, v| { (p as &mut [i32])(i) = v; },
    store_f32     = @ |i, v| { (p as &mut [f32])(i) = v; },
    store_vec2    = @ |i, v| { let q = p as &mut [f32]; q(i + 0) = v.x; q(i + 1) = v.y; },
    store_vec3    = @ |i, v| { let q = p as &mut [f32]; q(i + 0) = v.x; q(i + 1) = v.y; q(i + 2) = v.z; },
    store_vec4    = @ |i, v| { let q = p as &mut [f32]; q(i + 0) = v.x; q(i + 1) = v.y; q(i + 2) = v.z; q(i + 3) = v.w; },
    store_int2    = @ |i, v1, v2|         { let q = p as &mut [i32]; q(i + 0) = v1; q(i + 1) = v2; },
    store_int3    = @ |i, v1, v2, v3|     { let q = p as &mut [i32]; q(i + 0) = v1; q(i + 1) = v2; q(i + 2) = v3; },
    store_int4    = @ |i, v1, v2, v3, v4| { let q = p as &mut [i32]; q(i + 0) = v1; q(i + 1) = v2; q(i + 2) = v3; q(i + 3) = v4; },
    store_mat3x3  = @ |i, v| { 
        let q = p as &mut [f32];
        q(i + 0) = v.col(0).x; q(i + 1) = v.col(0).y; q(i + 2) = v.col(0).z;
        q(i + 3) = v.col(1).x; q(i + 4) = v.col(1).y; q(i + 5) = v.col(1).z;
        q(i + 6) = v.col(2).x; q(i + 7) = v.col(2).y; q(i + 8) = v.col(2).z;
    },
    store_mat3x4  = @ |i, v| { 
        let q = p as &mut [f32];
        q(i + 0) = v.col(0).x; q(i +  1) = v.col(0).y; q(i +  2) = v.col(0).z;
        q(i + 3) = v.col(1).x; q(i +  4) = v.col(1).y; q(i +  5) = v.col(1).z;
        q(i + 6) = v.col(2).x; q(i +  7) = v.col(2).y; q(i +  8) = v.col(2).z;
        q(i + 9) = v.col(3).x; q(i + 10) = v.col(3).y; q(i + 11) = v.col(3).z;
    },
    store_mat4x4  = @ |i, v| { 
        let q = p as &mut [f32];
        q(i +  0) = v.col(0).x; q(i +  1) = v.col(0).y; q(i +  2) = v.col(0).z; q(i +  3) = v.col(0).w;
        q(i +  4) = v.col(1).x; q(i +  5) = v.col(1).y; q(i +  6) = v.col(1).z; q(i +  7) = v.col(1).w;
        q(i +  8) = v.col(2).x; q(i +  9) = v.col(2).y; q(i + 10) = v.col(2).z; q(i + 11) = v.col(2).w;
        q(i + 12) = v.col(3).x; q(i + 13) = v.col(3).y; q(i + 14) = v.col(3).z; q(i + 15) = v.col(3).w;
    },
    pointer       = @ |i| &(p as &[i32])(i) as &[u8],
    count         = count,
    has_alignment = false
};

fn @load_cpu_buffer(filename: &[u8]) {
    let mut ptr      : &[u8];
    let mut bytesize : i32;
    ignis_load_buffer(0, filename, &mut ptr, &mut bytesize);
    make_cpu_buffer(ptr, (bytesize as i64 / sizeof[i32]()) as i32)
}

fn @load_cpu_buffer_by_id(id: i32) {
    let mut ptr      : &[u8];
    let mut bytesize : i32;
    ignis_load_buffer_by_id(0, id, &mut ptr, &mut bytesize);
    make_cpu_buffer(ptr, (bytesize as i64 / sizeof[i32]()) as i32)
}
