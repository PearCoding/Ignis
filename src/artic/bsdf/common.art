// Creates a fully absorbing BSDF non scattering bsdf
fn @make_null_bsdf(_surf: SurfaceElement) = Bsdf {
    eval        = @ |_, _| color_builtins::black,
    pdf         = @ |_, _| 0,
    sample      = @ |_, _, _| reject_bsdf_sample(),
    albedo      = @ |_| color_builtins::black,
    is_specular = false
};

// Creates a fully absorbing BSDF that behaves like black body. Internally it is just a black mirror
fn @make_black_bsdf(surf: SurfaceElement) = make_mirror_bsdf(surf, color_builtins::black);

// Error
fn @make_error_bsdf(surf: SurfaceElement) = Bsdf {
    eval        = @ |in_dir, _| color_mulf(color_builtins::pink, absolute_cos(in_dir, surf.local.col(2)) * flt_inv_pi),
    pdf         = @ |_, _| 0,
    sample      = @ |_, _, _| reject_bsdf_sample(),
    albedo      = @ |_| color_builtins::pink,
    is_specular = false
};

// Creates a BSDF that passthroughs all rays and behaves like a refractive interface with ior = 1
fn @make_passthrough_bsdf(surf: SurfaceElement) = make_perfect_refraction_bsdf(surf, color_builtins::white);

// Allows some bsdfs to be handled as double-sided thin objects. 
// Most stuff does NOT need it! Support of this should better be integrated in the BSDF itself.
// Currently only principled BSDF with glTF makes use of it.
fn @make_doublesided_bsdf(surf: SurfaceElement, bsdf_factory: fn (SurfaceElement) -> Bsdf) -> Bsdf {
    if surf.is_entering { 
        @bsdf_factory(surf)
    } else {
        let bsdf = @bsdf_factory(surf.{ is_entering = true /* Normals already flipped by faceforwarding */ });
        bsdf.{
            eval   = @ |in_dir, out_dir| bsdf.eval(vec3_neg(in_dir), vec3_neg(out_dir)),
            pdf    = @ |in_dir, out_dir| bsdf.pdf(vec3_neg(in_dir), vec3_neg(out_dir)),
            sample = @ |rnd, out_dir, adjoint| {
                if let Option[BsdfSample]::Some(s) = bsdf.sample(rnd, vec3_neg(out_dir), adjoint) {
                    make_option(s.{ in_dir = vec3_neg(s.in_dir) })
                } else {
                    reject_bsdf_sample()
                }
            },
            albedo = @ |out_dir| bsdf.albedo(vec3_neg(out_dir)),
        }
    }
}
