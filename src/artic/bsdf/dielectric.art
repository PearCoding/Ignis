// Creates a perfect glass BSDF
fn @make_glass_bsdf(surf: SurfaceElement, n1: f32, n2: f32, ks: Color, kt: Color) = Bsdf {
    eval   = @ |_, _| color_builtins::black,
    pdf    = @ |_, _| 0,
    sample = @ |rnd, out_dir, adjoint| {
        let k = if surf.is_entering { n1 / n2 } else { n2 / n1 };
        let n = surf.local.col(2);
        let cos_o = vec3_dot(out_dir, n);

        let fterm = from_option(fresnel(k, cos_o), FresnelTerm { cos_t = 0, factor = 1 });

        if randf(rnd) > fterm.factor {
            // Refraction
            let t = vec3_refract(out_dir, n, k, cos_o, fterm.cos_t);
            let adjoint_term = if adjoint { k * k } else { 1 };
            make_bsdf_sample(t, 1, color_mulf(kt, adjoint_term), k)
        } else {
            // Reflection
            make_bsdf_sample(vec3_reflect(out_dir, n), 1, ks, 1)
        }
    },
    is_specular = true
};

//--------------------------------------
// Creates a perfect glass BSDF with thin interface approximation
fn @make_thin_glass_bsdf(surf: SurfaceElement, n1: f32, n2: f32, ks: Color, kt: Color) = Bsdf {
    eval   = @ |_, _| color_builtins::black,
    pdf    = @ |_, _| 0,
    sample = @ |rnd, out_dir, _| {
        let k = n1 / n2; // Its always from outside to inside as it is thin!
        let N = surf.local.col(2);
        let cos_o = absolute_cos(out_dir, N);

        let fterm = math::fresnel_dielectric(k, cos_o);
        let F     = fterm + (1 - fterm) * fterm / (fterm + 1);

        if randf(rnd) > F {
            // Refraction
            make_bsdf_sample(vec3_neg(out_dir), 1, kt, 1 /* It is thin*/)
        } else {
            // Reflection
            make_bsdf_sample(vec3_normalize(vec3_reflect(out_dir, N)), 1, ks, 1)
        }
    },
    is_specular = true
};

//--------------------------------------
// Creates a rough glass BSDF
fn @make_rough_glass_bsdf(surf: SurfaceElement, n1: f32, n2: f32, ks: Color, kt: Color, micro: microfacet::MicrofacetDistribution) -> Bsdf {
    let cos_eps = 1e-5 : f32; // Epsilon for cosine
    let pdf_eps = if micro.is_delta { 
        flt_eps
    } else {
        // Epsilon for microfacet model pdf
        // These values are carefully chosen...
        let alpha = if micro.alpha_u < micro.alpha_v { micro.alpha_u } else { micro.alpha_v };
        if ?alpha && alpha <= 0.01 {
            1e-3 : f32
        } else if ?alpha && alpha <= 0.1 {
            1e-4 : f32
        } else {
            // If the alpha value is not constant (e.g., a texture) or quite large, stick to a "safe" value
            1e-5 : f32
        }
    }; 
    let eta = if surf.is_entering { n1 / n2 } else { n2 / n1 };
    let N   = surf.local.col(2);

    let eval = @ |in_dir: Vec3, out_dir: Vec3| -> Color {
        // if true { return(color_builtins::white) }
        let cos_i = vec3_dot(N, in_dir);
        let cos_o = vec3_dot(N, out_dir);

        if math_builtins::fabs(cos_i * cos_o) <= cos_eps { return(color_builtins::black) }

        let is_transmission = math_builtins::signbit(cos_i * cos_o);

        let H = select(is_transmission, vec3_halfway_refractive(in_dir, out_dir, eta), vec3_halfway(in_dir, out_dir));
        
        let cos_h_i = vec3_dot(H, in_dir);
        let cos_h_o = vec3_dot(H, out_dir);

        if math_builtins::fabs(cos_h_i * cos_h_o) <= cos_eps { return(color_builtins::black) }

        let fterm = math::fresnel_dielectric(eta, math_builtins::fabs(cos_h_o));
        if micro.is_delta { return(if is_transmission { color_mulf(kt, 1-fterm) } else { color_mulf(ks, fterm) }) }

        let D = micro.D(H);
        let G = micro.G(in_dir, out_dir, H);

        if !is_transmission {
            let jacob = shading::halfway_reflective_jacobian(cos_o); // ~ 1 / (4 * cos_o)
            color_mulf(ks, fterm * D * G * math_builtins::fabs(jacob))
        } else {
            let jacob = shading::halfway_refractive_jacobian(eta, cos_h_i, cos_h_o); // ~ eta * eta * cos_h_i / (cos_h_i + eta * cos_h_o)^2
            let norm  = math_builtins::fabs(safe_div(cos_h_o * jacob, cos_o)); // ~ cos_h_i * cos_h_o / (cos_o * ~cos_i~) * ...
            color_mulf(kt, (1 - fterm) * D * G * norm)
        }
    };

    let pdf = @ |in_dir: Vec3, out_dir: Vec3| -> f32 {
        if micro.is_delta { return(0) }

        let cos_i = vec3_dot(N, in_dir);
        let cos_o = vec3_dot(N, out_dir);

        if math_builtins::fabs(cos_i * cos_o) <= cos_eps { return(0) }

        let is_transmission = math_builtins::signbit(cos_i * cos_o);

        let H = select(is_transmission, vec3_halfway_refractive(in_dir, out_dir, eta), vec3_halfway(in_dir, out_dir));

        let cos_h_i = vec3_dot(H, in_dir);
        let cos_h_o = vec3_dot(H, out_dir);

        if math_builtins::fabs(cos_h_i * cos_h_o) <= cos_eps { return(0) }

        let fterm = math::fresnel_dielectric(eta, math_builtins::fabs(cos_h_o));

        let mpdf = micro.pdf(in_dir, out_dir, H);

        if mpdf <= pdf_eps {
            0
        } else if !is_transmission {
            fterm * mpdf * math_builtins::fabs(shading::halfway_reflective_jacobian(cos_h_o))
        } else {
            (1 - fterm) * mpdf * math_builtins::fabs(shading::halfway_refractive_jacobian(eta, cos_h_i, cos_h_o))
        }
    };

    Bsdf {
        eval   = eval,
        pdf    = pdf,
        sample = @ |rnd, out_dir, adjoint| {
            let cos_o = vec3_dot(N, out_dir);
            if math_builtins::fabs(cos_o) <= cos_eps { return(reject_bsdf_sample()) }

            let s = micro.sample(rnd, out_dir);
            if vec3_len2(s.normal) <= flt_eps || s.pdf <= pdf_eps { return(reject_bsdf_sample()) };

            let oH = vec3_normalize(s.normal);
            let H  = select(math_builtins::signbit(vec3_dot(oH, out_dir)), vec3_neg(oH), oH);

            let cos_h_o = vec3_dot(H, out_dir);
            if unlikely(math_builtins::fabs(cos_h_o) <= cos_eps) { return(reject_bsdf_sample()) }

            let fterm = from_option(fresnel(eta, cos_h_o), FresnelTerm{ cos_t = 0, factor = 1 });

            let (in_dir, sel_pdf) = if (randf(rnd) > fterm.factor) {
                // Refraction
                let dir   = vec3_normalize(vec3_refract(out_dir, H, eta, cos_h_o, fterm.cos_t));
                let jacob = shading::halfway_refractive_jacobian(eta, vec3_dot(H, dir), cos_h_o);
                (dir, (1 - fterm.factor) * if micro.is_delta { 1 } else { math_builtins::fabs(jacob) })
            } else {
                // Reflection
               let dir   = vec3_normalize(vec3_reflect(out_dir, H));
               let jacob = shading::halfway_reflective_jacobian(cos_h_o);
               (dir, fterm.factor * if micro.is_delta { 1 } else { math_builtins::fabs(jacob) })
            };

            let cos_i = vec3_dot(N, in_dir);
            let f_pdf = s.pdf * sel_pdf;
            let is_transmission = math_builtins::signbit(cos_i * cos_o);
            let adjoint_term    = if is_transmission && adjoint { 1 / (eta * eta) } else { 1 };
            make_bsdf_sample(
                in_dir,
                f_pdf,
                color_mulf(eval(in_dir, out_dir), safe_div(adjoint_term, f_pdf)),
                if !is_transmission { 1 } else { eta }
            )
        },
        is_specular = micro.is_delta,
    }
}
