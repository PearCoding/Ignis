// Creates a perfect mirror BSDF
fn @make_mirror_bsdf(surf: SurfaceElement, ks: Color) = Bsdf {
    eval   = @ |_, _| color_builtins::black,
    pdf    = @ |_, _| 0,
    sample = @ |_, out_dir, _| {
        make_bsdf_sample(vec3_reflect(out_dir, surf.local.col(2)), 1, ks, 1)
    },
    is_specular = true
};

//--------------------------------------
// Creates a perfect conductor BSDF
fn @make_conductor_bsdf(surf: SurfaceElement, ior: Color, k: Color, ks: Color) = Bsdf {
    eval   = @ |_, _| color_builtins::black,
    pdf    = @ |_, _| 0,
    sample = @ |_, out_dir, _| {
        let n = surf.local.col(2);
        let cos_i = vec3_dot(out_dir, n);
        
        let f = make_color(
            conductor_factor(ior.r, k.r, cos_i),
            conductor_factor(ior.g, k.g, cos_i),
            conductor_factor(ior.b, k.b, cos_i),
            1);

        let color = color_mul(ks, f);
        make_bsdf_sample(vec3_reflect(out_dir, n), 1, color, 1)
    },
    is_specular = true
};

//--------------------------------------
// Creates a microfacet conductor BSDF with specific fresnel term
fn @make_rough_base_conductor_bsdf(surf: SurfaceElement, kd: Color, ks: Color, fresnelTerm: fn (f32) -> Color, micro: microfacet::MicrofacetDistribution) -> Bsdf {
    let N = surf.local.col(2);

    if micro.is_delta {
        Bsdf {
            eval   = @ |_, _| color_builtins::black,
            pdf    = @ |_, _| 0,
            sample = @ |_, out_dir, _| {
                let cos_o = absolute_cos(out_dir, N);
                let F     = fresnelTerm(cos_o);
                let IF    = color_sub(color_builtins::white, F);
        
                let color = color_add(color_mul(kd, IF), color_mul(ks, F));
                make_bsdf_sample(vec3_reflect(out_dir, N), 1, color, 1)
            },
            is_specular = true
        }
    } else {
        let eval = @ |in_dir: Vec3, out_dir: Vec3| -> Color {
            let cos_o = absolute_cos(out_dir, N);
            let cos_i = absolute_cos(in_dir, N);

            if cos_o <= flt_eps || cos_i <= flt_eps { return(color_builtins::black) }

            let H  = vec3_halfway(in_dir, out_dir);
            let D  = micro.D(H);
            let G  = micro.G(in_dir, out_dir, H);
            let F  = fresnelTerm(absolute_cos(out_dir, H));
            let IF = color_sub(color_builtins::white, F);
            color_mulf(color_add(color_mul(kd, IF), color_mul(ks, F)), D * G / (4 * cos_o))
        };

        Bsdf {
            eval   = eval,
            pdf    = @ |in_dir, out_dir| {
                let H       = vec3_halfway(in_dir, out_dir);
                let cos_h_o = absolute_cos(out_dir, H);
                let jacob   = safe_div(1, 4 * cos_h_o); // Jacobian of the half-direction mapping
                micro.pdf(in_dir, out_dir, H) * jacob
            },
            sample = @ |rnd, out_dir, _| {
                let cos_o = absolute_cos(out_dir, N);
                if cos_o <= flt_eps { return(reject_bsdf_sample()) };

                let s = micro.sample(rnd, out_dir);
                if vec3_len2(s.normal) <= flt_eps { return(reject_bsdf_sample()) };

                let oH = vec3_normalize(s.normal);
                let H  = select(math_builtins::signbit(vec3_dot(oH, out_dir)), vec3_neg(oH), oH);

                let in_dir = vec3_reflect(out_dir, H);

                let cos_i = absolute_cos(in_dir, N);
                if cos_i <= flt_eps { return(reject_bsdf_sample()) };

                let cos_h_o = absolute_cos(out_dir, H); // = cos_h_i
                let jacob = 1 / (4 * cos_h_o); // Jacobian of the half-direction mapping

                let pdf   = s.pdf * jacob;
                let color = color_mulf(eval(in_dir, out_dir), safe_div(1, pdf));
                make_bsdf_sample(in_dir, pdf, color, 1)
            },
            is_specular = false
        }
    }
}

// Creates a microfacet conductor BSDF. This is the two-sided version
fn @make_rough_conductor_bsdf(surf: SurfaceElement, ior: Color, k: Color, ks: Color, micro: microfacet::MicrofacetDistribution) -> Bsdf {
    let fresnelTerm = @|cosTheta : f32| make_color(
        conductor_factor(ior.r, k.r, cosTheta),
        conductor_factor(ior.g, k.g, cosTheta),
        conductor_factor(ior.b, k.b, cosTheta),
        1);
    make_rough_base_conductor_bsdf(surf, color_builtins::black, ks, fresnelTerm, micro)
}
