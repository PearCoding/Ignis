struct KlemsComponentSpecification {
    total:       f32,
    theta_count: [i32*2],
    entry_count: [i32*2],
}

struct KlemsSpecification {
    front_reflection:   KlemsComponentSpecification,
    back_reflection:    KlemsComponentSpecification,
    front_transmission: KlemsComponentSpecification,
    back_transmission:  KlemsComponentSpecification
}

struct KlemsThetaBasis {
    center:    f32,
    lower:     f32,
    upper:     f32,
    phi_count: i32
}

struct KlemsBasis {
    theta_count:         i32,
    entry_count:         i32,
    theta_basis:         fn (i32) -> KlemsThetaBasis,
    theta_linear_offset: fn (i32) -> i32
}

struct KlemsComponent {
    specification: KlemsComponentSpecification,
    row_basis:     KlemsBasis,
    column_basis:  KlemsBasis,
    matrix:        fn (i32) -> f32,
    cdf:           fn (i32) -> cdf::CDF1D // The cdf data is transposed in memory
}

struct KlemsModel {
    front_reflection:   KlemsComponent,
    back_reflection:    KlemsComponent,
    front_transmission: KlemsComponent,
    back_transmission:  KlemsComponent
}

// Coordinate transforms used to map to correct orientations
fn @k_fo(v: Vec3) = v;
fn @k_fi(v: Vec3) = k_fo(make_vec3(-v.x, -v.y, v.z));
fn @k_bo(v: Vec3) = k_fo(make_vec3(v.x, v.y, -v.z));
fn @k_bi(v: Vec3) = k_fo(vec3_neg(v));

fn @k_theta_index(theta: f32, basis: KlemsBasis) {
    interval::binary_search(basis.theta_count, @|k| basis.theta_basis(k).lower <= theta)
}

fn @k_phi_index(phi: f32, basis: KlemsThetaBasis) {
    let idx = max(0, (phi * (basis.phi_count as f32) * flt_inv_pi / 2 + 0.5) as i32);
    select(idx > basis.phi_count - 1, 0, idx)
}

fn @k_multi_index_of(theta: f32, phi: f32, basis: KlemsBasis) -> (i32, i32) {
    let i = k_theta_index(theta, basis);
    let j = k_phi_index(phi, basis.theta_basis(i));
    (i, j)
}

fn @k_index_of(theta: f32, phi: f32, basis: KlemsBasis) -> i32 {
    let (i, j) = k_multi_index_of(theta, phi, basis);
    basis.theta_linear_offset(i) + j
}

fn @k_eval_component_index(row: i32, col: i32, component: KlemsComponent) = component.matrix(row * component.column_basis.entry_count + col);

fn @k_sample_component_index(u: f32, row: i32, component: KlemsComponent) {
    component.cdf(row).sample_discrete(u)
}

fn @k_eval_component(in_dir: Vec3, out_dir: Vec3, component: KlemsComponent) {
    let (in_theta, in_phi)   = spherical_from_dir(in_dir);
    let (out_theta, out_phi) = spherical_from_dir(out_dir);
    let in_idx  = k_index_of(in_theta,  in_phi,  component.column_basis);
    let out_idx = k_index_of(out_theta, out_phi, component.row_basis);
    k_eval_component_index(out_idx, in_idx, component)
}

fn @k_get_theta_basis(lin_idx: i32, basis: KlemsBasis) {
    let theta_i = interval::binary_search(basis.theta_count, @|k| basis.theta_linear_offset(k) <= lin_idx);
    (basis.theta_basis(theta_i), lin_idx - theta_i)
}

fn @k_sample_theta_basis(u: f32, v: f32, basis: KlemsThetaBasis, phi_i: i32) -> (Vec3, f32) {
    let lower_sa  = math_builtins::cos(basis.lower);
    let upper_sa  = math_builtins::cos(basis.upper);
    let lower_sa2 = lower_sa * lower_sa;
    let upper_sa2 = upper_sa * upper_sa;

    let cosTheta2 = lerp(lower_sa2, upper_sa2, u);
    let cosTheta  = math_builtins::sqrt(cosTheta2);
    let sinTheta  = math_builtins::sqrt(1 - cosTheta2);

    let phi = 2 * flt_pi * (phi_i as f32 + v - 0.5) / basis.phi_count as f32;

    // Ignis normaly uses a different phi direction
    let vec = make_vec3(math_builtins::cos(phi) * sinTheta, math_builtins::sin(phi) * sinTheta, cosTheta);

    let pdf = (lower_sa2 - upper_sa2) * flt_pi / basis.phi_count as f32;

    (vec, pdf)
}

fn @k_sample_component(rnd: &mut RndState, in_dir: Vec3, component: KlemsComponent) -> (Vec3, f32) {
    let (in_theta, in_phi) = spherical_from_dir(in_dir);
    let in_idx             = k_index_of(in_theta, in_phi, component.column_basis);
    let sample             = k_sample_component_index(randf(rnd), in_idx, component);

    let (theta_basis, out_phi_idx) = k_get_theta_basis(sample.off, component.row_basis);
    let (out_dir, tb_pdf)          = k_sample_theta_basis(randf(rnd), randf(rnd), theta_basis, out_phi_idx);

    (out_dir, sample.pdf * tb_pdf)
}

fn @k_align(off: i32) = off + 4 - off % 4;

fn @make_klems_basis(specification: KlemsComponentSpecification, buffer: DeviceBuffer, off: i32, axis: i32) -> (KlemsBasis, i32) {
    let theta_count = specification.theta_count(axis);
    let entry_count = specification.entry_count(axis);
    let lin_off     = theta_count * 4 + off;

    (KlemsBasis {
        theta_count = theta_count,
        entry_count = entry_count,
        theta_basis = @ |i| {
            let vec = buffer.load_vec4(off + i * 4);
            KlemsThetaBasis {
                center    = vec.x,
                lower     = vec.y,
                upper     = vec.z,
                phi_count = bitcast[i32](vec.w),
            }
        },
        theta_linear_offset = @ |i| buffer.load_i32(lin_off + i)
    }, k_align(theta_count * 4 + theta_count))
}

fn @make_klems_component(specification: KlemsComponentSpecification, buffer: DeviceBuffer, off: i32) -> (KlemsComponent, i32) {
    let (row_basis, row_off) = make_klems_basis(specification, buffer, off,           0);
    let (col_basis, col_off) = make_klems_basis(specification, buffer, off + row_off, 1);

    let mat_size = row_basis.entry_count * col_basis.entry_count;
    (KlemsComponent {
        specification = specification,
        row_basis     = row_basis,
        column_basis  = col_basis,
        matrix        = @ |i| buffer.load_f32(off + row_off + col_off + i),
        cdf           = @ |col| cdf::make_cdf_1d_from_buffer(buffer, col_basis.entry_count, off + row_off + col_off + mat_size + col * col_basis.entry_count) 
    }, k_align(row_off + col_off + 2 * mat_size))
}

fn @make_klems_model(buffer: DeviceBuffer, specification: KlemsSpecification) -> KlemsModel {
    let (front_reflection,   front_reflection_off)   = make_klems_component(specification.front_reflection,   buffer, 0);
    let (front_transmission, front_transmission_off) = make_klems_component(specification.front_transmission, buffer, front_reflection_off);
    let (back_reflection,    back_reflection_off)    = make_klems_component(specification.back_reflection,    buffer, front_reflection_off + front_transmission_off);
    let (back_transmission,  _)                      = make_klems_component(specification.back_transmission,  buffer, front_reflection_off + front_transmission_off + back_reflection_off);
   
    KlemsModel {
        front_reflection   = front_reflection,
        front_transmission = front_transmission,
        back_reflection    = back_reflection,
        back_transmission  = back_transmission
    }
}

// TODO: Add proper sampling!
fn @make_klems_bsdf(surf: SurfaceElement, color: Color, up: Vec3, klems: KlemsModel) -> Bsdf {
    let front_refl_total = klems.front_reflection.specification.total;
    let front_tran_total = klems.front_transmission.specification.total;
    let back_refl_total  = klems.back_reflection.specification.total;
    let back_tran_total  = klems.back_transmission.specification.total;

    let front_refl_prob = safe_div(front_refl_total, front_refl_total + back_tran_total );
    let back_refl_prob  = safe_div(back_refl_total,  back_refl_total  + front_tran_total);
    fn @get_refl_prob(wo: Vec3) {
        let outFront = shading::is_positive_hemisphere(wo);
        if outFront { front_refl_prob } else { back_refl_prob }
    }

    // Only optimize components away if they are given at compile time!
    let has_front_refl = !?front_refl_total || front_refl_total > 0;
    let has_front_tran = !?front_tran_total || front_tran_total > 0;
    let has_back_refl  = !?back_refl_total  || back_refl_total  > 0;
    let has_back_tran  = !?back_tran_total  || back_tran_total  > 0;

    // Radiance uses a custom world transformation (making sure the flip of the normal is not propagated)
    let transform = tt_transform_matrix(if surf.is_entering { surf.local.col(2) } else { vec3_neg(surf.local.col(2)) }, up);
    let to_local  = @|v:Vec3| shading::to_local(transform, v);
    let to_global = @|v:Vec3| shading::to_world(transform, v);

    let local_eval = |wi : Vec3, wo : Vec3| {
        // Be sure to get side without the (possible) flip from the surface interaction
		let inFront	 = shading::is_positive_hemisphere(wi);
        let outFront = shading::is_positive_hemisphere(wo);

        let factor = match (inFront, outFront) {
            (true, true)   => if has_front_refl { k_eval_component(k_fi(wo), k_fo(wi), klems.front_reflection)   } else { 0:f32 },
            (true, false)  => if has_front_tran { k_eval_component(k_fo(wi), k_bi(wo), klems.front_transmission) } else { 0:f32 },
            (false, true)  => if has_back_tran  { k_eval_component(k_bi(wi), k_fo(wo), klems.back_transmission)  } else { 0:f32 },
            (false, false) => if has_back_refl  { k_eval_component(k_bi(wo), k_bo(wi), klems.back_reflection)    } else { 0:f32 }
        };

        color_mulf(color, factor * shading::abs_cos_theta(wi))
    };

    Bsdf {
        eval   = @ |in_dir, out_dir| {
            if true { return(color_builtins::black) } // See note below about NEE

            let wo = to_local(out_dir);
            let wi = to_local(in_dir);
            local_eval(wi, wo)
        },
        pdf    = @ |in_dir, out_dir| {
            if true { return(0) } // See note below about NEE

            let wo        = to_local(out_dir);
            let wi        = to_local(in_dir);
            let refl_prob = get_refl_prob(wo);

            let prob = if shading::is_same_hemisphere(wo, wi) { refl_prob } else { 1 - refl_prob };

            prob * cosine_hemisphere_pdf(shading::abs_cos_theta(wi))
        },
        sample = @ |rnd, out_dir, _| {
            // FIXME: This one below needs some fixing...
            // let wo        = to_local(out_dir);
            // let refl_prob = get_refl_prob(wo);
            // let is_refl   = refl_prob > 0 && randf(rnd) < refl_prob;
            // let outFront  = shading::is_positive_hemisphere(wo);

            // let (wi, pdf) = match (outFront, is_refl) {
            //     (true, true)   => {
            //         let (vec, pdf) = k_sample_component(rnd, k_fi(wo), klems.front_reflection);
            //         (k_fo(vec), refl_prob * pdf)
            //     },
            //     (true, false)  => {
            //         let (vec, pdf) = k_sample_component(rnd, k_fi(wo), klems.front_transmission);
            //         (k_bo(vec), (1 - refl_prob) * pdf)
            //     },
            //     (false, true)  => {
            //         let (vec, pdf) = k_sample_component(rnd, k_bi(wo), klems.back_transmission);
            //         (k_fo(vec), (1 - refl_prob) * pdf)
            //     },
            //     (false, false) => {
            //         let (vec, pdf) = k_sample_component(rnd, k_bi(wo), klems.back_reflection);
            //         (k_bo(vec), refl_prob * pdf)
            //     }
            // }; 
                
            // if pdf <= flt_eps {
            //     reject_bsdf_sample()
            // } else {
            //     make_bsdf_sample(to_global(wi), pdf, color_mulf(local_eval(wi, wo), 1 / pdf), 1)
            // }

            // Old, non optimized sampler
            let wo     = to_local(out_dir);
            let sample = sample_cosine_hemisphere(randf(rnd), randf(rnd));
            
            if sample.pdf <= flt_eps {
                reject_bsdf_sample()
            } else {
                let refl_prob  = get_refl_prob(wo);
                let (wi, prob) = if refl_prob > 0 && randf(rnd) < refl_prob {
                    (shading::make_same_hemisphere(wo, sample.dir), refl_prob)
                } else { 
                    (vec3_neg(shading::make_same_hemisphere(wo, sample.dir)), 1 - refl_prob)
                };
                
                let e_pdf = prob * sample.pdf;
                if e_pdf <= flt_eps {
                    reject_bsdf_sample()
                } else {
                    make_bsdf_sample(to_global(wi), e_pdf, color_mulf(local_eval(wi, wo), 1 / e_pdf), 1)
                }
            }
        },
        is_specular = true // FIXME: The bsdf does not work properly together with NEE. Figure out why!
    }
}
