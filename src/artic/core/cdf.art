mod cdf {
use super as all;
use super::math_builtins;
use super::interval;

type DeviceBuffer = all::DeviceBuffer;
type Vec2 = all::Vec2;

struct DiscreteSample1d {
    off: i32,
    pdf: f32
}

struct ContinousSample1d {
    off: i32,
    rem: f32,
    pos: f32,
    pdf: f32
}

struct DiscretePdf1d {
    pdf: f32
}

struct ContinousPdf1d {
    off: i32,
    pdf: f32
}

struct CDF1D {
    func_size:        i32, // This is the function data size, therefore e.g., if function data has size = s, cdf has size = s + 1
    get:              fn (i32) -> f32,
    sample_discrete:  fn (f32) -> DiscreteSample1d,
    pdf_discrete:     fn (i32) -> DiscretePdf1d,
    sample_continous: fn (f32) -> ContinousSample1d,
    pdf_continous:    fn (f32) -> ContinousPdf1d,
}

// Creates a cdf with func_size + 1 entries accessed by the get function
fn @make_cdf_1d(func_size: i32, get: fn (i32) -> f32) -> CDF1D {
    let pdf_discrete     = @|x:i32| DiscretePdf1d { pdf = get(x + 1) - get(x) };
    let sample_discrete  = @|u:f32| {
        let off = all::min(interval::binary_search(func_size + 1, @|i:i32| get(i) <= u), func_size - 1); // We omit the rare event of u=1 and pull down to u=0.99...
        DiscreteSample1d { off = off, pdf = pdf_discrete(off).pdf }
    };
    let pdf_continous    = @|x:f32| {
        let off = all::clamp((x * func_size as f32) as i32, 0, func_size - 1);
        ContinousPdf1d { off = off, pdf = pdf_discrete(off).pdf * func_size as f32}
    };
    let sample_continous = @|u:f32| {
        let sample = sample_discrete(u);
        let rem    = all::safe_div(u - get(sample.off), sample.pdf);
        let pos    = all::clampf((sample.off as f32 + rem) / func_size as f32, 0, 1);
        ContinousSample1d { off = sample.off, rem = rem, pos = pos, pdf = sample.pdf * func_size as f32 }
    };

    CDF1D {
        func_size        = func_size,
        get              = get,
        sample_discrete  = sample_discrete,
        pdf_discrete     = pdf_discrete,
        sample_continous = sample_continous,
        pdf_continous    = pdf_continous
    }
}

// This underlying buffer of the CDF omits the first 0 entry and only contains [x1, x2, ..., xn-1, 1] as data.
// The CDF itself handles [0, x1, x2, ..., xn-1, 1] virtually.
fn @make_cdf_1d_from_buffer(data: DeviceBuffer, func_size: i32, off: i32) 
    = make_cdf_1d(func_size, @|i:i32| if i == 0 { 0 } else { data.load_f32(i - 1 + off) });

////////////////// 2D
struct DiscreteSample2d {
    off: (i32, i32),
    pdf: f32
}

struct ContinousSample2d {
    off: (i32, i32),
    rem: Vec2,
    pos: Vec2,
    pdf: f32
}

struct DiscretePdf2d {
    pdf: f32
}

struct ContinousPdf2d {
    off: (i32, i32),
    pdf: f32
}

struct CDF2D {
    conditional:      fn (i32) -> CDF1D,
    marginal:         CDF1D,
    sample_discrete:  fn (Vec2) -> DiscreteSample2d,
    pdf_discrete:     fn (i32, i32) -> DiscretePdf2d,
    sample_continous: fn (Vec2) -> ContinousSample2d,
    pdf_continous:    fn (Vec2) -> ContinousPdf2d,
}

// (x ~ conditional, y ~ marginal)
fn @make_cdf_2d(marginal: CDF1D, conditional: fn (i32) -> CDF1D) -> CDF2D {
    let sample_discrete  = @|uv: Vec2| -> DiscreteSample2d {
        let sample1 = marginal.sample_discrete(uv.y);
        let sample2 = conditional(sample1.off).sample_discrete(uv.x);
    
        DiscreteSample2d {
            off = (sample2.off, sample1.off),
            pdf = sample1.pdf * sample2.pdf
        }
    };
    let pdf_discrete     = @|x: i32, y: i32| -> DiscretePdf2d {
        let pdf1 = marginal.pdf_discrete(y);
        let pdf2 = conditional(y).pdf_discrete(x);
    
        DiscretePdf2d {
            pdf = pdf1.pdf * pdf2.pdf
        }
    };
    let sample_continous = @|uv: Vec2| -> ContinousSample2d {
        let sample1 = marginal.sample_continous(uv.y);
        let sample2 = conditional(sample1.off).sample_continous(uv.x);
    
        ContinousSample2d {
            off = (sample2.off, sample1.off),
            rem = all::make_vec2(sample2.rem, sample1.rem),
            pos = all::make_vec2(sample2.pos, sample1.pos),
            pdf = sample1.pdf * sample2.pdf
        }
    };
    let pdf_continous    = @|pos: Vec2| -> ContinousPdf2d {
        let pdf1 = marginal.pdf_continous(pos.y);
        let pdf2 = conditional(pdf1.off).pdf_continous(pos.x);
    
        ContinousPdf2d {
            off = (pdf2.off, pdf1.off),
            pdf = pdf1.pdf * pdf2.pdf
        }
    };

    CDF2D {
        conditional      = conditional,
        marginal         = marginal,
        sample_discrete  = sample_discrete,
        pdf_discrete     = pdf_discrete,
        sample_continous = sample_continous,
        pdf_continous    = pdf_continous
    }
}

// First entry is the marginal!
fn @make_cdf_2d_from_buffer(data: DeviceBuffer, size_x: i32, size_y: i32) = make_cdf_2d(
        make_cdf_1d_from_buffer(data, size_y, 0),
        @|i:i32| make_cdf_1d_from_buffer(data, size_x, size_y + i * size_x)
    );
}