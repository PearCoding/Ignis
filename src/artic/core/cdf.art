mod cdf {
use super as all;
use super::math_builtins;
use super::interval;
use super::math;

type DeviceBuffer = all::DeviceBuffer;
type Vec2 = all::Vec2;

struct DiscreteSample1d {
    off: i32,
    pdf: f32
}

struct ContinuousSample1d {
    off: i32,
    rem: f32,
    pos: f32,
    pdf: f32
}

struct DiscretePdf1d {
    pdf: f32
}

struct ContinuousPdf1d {
    off: i32,
    pdf: f32
}

struct CDF1D {
    func_size:        i32, // This is the function data size, therefore e.g., if function data has size = s, cdf has size = s + 1
    get:              fn (i32) -> f32,
    sample_discrete:  fn (f32) -> DiscreteSample1d,
    pdf_discrete:     fn (i32) -> DiscretePdf1d,
    sample_continuous: fn (f32) -> ContinuousSample1d,
    pdf_continuous:    fn (f32) -> ContinuousPdf1d,
}

// Creates a cdf with func_size + 1 entries accessed by the get function
// Note: Our implementation of a CDF has to be strict monotonically increasing. The previous value CAN NOT match the current one, else bias is injected in the continuous case.
// TODO: The CDF can work with not necesserily strict monotonically increasing CDFs if we count the non-zero (pdf!=0) instead of the func_size only. This is only necessary for continuous sample & pdf.
fn @make_cdf_1d(func_size: i32, get: fn (i32) -> f32) -> CDF1D {
    let pdf_discrete     = @|x:i32| DiscretePdf1d { pdf = get(x + 1) - get(x) };
    let sample_discrete  = @|u:f32| {
        let off = all::min(interval::binary_search(func_size + 1, @|i:i32| get(i) <= u), func_size - 1); // We omit the rare event of u=1 and pull down to u=0.99...
        DiscreteSample1d { off = off, pdf = pdf_discrete(off).pdf }
    };
    let pdf_continuous    = @|x:f32| {
        let off = all::clamp((x * func_size as f32) as i32, 0, func_size - 1);
        ContinuousPdf1d { off = off, pdf = pdf_discrete(off).pdf * func_size as f32}
    };
    let sample_continuous = @|u:f32| {
        let sample = sample_discrete(u);
        let rem    = all::safe_div(u - get(sample.off), sample.pdf);
        let pos    = all::clampf((sample.off as f32 + rem) / func_size as f32, 0, 1);
        ContinuousSample1d { off = sample.off, rem = rem, pos = pos, pdf = sample.pdf * func_size as f32 }
    };

    CDF1D {
        func_size         = func_size,
        get               = get,
        sample_discrete   = sample_discrete,
        pdf_discrete      = pdf_discrete,
        sample_continuous = sample_continuous,
        pdf_continuous    = pdf_continuous
    }
}

// This underlying buffer of the CDF omits the first 0 entry and only contains [x1, x2, ..., xn-1, 1] as data.
// The CDF itself handles [0, x1, x2, ..., xn-1, 1] virtually.
fn @make_cdf_1d_from_buffer(data: DeviceBuffer, func_size: i32, off: i32) 
    = make_cdf_1d(func_size, @|i:i32| if i == 0 { 0 } else { data.load_f32(i - 1 + off) });

////////////////// 2D
struct DiscreteSample2d {
    off: (i32, i32),
    pdf: f32
}

struct ContinuousSample2d {
    off: (i32, i32),
    rem: Vec2,
    pos: Vec2,
    pdf: f32
}

struct DiscretePdf2d {
    pdf: f32
}

struct ContinuousPdf2d {
    off: (i32, i32),
    pdf: f32
}

struct CDF2D {
    sample_discrete:  fn (Vec2) -> DiscreteSample2d,
    pdf_discrete:     fn (i32, i32) -> DiscretePdf2d,
    sample_continuous: fn (Vec2) -> ContinuousSample2d,
    pdf_continuous:    fn (Vec2) -> ContinuousPdf2d,
}

// ---------------------------------------------
// Marginal & Conditional

// (x ~ conditional, y ~ marginal)
fn @make_cdf_2d(marginal: CDF1D, conditional: fn (i32) -> CDF1D) -> CDF2D {
    let sample_discrete  = @|uv: Vec2| -> DiscreteSample2d {
        let sample1 = marginal.sample_discrete(uv.y);
        let sample2 = conditional(sample1.off).sample_discrete(uv.x);
    
        DiscreteSample2d {
            off = (sample2.off, sample1.off),
            pdf = sample1.pdf * sample2.pdf
        }
    };
    let pdf_discrete     = @|x: i32, y: i32| -> DiscretePdf2d {
        let pdf1 = marginal.pdf_discrete(y);
        let pdf2 = conditional(y).pdf_discrete(x);
    
        DiscretePdf2d {
            pdf = pdf1.pdf * pdf2.pdf
        }
    };
    let sample_continuous = @|uv: Vec2| -> ContinuousSample2d {
        let sample1 = marginal.sample_continuous(uv.y);
        let sample2 = conditional(sample1.off).sample_continuous(uv.x);
    
        ContinuousSample2d {
            off = (sample2.off, sample1.off),
            rem = all::make_vec2(sample2.rem, sample1.rem),
            pos = all::make_vec2(sample2.pos, sample1.pos),
            pdf = sample1.pdf * sample2.pdf
        }
    };
    let pdf_continuous    = @|pos: Vec2| -> ContinuousPdf2d {
        let pdf1 = marginal.pdf_continuous(pos.y);
        let pdf2 = conditional(pdf1.off).pdf_continuous(pos.x);
    
        ContinuousPdf2d {
            off = (pdf2.off, pdf1.off),
            pdf = pdf1.pdf * pdf2.pdf
        }
    };

    CDF2D {
        sample_discrete   = sample_discrete,
        pdf_discrete      = pdf_discrete,
        sample_continuous = sample_continuous,
        pdf_continuous    = pdf_continuous
    }
}

// First entry is the marginal!
fn @make_cdf_2d_from_buffer(data: DeviceBuffer, size_x: i32, size_y: i32) = make_cdf_2d(
    make_cdf_1d_from_buffer(data, size_y, 0),
    @|i:i32| make_cdf_1d_from_buffer(data, size_x, size_y + i * size_x)
);

// ---------------------------------------------
// Summed Area Table

fn @make_cdf_2d_sat(data: DeviceBuffer, width: i32, height: i32) -> CDF2D {
    fn @lookup(x: i32, y: i32)      = data.load_f32(y * width + x);
    fn @safe_lookup(x: i32, y: i32) = if x < width && y < height { lookup(x, y) } else { 0.0 };
    fn @f_lookup(x: f32, y: f32) {
        let kx = x * width  as f32;
        let ky = y * height as f32;
        let ix = math_builtins::floor(kx) as i32;
        let iy = math_builtins::floor(ky) as i32;
        let fx = math::fract(kx);
        let fy = math::fract(ky);

        let p00 = safe_lookup(ix + 0, iy + 0);
        let p10 = safe_lookup(ix + 1, iy + 0);
        let p01 = safe_lookup(ix + 0, iy + 1);
        let p11 = safe_lookup(ix + 1, iy + 1);

        all::bilerp(p00, p10, p01, p11, fx, fy)
    }

    fn @pdf_lookup(x: i32, y: i32) = data.load_f32(width * height /* Omit sat */ + y * width + x);

    // Get integral for the given bounds
    // fn @integral(x0: i32, y0: i32, x1: i32, y1: i32)   = math_builtins::fmax[f32](  (safe_lookup(x1, y1) -   safe_lookup(x0, y1) +   safe_lookup(x0, y0) - safe_lookup(x1, y0)  ) / (width * height) as f32, 0);
    fn @f_integral(x0: f32, y0: f32, x1: f32, y1: f32) = math_builtins::fmax[f32]((f_lookup(x1, y1) - f_lookup(x0, y1) + f_lookup(x0, y0) - f_lookup(x1, y0)) / (width * height) as f32, 0);

    fn @sample_bisection(cdf: fn (f32) -> f32, u: f32, mut min: f32, mut max: f32, size: i32) -> f32 {
        while math_builtins::ceil(max * size as f32) - math_builtins::floor(min * size as f32) > 1 {
            let mid = (max + min) / 2;
            if cdf(mid) > u {
                max = mid;
            } else {
                min = mid;
            }
        }

        let t = (u - cdf(min)) / (cdf(max) - cdf(min));
        all::clampf(all::lerp(min, max, t), min, max)
    }
    
    // TODO: Discrete versions...
    // --------------------------
    fn @pdf_discrete(x: i32, y: i32) = DiscretePdf2d {
        pdf = lookup(x, y)
    };

    fn @sample_discrete(_uv: Vec2) -> DiscreteSample2d {
        // TODO
        let off = (0:i32, 0:i32);
        DiscreteSample2d {
            off = off,
            pdf = pdf_discrete(off.0, off.1).pdf
        }
    }
    // --------------------------

    fn @pdf_continuous(pos: Vec2) -> ContinuousPdf2d { 
        let ix = all::min((pos.x *  width as f32) as i32,  width - 1);
        let iy = all::min((pos.y * height as f32) as i32, height - 1);
        ContinuousPdf2d {
            off = (ix, iy),
            pdf = pdf_lookup(ix, iy) / (width * height) as f32
        }
    }

    fn @sample_continuous(uv: Vec2) -> ContinuousSample2d {
        let x = sample_bisection(@|x| f_integral(0, 0, x, 1), uv.x, 0, 1, width);

        let pminx     = math_builtins::floor(x * width as f32) / width as f32;
        let mut pmaxx = math_builtins::ceil(x * width as f32) / width as f32;
        if pmaxx - pminx <= all::flt_eps { pmaxx += 1 / width as f32; }

        let condI = f_integral(pminx, 0, pmaxx, 1);
        if condI <= all::flt_eps { 
            return(ContinuousSample2d {
                off = (0, 0),
                rem = all::make_vec2(0, 0),
                pos = all::make_vec2(0, 0),
                pdf = 0
            })
        }

        let y = sample_bisection(@|y| f_integral(pminx, 0, pmaxx, y) / condI, uv.y, 0, 1, height);

        let pos = all::make_vec2(x, y);

        let kx = x * width  as f32;
        let ky = y * height as f32;
        let ix = math_builtins::floor(kx) as i32;
        let iy = math_builtins::floor(ky) as i32;
        let fx = math::fract(kx);
        let fy = math::fract(ky);

        ContinuousSample2d {
            off = (ix, iy),
            rem = all::make_vec2(fx, fy),
            pos = pos,
            pdf = pdf_continuous(pos).pdf
        }
    }

    CDF2D {
        sample_discrete   = sample_discrete,
        pdf_discrete      = pdf_discrete,
        sample_continuous = sample_continuous,
        pdf_continuous    = pdf_continuous
    }
}

// ---------------------------------------------
// Hierachical

fn @make_cdf_2d_hierachical(data: DeviceBuffer, levels: i32) -> CDF2D {
    // Assumptions: The mip-map levels are in sequential order, with level 0 being the initial image. The image is also square!
    let slice   = 1 << levels;
    let slice_f = slice as f32;

    fn @get_offset(l: i32) = ((1 << (2 * (levels + 1))) - (1 << (2 * (levels - l + 1)))) / 3;

    fn @lookup(x: i32, y: i32, l: i32) {
        let s = slice / (1 << l);
        data.load_f32(get_offset(l) + y * s + x)
    }
    
    fn @sample_discrete2(mut uv: Vec2) -> (DiscreteSample2d, Vec2) {
        let mut ix = 0:i32;
        let mut iy = 0:i32; 
        for li in all::safe_unroll(0, levels) {
            let l = levels - li - 1; // We go backwards
            
            let x00 = lookup(ix + 0, iy + 0, l);
            let x01 = lookup(ix + 1, iy + 0, l);
            let x10 = lookup(ix + 0, iy + 1, l);
            let x11 = lookup(ix + 1, iy + 1, l);

            let u = (x00 + x10) / (x00 + x01 + x10 + x11);
            let v = if uv.x < u {
                // Select left
                ix   = 2 * ix   + 0; 
                uv.x = 2 * uv.x - 0;
                x00 / (x00 + x10)
            } else {
                // Select right
                ix   = 2 * ix   + 1; 
                uv.x = 2 * uv.x - 1;
                x01 / (x01 + x11)
            };

            if uv.y < v {
                // Select top
                iy   = 2 * iy   + 0; 
                uv.y = 2 * uv.y - 0;
            } else {
                // Select bottom
                iy   = 2 * iy   + 1; 
                uv.y = 2 * uv.y - 1;
            }
        }

        (DiscreteSample2d {
            off = (ix, iy),
            pdf = lookup(ix, iy, 0) / (slice * slice) as f32
        },
        uv /*Remainder*/)
    }

    fn @sample_discrete(uv: Vec2)    = sample_discrete2(uv).0;
    fn @pdf_discrete(x: i32, y: i32) = DiscretePdf2d { pdf = lookup(x, y, 0) / (slice * slice) as f32 }; // TODO: Check if division is really necessary

    fn @pdf_continuous(pos: Vec2) -> ContinuousPdf2d {
        let x = pos.x * (slice - 1) as f32;
        let y = pos.y * (slice - 1) as f32;

        let ix = all::clamp(x as i32, 0, slice - 1);
        let iy = all::clamp(y as i32, 0, slice - 1);
    
        ContinuousPdf2d {
            off = (ix, iy),
            pdf = lookup(ix, iy, 0) / (slice * slice) as f32
        }
    }

    fn @sample_continuous(uv: Vec2) -> ContinuousSample2d {
        let (sample, rem) = sample_discrete2(uv);
        let pos = all::make_vec2((sample.off.0 as f32 + rem.x) / slice_f, (sample.off.1 as f32 + rem.y) / slice_f);
        ContinuousSample2d {
            off = sample.off,
            rem = rem,
            pos = pos,
            pdf = sample.pdf
        }
    }

    CDF2D {
        sample_discrete   = sample_discrete,
        pdf_discrete      = pdf_discrete,
        sample_continuous = sample_continuous,
        pdf_continuous    = pdf_continuous
    }
}

}