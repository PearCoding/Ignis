mod microfacet {
use super as all;
use super::math_builtins;
use super::math;
use super::shading;

type Vec2     = all::Vec2;
type Vec3     = all::Vec3;
type Mat3x3   = all::Mat3x3;
type RndState = all::RndState;

struct MicrofacetSample {
    normal: Vec3,          
    pdf   : f32
}

static flt_sqrt_2        = 1.414213562:f32; //sqrt(2)
static flt_inv_sqrt_2_pi = 0.3989422804014326779:f32; // 1/sqrt(2*pi)
static flt_inv_sqrt_2    = 0.7071067811865475244:f32; // 1/sqrt(2)

// -------------- Height models
struct MicrofacetHeightModel {
    pdf     : fn (f32) -> f32,
    cdf     : fn (f32) -> f32,
    inv_cdf : fn (f32) -> f32,
}

fn @make_uniform_height_model() = MicrofacetHeightModel {
    pdf     = @|h:f32| all::select(h >= -1 && h <= 1, 0.5:f32, 0.0:f32), 
    cdf     = @|h:f32| all::clampf(0.5 * (h + 1), 0, 1),
    inv_cdf = @|u:f32| all::clampf(2*u-1, -1, 1),
};

fn @make_gaussian_height_model() = MicrofacetHeightModel {
    pdf     = @|h:f32| flt_inv_sqrt_2_pi * math_builtins::exp(-0.5 * h * h), 
    cdf     = @|h:f32| 0.5 + 0.5 * math::erf(flt_inv_sqrt_2 * h),
    inv_cdf = @|u:f32| flt_sqrt_2 * math::erfinv(2*u-1),
};

// --------------- Slope models
struct MicrofacetSlopeModel {
    alpha_u : f32,
    alpha_v : f32,
    alpha_i : fn (Vec3) -> f32, // Projected roughness

    D    : fn (Vec3) -> f32,       // Distribution of normals (NDF)
    D_wi : fn (Vec3, Vec3) -> f32, // Distribution of visible normals (VNDF)

    // sample    : fn (&mut RndState) -> Vec3, // Sample NDF
    sample_wi : fn (&mut RndState, Vec3) -> Vec3, // Sample VNDF

    lambda   : fn (Vec3) -> f32, // Smith's lambda function
    projArea : fn (Vec3) -> f32, // Projected area towards incident direction

    p22        : fn (Vec2) -> f32, // Distribution of slopes
    sample_p22 : fn (&mut RndState, f32) -> Vec2, // Sampling visible slopes with alpha=1
}

fn @make_slope_model_base(alpha_u : f32, alpha_v : f32,
                          lambda: fn (Vec3) -> f32,
                          projArea: fn (Vec3) -> f32,
                          p22: fn (Vec2) -> f32,
                          sample_p22: fn (&mut RndState, f32) -> Vec2) -> MicrofacetSlopeModel {
    fn @D(wm: Vec3) -> f32 {
        if shading::cos_theta(wm) <= 0 {
            return(0)
        }

        let slope_u = -wm.x/wm.z;
        let slope_v = -wm.y/wm.z;

        all::safe_div(p22(all::make_vec2(slope_u, slope_v)), wm.z * wm.z * wm.z * wm.z)
    }

    MicrofacetSlopeModel {
        alpha_u = alpha_u,
        alpha_v = alpha_v,
        alpha_i = @|wi: Vec3| -> f32 {
            let c2 = shading::cos2_phi(wi);
            let s2 = shading::sin2_phi(wi);
            math_builtins::sqrt(c2*alpha_u*alpha_u + s2*alpha_v*alpha_v)
        },
        D    = D,
        D_wi = @|wi: Vec3, wm: Vec3| -> f32 {
            if shading::cos_theta(wm) <= 0 {
                return(0)
            }

            let area = projArea(wi);
            all::safe_div(all::positive_cos(wi, wm) * D(wm), area)
        },

        sample_wi = @|rnd: &mut RndState, wi: Vec3| -> Vec3 {
            // Stretch
            let swi = all::vec3_normalize(all::make_vec3(alpha_u * wi.x, alpha_v * wi.y, wi.z));
            
            // Compute in slope space
            let slope = sample_p22(rnd, swi.z);

            // Unstretch
            let (sin_phi, cos_phi) = shading::sin_cos_phi(swi);
            let slope2 = all::make_vec2(
                (cos_phi * slope.x - sin_phi * slope.y) * alpha_u,
                (sin_phi * slope.x + cos_phi * slope.y) * alpha_v
            );

            if !math_builtins::isfinite(slope2.x) {
                // Compute fallback for numerical instabilities
                all::select(wi.z > 0, all::make_vec3(0,0,1), all::vec3_normalize(all::make_vec3(wi.x, wi.y, 0)))
            } else {
                // Compute normal
                all::vec3_normalize(all::make_vec3(-slope2.x, -slope2.y, 1))
            }
        },

        lambda     = lambda,
        projArea   = projArea,
        p22        = p22, 
        sample_p22 = sample_p22
    }
}

// TODO: Add GGX & Beckmann models similar to the one from Heitz (2016), but with recent adaptations

// ------------------------ Old code
struct MicrofacetModel {
    D       : fn (Vec3) -> f32,
    G1      : fn (Vec3, Vec3) -> f32,
    sample  : fn (&mut RndState) -> MicrofacetSample,
    alpha_u : f32,
    alpha_v : f32,
    is_delta: bool
}

fn @g_1_walter(local: Mat3x3, w: Vec3, _m: Vec3, alpha_u: f32, alpha_v: f32) -> f32 {
    let cosZ = all::vec3_dot(local.col(2), w);
    if  math_builtins::fabs(cosZ) <= all::flt_eps { return(0) };

    let cosX = all::vec3_dot(local.col(0), w);
    let cosY = all::vec3_dot(local.col(1), w);

    let kx = alpha_u * cosX;
    let ky = alpha_v * cosY;
    let k2 = (kx * kx + ky * ky) / (cosZ * cosZ);

    if k2 <= all::flt_eps { return(1) };

    let a  = 1 / math_builtins::sqrt(k2);
    let a2 = 1 / k2;

    if a >= 1.6 { 
        1.0
    } else { 
        (3.535 * a + 2.181 * a2) / (1.0 + 2.276 * a + 2.577 * a2) 
    }
}

fn @g_1_smith(local: Mat3x3, w: Vec3, _m: Vec3, alpha_u: f32, alpha_v: f32) -> f32 {
    let cosZ = all::vec3_dot(local.col(2), w);
    if math_builtins::fabs(cosZ) <= all::flt_eps { return(0) };

    let cosX = all::vec3_dot(local.col(0), w);
    let cosY = all::vec3_dot(local.col(1), w);

    let kx = alpha_u * cosX;
    let ky = alpha_v * cosY;
    let a2 = kx * kx + ky * ky;
    if a2 <= all::flt_eps {
        1
    } else {
        let k2 = a2 / (cosZ * cosZ);
        let denom = 1 + math_builtins::sqrt(1 + k2);
        2 / denom
    }
}

fn @ndf_beckmann(local: Mat3x3, m: Vec3, alpha_u: f32, alpha_v: f32) -> f32 {
    let cosZ = all::vec3_dot(local.col(2), m);
    let cosX = all::vec3_dot(local.col(0), m);
    let cosY = all::vec3_dot(local.col(1), m);

    let kx = cosX / alpha_u;
    let ky = cosY / alpha_v;
    let k2 = all::safe_div(kx * kx + ky * ky, cosZ * cosZ);

    all::safe_div(math_builtins::exp(-k2), all::flt_pi * alpha_u * alpha_v * cosZ * cosZ * cosZ * cosZ)
}

fn @ndf_ggx(local: Mat3x3, m: Vec3, alpha_u: f32, alpha_v: f32) -> f32 {
    let cosZ = all::vec3_dot(local.col(2), m); // cosTheta
    let cosX = all::vec3_dot(local.col(0), m); // cosPhi * sinTheta
    let cosY = all::vec3_dot(local.col(1), m); // sinPhi * sinTheta

    let kx = cosX / alpha_u;
    let ky = cosY / alpha_v;
    let k  = kx * kx + ky * ky + cosZ * cosZ;

    all::safe_div(1, all::flt_pi * alpha_u * alpha_v * k * k)
}

fn @make_delta_model(local: Mat3x3) = MicrofacetModel {
    D  = @|_| 0,
    G1 = @|_, _| 0,
    sample = @ |_| {
        MicrofacetSample { normal = local.col(2), pdf = 1}
    },
    alpha_u  = 0,
    alpha_v  = 0,
    is_delta = true
};

fn @make_beckmann_model(local: Mat3x3, alpha_u: f32, alpha_v: f32) = MicrofacetModel {
    D  = @|m| ndf_beckmann(local, m, alpha_u, alpha_v),
    G1 = @|w, m| g_1_walter(local, w, m, alpha_u, alpha_v),
    sample = @ |rnd| {
        let u0 = all::randf(rnd);
        let u1 = all::randf(rnd);
        
        let ar     = alpha_v / alpha_u;
        let phi    = math_builtins::atan(ar * math_builtins::tan(2 * all::flt_pi * u1));
        let cosPhi = math_builtins::cos(phi);
        let sinPhi = math_builtins::sqrt(1 - cosPhi*cosPhi);

        let kx = cosPhi / alpha_u;
        let ky = sinPhi / alpha_v;
        let k2 = 1 / (kx * kx + ky * ky);

        let cosTheta  = 1 / math_builtins::sqrt(1 - k2 * math_builtins::log(1.0 - u0));
        let cosTheta2 = cosTheta * cosTheta;
        let sinTheta  = math_builtins::sqrt(1 - cosTheta2);

        let pdf = (1 - u0) / (all::flt_pi * alpha_u * alpha_v * cosTheta2 * cosTheta);
        let lh  = all::make_vec3(sinTheta * cosPhi, sinTheta * sinPhi, cosTheta); // Microfacet normal in local shading space
        MicrofacetSample { normal = all::mat3x3_mul(local, lh), pdf = pdf}
    },
    alpha_u  = alpha_u,
    alpha_v  = alpha_v,
    is_delta = false
};

fn @make_ggx_model(local: Mat3x3, alpha_u: f32, alpha_v: f32) = MicrofacetModel {
    D  = @|m| ndf_ggx(local, m, alpha_u, alpha_v),
    G1 = @|w, m| g_1_smith(local, w, m, alpha_u, alpha_v),
    sample = @ |rnd| {
        let u0 = all::randf(rnd);
        let u1 = all::randf(rnd);
        
        let ar     = alpha_v / alpha_u;
        let phi    = if ?alpha_u && ?alpha_v && alpha_u == alpha_v { 2 * all::flt_pi * u1 } else { math_builtins::atan(ar * math_builtins::tan(2 * all::flt_pi * u1)) };
        let cosPhi = math_builtins::cos(phi);
        let sinPhi = math_builtins::sqrt(1 - cosPhi*cosPhi);

        let kx = cosPhi / alpha_u;
        let ky = sinPhi / alpha_v;
        let d2 = kx * kx + ky * ky;
        let a2 = all::safe_div(1, d2);
        let t2 = a2 * u0 / (1 - u0);

        let cosTheta  = 1 / math_builtins::sqrt(1 + t2);
        let cosTheta2 = cosTheta * cosTheta;
        let sinTheta  = math_builtins::sqrt(1 - cosTheta2);

        let k2  = d2 * (sinTheta * sinTheta) / cosTheta2;
        let pdf = all::safe_div(1, all::flt_pi * alpha_u * alpha_v * cosTheta2 * cosTheta * (1 + k2) * (1 + k2));
        let lh  = all::make_vec3(sinTheta * cosPhi, sinTheta * sinPhi, cosTheta);
        MicrofacetSample { normal = all::mat3x3_mul(local, lh), pdf = pdf}
    },
    alpha_u  = alpha_u,
    alpha_v  = alpha_v,
    is_delta = false
};
///////////////////////////////////

struct MicrofacetDistribution {
    D       : fn (Vec3) -> f32,             // Normal
    G       : fn (Vec3, Vec3, Vec3) -> f32, // Wi, Wo, Normal
    norm    : fn (Vec3, Vec3, Vec3) -> f32, // Wi, Wo, Normal
    pdf     : fn (Vec3, Vec3, Vec3) -> f32, // Wi, Wo, Normal
    sample  : fn (&mut RndState, Vec3) -> MicrofacetSample, // RND, Wo
    alpha_u : f32,
    alpha_v : f32,
    is_delta: bool
}

fn @compute_microfacet_norm(wi: Vec3, wo: Vec3, m: Vec3, local: Mat3x3) = all::safe_div(all::vec3_dot(wi, m), all::vec3_dot(local.col(2), wo));

fn @make_microfacet_distribution(model: MicrofacetModel, local: Mat3x3) = MicrofacetDistribution {
    D        = model.D,
    G        = @ |wi, wo, m| model.G1(wi, m) * model.G1(wo, m),
    norm     = @ |wi, wo, m| compute_microfacet_norm(wi, wo, m, local),
    pdf      = @ |_, _, m| model.D(m) * all::absolute_cos(local.col(2), m),
    sample   = @ |rnd, _| model.sample(rnd),
    alpha_u  = model.alpha_u,
    alpha_v  = model.alpha_v,
    is_delta = model.is_delta
};

fn @check_if_delta_distribution(alpha_u: f32, alpha_v: f32) = alpha_u <= 1e-4 || alpha_v <= 1e-4;

fn @make_delta_distribution(local: Mat3x3) = make_microfacet_distribution(make_delta_model(local), local);

fn @make_beckmann_distribution(local: Mat3x3, alpha_u: f32, alpha_v: f32) -> MicrofacetDistribution {
    if check_if_delta_distribution(alpha_u, alpha_v) {
        make_delta_distribution(local) 
    } else {
        make_microfacet_distribution(make_beckmann_model(local, alpha_u, alpha_v), local)
    }
}

fn @make_ggx_distribution(local: Mat3x3, alpha_u: f32, alpha_v: f32) -> MicrofacetDistribution {
    if check_if_delta_distribution(alpha_u, alpha_v) {
        make_delta_distribution(local)
    } else { 
        make_microfacet_distribution(make_ggx_model(local, alpha_u, alpha_v), local)
    }
}

// Based on:
// Journal of Computer Graphics Techniques Vol. 7, No. 4, 2018 http://jcgt.org.
// Sampling the GGX Distribution of Visible Normals. Eric Heitz
fn @sample_vndf_ggx_11(rnd: &mut RndState, cos_theta: f32) -> Vec2 {
    let u0 = all::randf(rnd);
    let u1 = all::randf(rnd);

	// Sample concentric uniform disk
    let pc = all::square_to_concentric_disk(all::make_vec2(u0, u1));

    // Rescale
	let s = 0.5 * (1 + cos_theta);
	let y = (1 - s) * all::safe_sqrt(1 - pc.x * pc.x) + s * pc.y;

	// Project
    let z = all::safe_sqrt(1 - y * y - pc.x * pc.x);
    let sin_theta = all::safe_sqrt(1 - cos_theta * cos_theta);
    let norm = all::safe_div(1, all::sum_of_prod(sin_theta, y, cos_theta, z));
	
    all::vec2_mulf(all::make_vec2(all::diff_of_prod(cos_theta, y, sin_theta, z), pc.x), norm)
}

fn @sample_vndf_ggx(rnd: &mut RndState, local: Mat3x3, vN: Vec3, alpha_u: f32, alpha_v: f32) -> Vec3 {
    // Transform to local
    let vL = shading::to_local(local, vN);

    // Stretch
    let sL = all::vec3_normalize(all::make_vec3(alpha_u * vL.x, alpha_v * vL.y, vL.z));
    
    // Compute in slope space
    let (sin_phi, cos_phi) = shading::sin_cos_phi(sL);
    let slope = sample_vndf_ggx_11(rnd, shading::abs_cos_theta(sL));

    // Unstretch
    let slope2 = all::make_vec2(
        (cos_phi * slope.x - sin_phi * slope.y) * alpha_u,
        (sin_phi * slope.x + cos_phi * slope.y) * alpha_v
    );
    
    let Nh = if !math_builtins::isfinite(slope2.x) {
        all::vec3_expand(0)
    } else {
        // Compute normal
        all::vec3_normalize(all::make_vec3(-slope2.x, -slope2.y, 1))
    };

    // Transform back to global
	shading::to_world(local, Nh)
}

fn @pdf_vndf_ggx(local: Mat3x3, w: Vec3, h: Vec3, alpha_u: f32, alpha_v: f32) -> f32 {
    let cosZ = all::absolute_cos(local.col(2), w);
    all::safe_div(g_1_smith(local, w, h, alpha_u, alpha_v) * all::absolute_cos(w, h) * ndf_ggx(local, h, alpha_u, alpha_v), cosZ)
}

fn @make_vndf_ggx_distribution(face_normal: Vec3, local: Mat3x3, alpha_u: f32, alpha_v: f32) -> MicrofacetDistribution {
    all::maybe_unused(face_normal);

    if check_if_delta_distribution(alpha_u, alpha_v) {
        make_delta_distribution(local)
    } else {
        let model = make_ggx_model(local, alpha_u, alpha_v);
        MicrofacetDistribution {
            D      = model.D,
            G      = @ |wi, wo, m| model.G1(wi, m) * model.G1(wo, m),
            norm   = @ |wi, wo, m| compute_microfacet_norm(wi, wo, m, local),
            pdf    = @ | _, wo, m| pdf_vndf_ggx(local, wo, m, alpha_u, alpha_v),
            sample = @ |rnd, wo|   {
                let m   = sample_vndf_ggx(rnd, local, wo, alpha_u, alpha_v);
                let pdf = pdf_vndf_ggx(local, wo, m, alpha_u, alpha_v);
                MicrofacetSample { normal = m/*all::ensure_valid_reflection(face_normal, wo, m)*/, pdf = pdf }
            },
            alpha_u  = alpha_u,
            alpha_v  = alpha_v,
            is_delta = false
        }
    }
}
}