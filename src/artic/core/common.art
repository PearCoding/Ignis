// Constants -----------------------------------------------------------------------

static flt_eps    = 1.1920928955e-07:f32;
static flt_max    = 3.4028234664e+38:f32;
static flt_min    = 1.1754943509e-38:f32;
static flt_inf    = 1:f32 / 0:f32;
static flt_pi     = 3.14159265359:f32;
static flt_inv_pi = 0.31830988618379067154:f32;
static flt_sqrt2  = 1.41421356237:f32;
static flt_sqrt3  = 1.73205080757:f32;
static flt_e      = 2.71828182845904523536:f32;

// Convert from radians to degree
fn deg(v: f32) = v * 180 * flt_inv_pi;
// Convert from degree to radians
fn rad(v: f32) = v / 180 * flt_pi;

// Option --------------------------------------------------------------------------

enum Option[T] {
    Some(T),
    None
}

fn @make_option[T](t: T) = Option[T]::Some(t);
fn @is_some[T](opt: Option[T]) = match opt {
    Option[T]::Some(_) => true,
    _ => false
};
fn @is_none[T](opt: Option[T]) = !is_some(opt);
fn @from_option[T](opt: Option[T], def: T) = match opt {
    Option[T]::Some(x) => x,
    _ => def
};

// Fast division -------------------------------------------------------------------

struct FastDiv {
    m: u32,
    s1: u32,
    s2: u32
}

fn @make_fast_div(div: u32) -> FastDiv {
    let log = ilog2(div as i32) as u32;
    let max = 1:u64 << 32:u64;
    let m = (max << log as u64) / (div as u64) - max + 1;
    let s1 = select(log < 1, log, 1:u32);
    let s2 = select(log > 1, log - 1, 0:u32);
    FastDiv {
        m = m as u32,
        s1 = s1,
        s2 = s2
    }
}

fn @fast_div(fd: FastDiv, i: u32) -> u32 {
    let t = (((fd.m as u64) * (i as u64)) >> 32) as u32;
    (t + ((i - t) >> fd.s1)) >> fd.s2
}

// Fast power ----------------------------------------------------------------------

// Inspired from:
// http://www.machinedlearnings.com/2011/06/fast-approximate-logarithm-exponential.html

fn @fastlog2(x: f32) -> f32 {
    let vx = bitcast[u32](x);
    let mx = (vx & 0x007FFFFF:u32) | 0x3f000000:u32;
    let y = (vx as f32) * 1.1920928955078125e-7:f32;
    let z = bitcast[f32](mx);
    y - 124.22551499 - 1.498030302 * z - 1.72587999 / (0.3520887068 + z)
}

fn @fastpow2(p: f32) -> f32 {
    let offset = select(p < 0:f32, 1:f32, 0:f32);
    let clipp  = select(p < -126:f32, -126:f32, p);
    let w = clipp as i32;
    let z = clipp - (w as f32) + offset;
    let v = ((1:u32 << 23:u32) as f32 * (clipp + 121.2740575 + 27.7280233 / (4.84252568 - z) - 1.49012907 * z)) as i32;
    bitcast[f32](v)
}

fn @fastpow(x: f32, p: f32) -> f32 {
    fastpow2(p * fastlog2(x))
}

// Likely/unlikely -----------------------------------------------------------------

#[import(cc = "device", name = "llvm.expect.i1")] fn expect(bool, bool) -> bool;

fn @  likely(cond: bool) = expect(cond,  true);
fn @unlikely(cond: bool) = expect(cond, false);

// Misc. ---------------------------------------------------------------------------

fn @prodsign(x: f32, y: f32) = bitcast[f32](bitcast[i32](x) ^ (bitcast[i32](y) & bitcast[i32](0x80000000:u32)));

fn @safe_rcp(x: f32) -> f32 {
    let min_rcp = 1e-8:f32;
    if select(x > 0, x, -x) < min_rcp { prodsign(flt_max, x) } else { 1 / x }
}

fn @round_up(n: i32, d: i32) -> i32 {
    let m = n % d;
    n + (if m != 0 { d - m } else { 0 })
}

fn @round_down(n: i32, d: i32) -> i32 {
    (n / d) * d
}

fn @ilog2(i: i32) -> i32 {
    fn @(?i2) ilog2_helper(i2: i32, p: i32) -> i32 {
        if i2 <= (1 << p) {
            p
        } else {
            ilog2_helper(i2, p + 1)
        }
    }
    ilog2_helper(i, 0)
}

fn @lerp(a: f32, b: f32, k: f32) -> f32 {
    (1 - k) * a + k * b
}

fn @lerp2(a: f32, b: f32, c: f32, k1: f32, k2: f32) -> f32 {
    (1 - k1 - k2) * a + k1 * b + k2 * c
}

fn @smoothstep(x: f32)   = x * x * (3 - 2 * x);
fn @smootherstep(x: f32) = x * x * x * (x * (x * 6 - 15) + 10);

// a*b - c*d
fn @diff_of_prod(a: f32, b: f32, c: f32, d: f32) -> f32 {
    let cd   = c * d;
    let diff = fmaf(a, b, -cd);
    let err  = fmaf(-c, d, cd);
    diff + err
}

// a*b + c*d
fn @sum_of_prod(a: f32, b: f32, c: f32, d: f32) -> f32 {
    let cd  = c * d;
    let sum = fmaf(a, b, cd);
    let err = fmaf(c, d, -cd);
    sum + err
}

fn @positive_cos(a: Vec3, b: Vec3) -> f32 {
    let cos = vec3_dot(a, b);
    if cos >= 0 { cos } else { 0 }
}

fn @absolute_cos(a: Vec3, b: Vec3) = math_builtins::fabs(vec3_dot(a, b));

fn @swap[T](a: &mut T, b: &mut T) -> () {
    let tmp = *a;
    *a = *b;
    *b = tmp;
}

fn @maybe_unused[T](_a: T) -> () {}

fn @abs(a: i32) = if a < 0 { -a } else { a };
fn @min(a: i32, b: i32) = if a < b { a } else { b };
fn @max(a: i32, b: i32) = if a > b { a } else { b };
fn @clamp(v: i32, l: i32, u: i32) = min(u, max(l, v));

fn @clampf(v: f32, l: f32, u: f32) = math_builtins::fmin[f32](u, math_builtins::fmax[f32](l, v));

fn @safe_div(a: f32, b: f32) = if math_builtins::fabs(b) <= flt_eps { 0:f32 } else { a / b };
fn @safe_sqrt(a: f32)        = math_builtins::sqrt(math_builtins::fmax(0:f32, a));

/// A safe, (but less extreme) unroll function... making sure the stack aint exploding
fn @safe_unroll(body: fn(i32) -> ()) {
    fn @(?beg & ?end & ((end - beg) <= 64)) loop(beg: i32, end: i32) -> () {
        if beg < end {
            @body(beg);
            loop(beg + 1, end)
        }
    }
    loop
}

fn @permute_element(mut i: u32, l: u32, seed: u32) -> u32 {
	let mut w = l - 1;

	if w == 0 {
		0
	} else {
		w |= w >> 1;
		w |= w >> 2;
		w |= w >> 4;
		w |= w >> 8;
		w |= w >> 16;
		while true {
			i ^= seed;
			i *= 0xe170893d;
			i ^= seed >> 16;
			i ^= (i & w) >> 4;
			i ^= seed >> 8;
			i *= 0x0929eb3f;
			i ^= seed >> 23;
			i ^= (i & w) >> 1;
			i *= 1 | seed >> 27;
			i *= 0x6935fa69;
			i ^= (i & w) >> 11;
			i *= 0x74dcb303;
			i ^= (i & w) >> 2;
			i *= 0x9e501cc3;
			i ^= (i & w) >> 2;
			i *= 0xc860a3df;
			i &= w;
			i ^= i >> 5;
            if i < l { break() }
		}

		(i + seed) % l
	}
}

#[import(cc = "device", name = "llvm.fma.f32")] fn fmaf(f32, f32, f32) -> f32;

// The following stuff is only for development purposes and should never ever be in production code
#[import(cc = "device", name = "llvm.debugtrap")] fn ig_trap() -> ();
#[import(cc = "device", name = "llvm.ubsantrap")] fn ig_trap_annotated(u8) -> ();