// Result of sampling a direction
struct DirSample {
    dir: Vec3,
    pdf: f32
}

fn @make_dir_sample(c: f32, s: f32, phi: f32, pdf: f32) -> DirSample {
    let x = s * math_builtins::cos(phi);
    let y = s * math_builtins::sin(phi);
    let z = c;
    DirSample {
        dir = make_vec3(x, y, z),
        pdf = pdf
    }
}

// Result of sampling a position
struct PosSample {
    pos: Vec3,
    pdf: f32
}

fn @make_pos_sample(pos: Vec3, pdf: f32) = PosSample {
    pos = pos,
    pdf = pdf
};

// Samples a point uniformly on a triangle
fn @sample_triangle(u: f32, v: f32) -> (f32, f32) {
    select(u + v > 1, (1 - u, 1 - v), (u, v))
}

// Probability density function for uniform sphere sampling
fn @uniform_sphere_pdf() = 1 / (4 * flt_pi);

// Samples a direction uniformly on a sphere
fn @sample_uniform_sphere(u: f32, v: f32) -> DirSample {
    let c = 2 * v - 1;
    let s = safe_sqrt(1 - c * c);
    let phi = 2 * flt_pi * u;
    make_dir_sample(c, s, phi, uniform_sphere_pdf())
}

// Probability density function for equal area sphere sampling
// Note: Keep in mind this is essentially the same as uniform_sphere, but a bit faster
fn @equal_area_sphere_pdf() = uniform_sphere_pdf();

// Samples a direction uniformly, in respect to equal area, on a sphere
// Note: Keep in mind this is essentially the same as uniform_sphere, but a bit faster and a different orientation!
// TODO: Make it the same orientation as uniform_sphere
fn @sample_equal_area_sphere(u: f32, v: f32) = DirSample {
    dir = equal_area_square_to_sphere(make_vec2(u, v)),
    pdf = equal_area_sphere_pdf()
};

// Probability density function for cosine weighted hemisphere sampling
fn @cosine_hemisphere_pdf(c: f32) = c / flt_pi;

// Samples a direction on a hemisphere proportionally to the cosine with the surface normal
fn @sample_cosine_hemisphere(u: f32, v: f32) -> DirSample {
    let c = safe_sqrt(v);
    let s = safe_sqrt(1 - v);
    let phi = 2 * flt_pi * u;
    make_dir_sample(c, s, phi, cosine_hemisphere_pdf(c))
    // let p = square_to_concentric_disk(make_vec2(u, v));
    // let z = safe_sqrt(1 - vec2_len2(p));
    // DirSample {
    //     dir = make_vec3(p.x, p.y, z),
    //     pdf = cosine_hemisphere_pdf(z)
    // }
}

// Probability density function for cosine-power weighted hemisphere sampling
fn @cosine_power_hemisphere_pdf(c: f32, k: f32) -> f32 {
    fastpow/*math_builtins::pow*/(c, k) * (k + 1) * (1 / (2 * flt_pi))
}

// Samples a direction on a hemisphere proportionally to the power of the cosine with the surface normal
fn @sample_cosine_power_hemisphere(k: f32, u: f32, v: f32) -> DirSample {
    let c = math_builtins::fmin[f32](fastpow/*math_builtins::pow*/(v, 1 / (k + 1)), 1);
    let s = math_builtins::sqrt(1 - c * c);
    let phi = 2 * flt_pi * u;
    // We have:
    // pow(c, k) = pow(pow(v, 1 / (k + 1)), k)
    //           = pow(v, k / (k + 1))
    //           = v * pow(v, -1 / (k + 1))
    //           = v / c
    let pow_c_k = select(c != 0, v / c, 0:f32);
    let pdf = pow_c_k * (k + 1) * (1 / (2 * flt_pi));
    make_dir_sample(c, s, phi, pdf)
}

fn @uniform_disk_pdf(radius: f32) = 1 / (flt_pi * radius * radius);

// Samples uniform concentric disk
fn @sample_uniform_disk(u: f32, v: f32, radius: f32) -> PosSample {
    make_pos_sample(vec3_mulf(vec2_to_3(square_to_concentric_disk(make_vec2(u, v)), 0), radius), uniform_disk_pdf(radius))
}

// From Blender Cycles
// https://github.com/blender/cycles/blob/c40170f6ea8828757eb2cb8db960d3bf4620d03f/src/kernel/closure/bsdf_util.h#L151
fn @ensure_valid_reflection(Ng: Vec3, I: Vec3, N: Vec3) -> Vec3 {
    let R = vec3_reflect(I, N);

    let threshold = math_builtins::fmin[f32](0.9 * vec3_dot(Ng, I), 0.01);
    if vec3_dot(Ng, R) >= threshold { return(N) }

    let NdotNg = vec3_dot(N, Ng);
    let X = vec3_normalize(vec3_sub(N, vec3_mulf(Ng, NdotNg)));

    let Ix  = vec3_dot(I, X);
    let Iz  = vec3_dot(I, Ng);
    let Ix2 = Ix * Ix;
    let Iz2 = Iz * Iz;
    let a = Ix2 + Iz2;

    let b = safe_sqrt(Ix2 * (a - threshold*threshold));
    let c = Iz * threshold + a;

    let fac = 0.5 / a;
    let N1_z2  = fac * (b + c);
    let N2_z2  = fac * (-b + c);
    let valid1 = (N1_z2 > 1e-5) && (N1_z2 <= (1.0 + 1e-5));
    let valid2 = (N2_z2 > 1e-5) && (N2_z2 <= (1.0 + 1e-5));

    let N_new = if valid1 && valid2 {
        let N1 = make_vec2(safe_sqrt(1 - N1_z2), safe_sqrt(N1_z2));
        let N2 = make_vec2(safe_sqrt(1 - N2_z2), safe_sqrt(N2_z2));

        let R1 = 2 * (N1.x * Ix + N1.y * Iz) * N1.y - Iz;
        let R2 = 2 * (N2.x * Ix + N2.y * Iz) * N2.y - Iz;

        let valid3 = (R1 >= 1e-5);
        let valid4 = (R2 >= 1e-5);
        if valid3 && valid4 {
            select(R1 < R2, N1, N2)
        } else {
            select(R1 > R2, N1, N2)
        }
    } else if valid1 || valid2 {
        let Nz2 = select(valid1, N1_z2, N2_z2);
        make_vec2(safe_sqrt(1 - Nz2), safe_sqrt(Nz2))
    } else {
        make_vec2(0, 1) // Fallback to Ng
    };

    vec3_add(vec3_mulf(X, N_new.x), vec3_mulf(Ng, N_new.y))
}