mod interval {
    // Will return index to the greatest entry smaller then the predicate
    // If predicate equals the actual number, the left most entry of the equal valued entries
    // will be returned.
    // E.g., [0,1,3,5,6,6,7] for v <= 4 will return idx=2, for v <= 6 will return idx=4 (and not 5!)
    // The predicate determines the direction of the tree. If true, right side will be selected, left otherwise
    fn @binary_search(size : i32, pred: fn (i32) -> bool) -> i32 {
        let mut first = 0 : i32;
    	let mut len   = size;

        while len > 0 {
            let half   = len / 2;
            let middle = first + half;
            if @pred(middle) {
                first = middle + 1;
                len -= half + 1;
            } else {
                len = half;
            }
        }

        super::clamp(first - 1, 0, size - 1)
    }
}