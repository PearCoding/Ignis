// Result of sampling a BSDF
struct FresnelTerm {
    cos_t:  f32,
    factor: f32
}

fn @fresnel_factor(eta: f32, cos_i: f32, cos_t: f32) -> f32 {
    let R_s = safe_div(eta * cos_i - cos_t, eta * cos_i + cos_t);
    let R_p = safe_div(cos_i - eta * cos_t, cos_i + eta * cos_t);
    clampf((R_s * R_s + R_p * R_p) * 0.5, 0, 1)
}

fn @snell(eta: f32, cos_i: f32) = 1 - (1 - cos_i * cos_i) * eta * eta;

fn @fresnel(eta: f32, cos_i: f32) -> Option[FresnelTerm] {
    let eta2 = if cos_i < 0 { 1 / eta } else { eta };
    let cos2_t = snell(eta2, cos_i);
    if cos2_t <= 0.0 {
        Option[FresnelTerm]::None
    } else {
        let cos_t = math_builtins::sqrt(cos2_t);
        make_option(FresnelTerm {
            cos_t  = if cos_i < 0 { -cos_t } else { cos_t },
            factor = fresnel_factor(eta2, math_builtins::fabs(cos_i), cos_t)
        })
    }
}

fn @conductor_factor(n: f32, k: f32, cos_i: f32) -> f32 {
    let f	 = n*n + k*k;
    let d1	 = f * cos_i * cos_i;
	let d2	 = 2.0 * n * cos_i;
	let R_s  = safe_div(d1 - d2, d1 + d2);
	let R_p  = safe_div(f - d2 + cos_i * cos_i, f + d2 + cos_i * cos_i);
    clampf((R_s * R_s + R_p * R_p) * 0.5, 0, 1)
}

// Approximate diffuse Fresnel reflectance
/* This value quantifies what fraction of diffuse incident illumination
 * will, on average, be reflected at a dielectric material boundary
 */
fn @fresnel_diffuse_factor(eta: f32) -> f32 {
    if(eta < 1) {
        /* Fit by Egan and Hilgeman (1973). Works reasonably well for
         * "normal" IOR values (<2).
         * Max rel. error in 1.0 - 1.5 : 0.1%
         * Max rel. error in 1.5 - 2   : 0.6%
         * Max rel. error in 2.0 - 5   : 9.5%
         */
        -1.4399 * (eta * eta) + 0.7099 * eta + 0.6681 + 0.0636 / eta
    } else {
        /* Fit by d'Eon and Irving (2011)
         * Maintains a good accuracy even for unrealistic IOR values.
         * Max rel. error in 1.0 - 2.0   : 0.1%
         * Max rel. error in 2.0 - 10.0  : 0.2%  
         */
        let ieta1 = 1 / eta;
        let ieta2 = ieta1 * ieta1;
        let ieta3 = ieta2 * ieta1;
        let ieta4 = ieta3 * ieta1;
        let ieta5 = ieta4 * ieta1;
        0.919317 - 3.4793 * ieta1 + 6.75335 * ieta2 - 7.80989 * ieta3 + 4.98554 * ieta4 - 1.36881 * ieta5
    }
}

fn @dielectric(absHdotV: f32, eta_i: f32, eta_t: f32)-> f32{
    let mut cosThetaI = math_builtins::fmin[f32](1, math_builtins::fmax[f32](-1, absHdotV));
    let mut etaI = eta_i;
    let mut etaT = eta_t; 

    if (cosThetaI <= 0) {
        swap[f32](&mut etaI, &mut etaT);
        cosThetaI = math_builtins::fabs(cosThetaI);
    }

    let sinThetaI = math_builtins::sqrt(math_builtins::fmax[f32](0, 1 - cosThetaI * cosThetaI));
    let sinThetaT = etaI / etaT * sinThetaI;

    if (sinThetaT >= 1) { return (1) };
    let cosThetaT = math_builtins::sqrt(math_builtins::fmax[f32](0, 1 - sinThetaT * sinThetaT));
    let Rparl = ((etaT * cosThetaI) - (etaI * cosThetaT)) /
                  ((etaT * cosThetaI) + (etaI * cosThetaT));
    let Rperp = ((etaI * cosThetaI) - (etaT * cosThetaT)) /
                  ((etaI * cosThetaI) + (etaT * cosThetaT));
    (Rparl * Rparl + Rperp * Rperp) / 2
}

fn @schlick_approx(f: f32) -> f32{
    let s = clampf(1 - f, 0, 1);
    (s * s) * (s * s) * s
}

fn @schlick(f0: Color, f90: Color, dot: f32)-> Color{
    let s = schlick_approx(dot);
    let snd = color_mulf(color_sub(f90, f0), s);
    color_add(f0, snd)
}

fn @schlick_f(f0: f32, f90: f32, dot: f32) = f0 + (f90 - f0) * schlick_approx(dot);

fn @schlick_r0(eta: f32)-> f32{
    let factor = clampf((eta - 1) / (eta + 1), -1, 1);
    factor * factor
}