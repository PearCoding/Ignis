type RndState = u32;

// Initializer for the FNV hash function
fn @hash_init() -> u32 { 0x811C9DC5 }

// FNV hash function
fn @hash_combine(mut h: u32, d: u32) -> u32 {
    h = (h * 16777619) ^ ( d        & 0xFF);
    h = (h * 16777619) ^ ((d >>  8) & 0xFF);
    h = (h * 16777619) ^ ((d >> 16) & 0xFF);
    h = (h * 16777619) ^ ((d >> 24) & 0xFF);
    h
}

fn @sample_tea_u32(mut v0: u32, mut v1: u32) -> u32 {
    let mut sum = 0:u32;
    for _i in unroll(0, 4) {
        sum += 0x9e3779b9;
        v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + sum) ^ ((v1 >> 5) + 0xc8013ea4);
        v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + sum) ^ ((v0 >> 5) + 0x7e95761e);
    }

    v1
}

struct RandomGenerator {
    next_f32: fn ()         -> f32, // Return random float between [s, e) (end not included!)
    next_i32: fn (i32, i32) -> i32, // Return random integer between [s, e] (end is included!)
    next_u32: fn (u32, u32) -> u32, // Return random unsigned integer between [s, e] (end is included!)
    next_raw_u32: fn ()     -> u32,
    get_counter:  fn ()     -> u32
}

fn @create_random_seed(sample: i32, iter: i32, frame: i32, x: i32, y: i32, user: i32) -> u32 {
    let mut hash = hash_init();
    hash = hash_combine(hash, sample as u32);
    hash = hash_combine(hash, iter as u32);
    hash = hash_combine(hash, frame as u32);
    hash = hash_combine(hash, x as u32);
    hash = hash_combine(hash, y as u32);
    hash = hash_combine(hash, user as u32);
    hash
}

fn @create_random_generator_base(next_u32: fn() -> u32, get_counter: fn() -> u32) -> RandomGenerator {
    fn @next_u32_range(range: u32) {
        let rng_range = 0xFFFFFFFF:u32;        
        if rng_range == range {
            next_u32()
        } else {
            let erange  = range + 1;
            let scaling = rng_range / erange;
            let past    = erange * scaling;
            
            let mut ret = next_u32();
            while ret >= past {
                ret = next_u32();
            }
        
            ret / scaling
        }
    }

    RandomGenerator {
        next_f32 = @|| {
            // This trick is borrowed from Alex, who borrowed it from Mitsuba, which borrowed it from MTGP:
            // We generate a random number in [1,2) and subtract 1 from it.
            let x = next_u32();
            bitcast[f32]((x & 0x7FFFFF) | 0x3F800000) - 1
        },
        next_i32 = @|s, e| {
            next_u32_range((e-s) as u32) as i32 + s
        },
        next_u32 = @|s, e| {
            next_u32_range(e-s) + s
        },
        next_raw_u32 = next_u32,
        get_counter  = get_counter
    }
}

fn @create_random_generator(seed: u32) = create_random_generator_live(seed, 1);

fn @create_random_generator_live(seed: u32, mut counter: u32) -> RandomGenerator {
    fn @next_u32() = sample_tea_u32(seed, counter++);
    create_random_generator_base(next_u32, @|| counter)
}

// Function will return a random number based on the given seed.
// As long as the seed does not change the return value will not change either.
fn @hash_rndf(seed: f32) -> f32 {
    create_random_generator(hash_combine(hash_init(), bitcast[u32](seed))).next_f32()
}