// BVH layout ----------------------------------------------------------------------

struct Node2 {
    bounds: [f32 * 12], // lo_x, hi_x, lo_y, hi_y, ...
    child:  [i32 * 2],
    pad:    [i32 * 2]
}

fn @make_gpu_node(j: i32, nodes: &[Node2], is_nvvm: bool) -> Node {
    let load4_f32 = @ |p: &addrspace(1)[simd[f32 * 4]], i: i32| if is_nvvm { nvvm_ldg4_f32(&p(i)) } else { p(i) };
    let load4_i32 = @ |p: &addrspace(1)[simd[i32 * 4]], i: i32| if is_nvvm { nvvm_ldg4_i32(&p(i)) } else { p(i) };
    
    let simd_ptr = &nodes(j) as &addrspace(1)[simd[f32 * 4]];
    let bb0      = load4_f32(simd_ptr, 0);
    let bb1      = load4_f32(simd_ptr, 1);
    let bb2      = load4_f32(simd_ptr, 2);
    let children = load4_i32(simd_ptr as &addrspace(1)[simd[i32 * 4]], 3);

    Node {
        bbox = @ |i| {
            if i == 0 {
                make_bbox(make_vec3(bb0(0), bb0(2), bb1(0)),
                          make_vec3(bb0(1), bb0(3), bb1(1)))
            } else {
                make_bbox(make_vec3(bb1(2), bb2(0), bb2(2)),
                          make_vec3(bb1(3), bb2(1), bb2(3)))
            }
        },
        ordered_bbox = @ |_, _| undef[BBox](), // Not implemented
        child = @ |i| children(i)
    }
}

fn @make_gpu_ent(j: i32, objs: &[EntityLeaf1], is_nvvm: bool) -> EntityLeaf {
    let d  = make_gpu_buffer(0/* Does not matter */, &objs(j) as &addrspace(1)[u8], 0, gpu_make_null_atomics(), is_nvvm);
    let e0 = d.load_vec4(0);
    let e1 = d.load_vec4(4);
    let m  = d.load_mat3x4(8);
    let (f, u1, u2, u3) = d.load_int4(20);
    make_entity_leaf(
        make_bbox(make_vec3(e0.x, e0.y, e0.z),
                  make_vec3(e1.x, e1.y, e1.z)),
        bitcast[i32](e0.w),
        bitcast[i32](e1.w), u1, u2, u3,
        m,
        bitcast[u32](f)
    )
}

fn @make_gpu_bvh2_ent(nodes: &[Node2], objs: &[EntityLeaf1], is_nvvm: bool) -> SceneBvh {
    SceneBvh {
        node     = @ |j| @make_gpu_node(j, nodes, is_nvvm),
        ent      = @ |j| @make_gpu_ent( j, objs , is_nvvm),
        prefetch = @ |_| (), // Not implemented
        arity    = 2
    }
}

// Min/Max functions  --------------------------------------------------------------

fn @make_nvvm_min_max() = MinMax {
    // Use video instructions to speed-up the ray-box test
    fminf = nvvm_fminf,
    fmaxf = nvvm_fmaxf,
    fminminf = @ |a, b, c| bitcast[f32](nvvm_minmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
    fmaxmaxf = @ |a, b, c| bitcast[f32](nvvm_maxmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
    fminmaxf = @ |a, b, c| bitcast[f32](nvvm_minmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
    fmaxminf = @ |a, b, c| bitcast[f32](nvvm_maxmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
    is_integer = true
};

fn @make_amdgpu_min_max() = make_min_max(ocml_fminf, ocml_fmaxf, false);

// Traversal kernel  ---------------------------------------------------------------
fn @gpu_traverse_helper( min_max: MinMax
                              , mut ray: Ray
                              , mut hit: Hit
                              , bvh: TraversalBvh
                              , any_hit: bool
                              , root: i32
                              ) -> Hit {
    let stack = alloc_stack();
    stack.push(root, undef[f32]());

    while !stack.is_empty() {
        let node_ref = stack.top();
        let node = bvh.node(node_ref.node - 1);

        let mut mask = 0;
        let small_stack = make_small_stack(bvh.arity);
        for k in unroll(0, bvh.arity) {
            let bbox = node.bbox(k);
            if likely(!bbox_is_empty(bbox)) {
                let (t0, t1) = intersect_ray_box(min_max, false, ray, bbox);
                if t0 <= t1 {
                    mask |= 1 << k;
                    small_stack.write(k, (node.child(k), t0));
                }
            }
        }

        if bvh.arity == 2 {
            // Binary BVH
            if mask == 0 {
                stack.pop();
            } else {
                let (child0, t0) = small_stack.read(0);
                let (child1, t1) = small_stack.read(1);
                if mask == 3 {
                    let first  = select(t0 < t1, child0, child1);
                    let second = select(t0 < t1, child1, child0); 
                    stack.set_top(first, undef[f32]());
                    stack.push_after(second, undef[f32]());
                } else {
                    stack.set_top(select(mask == 1, child0, child1), undef[f32]());
                }
            }
        } else {
            // General case -- slower
            stack.pop();

            if mask != 0 {
                let mut tmin = ray.tmax;
                for k in unroll(0, bvh.arity) {
                    if mask & (1 << k) != 0 {
                        let (child, t) = small_stack.read(k);
                        if any_hit || t < tmin {
                            stack.push(child, undef[f32]());
                            tmin = t
                        } else {
                            stack.push_after(child, undef[f32]())
                        }
                    }
                }
            }
        }

        while is_leaf(stack.top()) {
            let leaf_ref = stack.pop();
            if bvh.handle(leaf_ref, &mut ray, &mut hit) {
                return(hit)
            }
        }
    }

    hit
}

// Traverses a single ray at a time. 
fn @gpu_traverse_prim( min_max: MinMax
                     , ray: Ray
                     , init_hit: Hit
                     , bvh: PrimBvh
                     , any_hit: bool
                     , root: i32
                     ) -> Hit {
    fn @prim_handle(leaf_ref: NodeRef, ray2: &mut Ray, hit: &mut Hit) -> bool {
        let mut prim_id = !leaf_ref.node;
        while true {
            let prim = bvh.prim(prim_id++);

            for k in unroll(0, prim.size) {
                if !prim.is_valid(k) { break() }

                if let Option[Hit]::Some(prim_hit) = prim.intersect(k, *ray2) {
                    *hit = prim_hit;
                    ray2.tmax = prim_hit.distance;

                    if any_hit { return(true) }
                }
            }

            if prim.is_last { break() }
        }

        false
    }
    
    gpu_traverse_helper(min_max, ray, init_hit, TraversalBvh{ node=bvh.node, handle=prim_handle, prefetch=bvh.prefetch, arity=bvh.arity }, any_hit, root)
}

fn @make_gpu_scene_local_handler_multiple(prims: BVHTable, min_max: MinMax) -> SceneTraverseLocalHandler {
    @|local_ray: Ray, leaf: EntityLeaf, any_hit: bool| -> Hit {
        let shape_bvh = @prims(join_u32_to_u64(bitcast[u32](leaf.user1), bitcast[u32](leaf.user2)));
        gpu_traverse_prim(min_max, local_ray, empty_hit(local_ray.tmax)/* TODO */, shape_bvh, any_hit, 1)
    }
}

// Traverses a single ray at a time. 
fn @gpu_traverse_scene( min_max: MinMax
                        , ray: Ray
                        , init_hit: Hit
                        , scene: SceneGeometry
                        , any_hit: bool
                        , root: i32
                        ) -> Hit {

    let bvh = scene.bvh;
    fn @scene_handle(leaf_ref: NodeRef, ray2: &mut Ray, hit: &mut Hit) -> bool {
        let mut ref_id = !leaf_ref.node;
        while true {
            let leaf = bvh.ent(ref_id++);

            if check_ray_visibility(*ray2, leaf.flags) {
                if let Option[(f32,f32)]::Some((tmin, _tmax)) = intersect_ray_box_single_section(min_max, false, *ray2, leaf.bbox) {
                    if tmin <= hit.distance {
                        let local_ray = transform_ray(*ray2, leaf.local);
                        let local_hit = scene.handle_local(local_ray, leaf, any_hit); 
                        
                        if local_hit.prim_id != InvalidHitId && local_hit.distance <= hit.distance {
                            *hit      = make_hit(leaf.entity_id & 0x7FFFFFFF, local_hit.prim_id, local_hit.distance, local_hit.prim_coords);
                            ray2.tmax = hit.distance;

                            // Early exit mode
                            if any_hit { return(true) }
                        }
                    }
                }
            }

            if leaf.entity_id < 0 { break() }
        }

        false
    }
    
    gpu_traverse_helper(min_max, ray, init_hit, TraversalBvh{ node=bvh.node, handle=scene_handle, prefetch=bvh.prefetch, arity=bvh.arity }, any_hit, root)
}
