static InvalidHitId : i32 = -1;
struct Hit {
    distance:    f32,  // Distance to the intersection point
    prim_coords: Vec2, // Surface coordinates
    prim_id:     i32,  // Primitive identifier, or -1 (no intersection found)
    ent_id:      i32,  // Entity identifier, or -1 (no intersection found)
    // mat_id:      i32,  // Entity identifier, or -1 (no intersection found)
}

struct Tri {
    v0: Vec3, // First vertex
    v1: Vec3, // Second vertex
    v2: Vec3, // Third vertex
    e1: Vec3, // First edge (= v2 - v0)
    e2: Vec3, // Second edge (= v0 - v1)
    e3: Vec3, // Third edge (= v1 - v2)
    n:  Vec3  // Geometric normal
}

// Min/max functions required to perform the ray-box test
struct MinMax {
    fmaxmaxf:   fn (f32, f32, f32) -> f32,
    fminminf:   fn (f32, f32, f32) -> f32,
    fminmaxf:   fn (f32, f32, f32) -> f32,
    fmaxminf:   fn (f32, f32, f32) -> f32,
    fmaxf:      fn (f32, f32) -> f32,
    fminf:      fn (f32, f32) -> f32,
    is_integer: bool
}

// Constructs a set of comparators from min and max functions.
// May not be the optimal intrinsics if the hardware provides a combined min/max instruction.
fn @make_min_max( fminf: fn (f32, f32) -> f32
                , fmaxf: fn (f32, f32) -> f32
                , is_integer: bool
                ) = MinMax {
    fminminf   = @ |a, b, c| fminf(fminf(a, b), c),
    fmaxmaxf   = @ |a, b, c| fmaxf(fmaxf(a, b), c),
    fminmaxf   = @ |a, b, c| fmaxf(fminf(a, b), c),
    fmaxminf   = @ |a, b, c| fminf(fmaxf(a, b), c),
    fminf      = fminf,
    fmaxf      = fmaxf,
    is_integer = is_integer
};

// Floating point min/max, works on every ISA, but might not be optimal
fn @make_default_min_max() -> MinMax {
    let fminf = @ |x: f32, y: f32| select(x < y, x, y);
    let fmaxf = @ |x: f32, y: f32| select(x > y, x, y);
    make_min_max(fminf, fmaxf, false)
}

fn @make_hit(ent_id: i32, prim_id: i32, t: f32, uv: Vec2) = Hit {
    distance    = t,
    prim_coords = uv,
    prim_id     = prim_id,
    ent_id      = ent_id,
};

fn @make_tri(v0: Vec3, e1: Vec3, e2: Vec3, n: Vec3) = Tri {
    v0 = v0,
    v1 = vec3_sub(v0, e2),
    v2 = vec3_add(v0, e1),
    e1 = e1,
    e2 = e2,
    e3 = vec3_sub(vec3_mulf(v0, 2), vec3_add(e1, e2)),
    n  = n
};

fn @invalid_hit(tmax: f32) = make_hit(InvalidHitId, InvalidHitId, tmax, undef[Vec2]());

// Möller - Trumbore approach
// No watertightness :/
fn @intersect_ray_tri_mt_gen(backface_culling: bool, ray: Ray, tri: Tri, check_if_none: fn (bool) -> bool) -> Option[(f32, f32, f32)] {
    let c = vec3_sub(tri.v0, ray.org);
    let r = vec3_cross(c, ray.dir);
    let det = vec3_dot(tri.n, ray.dir);
    let abs_det = math_builtins::fabs(det);
    let sgn_det = fp_signmask(det);

    let u = bitcast[f32](bitcast[u32](vec3_dot(r, tri.e1)) ^ bitcast[u32](sgn_det));
    let v = bitcast[f32](bitcast[u32](vec3_dot(r, tri.e2)) ^ bitcast[u32](sgn_det));

    let mut mask = u >= 0;
    mask &= v >= 0;
    mask &= u + v <= abs_det;

    if backface_culling {
        mask &= det < 0;
    } else {
        mask &= det != 0;
    }

    if check_if_none(mask) { return(Option[(f32, f32, f32)]::None) }

    let t = bitcast[f32](bitcast[u32](vec3_dot(c, tri.n)) ^ bitcast[u32](sgn_det));
    mask &= t >= abs_det * ray.tmin;
    mask &= t <= abs_det * ray.tmax;

    if mask {
        let rcp = 1 / abs_det;
        make_option(t * rcp, math_builtins::fmax[f32](u * rcp, 0), math_builtins::fmax[f32](v * rcp, 0))
    } else {
        Option[(f32, f32, f32)]::None
    }
}

fn @intersect_ray_tri_mt_cpu(backface_culling: bool, ray: Ray, tri: Tri) 
    = intersect_ray_tri_mt_gen(backface_culling, ray, tri, @|mask| cpu_likely(rv_all(!mask)));
fn @intersect_ray_tri_mt_gpu(backface_culling: bool, ray: Ray, tri: Tri)
    = intersect_ray_tri_mt_gen(backface_culling, ray, tri, @|mask| !mask);

// Plücker approach
// This one is watertight along the edges
// TODO: Not really watertight :(
fn @intersect_ray_tri_pl_gen(backface_culling: bool, ray: Ray, tri: Tri, check_if_none: fn (bool) -> bool) -> Option[(f32, f32, f32)] {
    let v0 = vec3_sub(tri.v0, ray.org);
    let v1 = vec3_sub(tri.v1, ray.org);
    let v2 = vec3_sub(tri.v2, ray.org);

    let u = vec3_dot(vec3_cross(vec3_sub(v2, v0), vec3_add(v2, v0)), ray.dir);
    let v = vec3_dot(vec3_cross(vec3_sub(v0, v1), vec3_add(v0, v1)), ray.dir);
    let w = vec3_dot(vec3_cross(vec3_sub(v1, v2), vec3_add(v1, v2)), ray.dir);

    let eps = math_builtins::fabs(u + v + w) * flt_eps;

    let mut mask = if backface_culling {
        math_builtins::fmax(u,math_builtins::fmax(v, w)) <= eps
    } else {
        math_builtins::fmax(u,math_builtins::fmax(v, w)) <= eps || math_builtins::fmin(u,math_builtins::fmin(v, w)) >= -eps
    };

    if check_if_none(mask) { return(Option[(f32, f32, f32)]::None) }

    let den = 2 * vec3_dot(ray.dir, tri.n);
    let t   = 2 * vec3_dot(v0, tri.n) / den;

    mask &= t >= ray.tmin;
    mask &= t <= ray.tmax;
    mask &= den != 0;
    
    if mask {
        let rcp = safe_div(1, u + v + w);
        make_option(t, math_builtins::fmin[f32](u * rcp, 1), math_builtins::fmin[f32](v * rcp, 1))
    } else {
        Option[(f32, f32, f32)]::None
    }
}

fn @intersect_ray_tri_pl_cpu(backface_culling: bool, ray: Ray, tri: Tri) 
    = intersect_ray_tri_pl_gen(backface_culling, ray, tri, @|mask| cpu_likely(rv_all(!mask)));
fn @intersect_ray_tri_pl_gpu(backface_culling: bool, ray: Ray, tri: Tri)
    = intersect_ray_tri_pl_gen(backface_culling, ray, tri, @|mask| !mask);

// Baldwin - Weber approach
fn @intersect_ray_tri_bw_gen(_backface_culling: bool, ray: Ray, tri: Tri, check_if_none: fn (bool) -> bool) -> Option[(f32, f32, f32)] {
    // Permute components of triangle vertices and ray direction
    let kz = vec3_max_index(vec3_abs(ray.dir));
    let kx = select(kz + 1 == 3, 0, kz + 1);
    let ky = select(kx + 1 == 3, 0, kx + 1);
    
    let d       = vec3_permute(ray.dir, kx, ky, kz);
    let mut p0t = vec3_permute(vec3_sub(tri.v0, ray.org), kx, ky, kz);
    let mut p1t = vec3_permute(vec3_sub(tri.v1, ray.org), kx, ky, kz);
    let mut p2t = vec3_permute(vec3_sub(tri.v2, ray.org), kx, ky, kz);

    // Apply shear transformation to translated vertex positions
    let Sx = -d.x / d.z;
    let Sy = -d.y / d.z;
    let Sz = 1 / d.z;
    p0t.x += Sx * p0t.z;
    p0t.y += Sy * p0t.z;
    p1t.x += Sx * p1t.z;
    p1t.y += Sy * p1t.z;
    p2t.x += Sx * p2t.z;
    p2t.y += Sy * p2t.z;

    // Compute differences
    let e0 = diff_of_prod(p1t.x, p2t.y, p1t.y, p2t.x);
    let e1 = diff_of_prod(p2t.x, p0t.y, p2t.y, p0t.x);
    let e2 = diff_of_prod(p0t.x, p1t.y, p0t.y, p1t.x);

    let det = e0 + e1 + e2;
    let abs_det = math_builtins::fabs(det);
    let mut mask = !((e0 < 0 || e1 < 0 || e2 < 0) && (e0 > 0 || e1 > 0 || e2 > 0)) && abs_det != 0;

    if check_if_none(mask) { return(Option[(f32, f32, f32)]::None) }

    // Compute scaled hit distance to triangle and test against ray range
    p0t.z *= Sz;
    p1t.z *= Sz;
    p2t.z *= Sz;
    let t = e0 * p0t.z + e1 * p1t.z + e2 * p2t.z;
    mask &= !(det < 0 && (t >= ray.tmin * det || t < ray.tmax * det)) && !(det > 0 && (t <= ray.tmin * det || t > ray.tmax * det));

    if check_if_none(mask) { return(Option[(f32, f32, f32)]::None) }

    if mask {
        let inv_det = 1 / det;
        make_option(t * inv_det, e1 * inv_det, e2 * inv_det)
    } else {
        Option[(f32, f32, f32)]::None
    }
}

fn @intersect_ray_tri_bw_cpu(backface_culling: bool, ray: Ray, tri: Tri) 
    = intersect_ray_tri_bw_gen(backface_culling, ray, tri, @|mask| cpu_likely(rv_all(!mask)));
fn @intersect_ray_tri_bw_gpu(backface_culling: bool, ray: Ray, tri: Tri)
    = intersect_ray_tri_bw_gen(backface_culling, ray, tri, @|mask| !mask);

// Pick triangle intersection method
// TODO: In the future this might be a good (advanced) user parameter
fn @intersect_ray_tri_cpu(backface_culling: bool, ray: Ray, tri: Tri) = intersect_ray_tri_mt_cpu(backface_culling, ray, tri);
fn @intersect_ray_tri_gpu(backface_culling: bool, ray: Ray, tri: Tri) = intersect_ray_tri_mt_gpu(backface_culling, ray, tri);

// Ray - Box intersection
fn @intersect_ray_box(min_max: MinMax, ordered: bool, ray: Ray, bbox: BBox) -> (f32, f32) {
    let t0 = vec3_add(vec3_mul(ray.inv_dir, bbox.min), ray.inv_org);
    let t1 = vec3_add(vec3_mul(ray.inv_dir, bbox.max), ray.inv_org);

    if ordered {
        (min_max.fmaxmaxf(t0.x, t0.y, min_max.fmaxf(t0.z, ray.tmin)),
         min_max.fminminf(t1.x, t1.y, min_max.fminf(t1.z, ray.tmax)))
    } else {
        (min_max.fmaxmaxf(min_max.fminf(t0.x, t1.x), min_max.fminf(t0.y, t1.y), min_max.fminmaxf(t0.z, t1.z, ray.tmin)),
         min_max.fminminf(min_max.fmaxf(t0.x, t1.x), min_max.fmaxf(t0.y, t1.y), min_max.fmaxminf(t0.z, t1.z, ray.tmax)))
    }
}

fn @intersect_ray_box_single(min_max: MinMax, ordered: bool, ray: Ray, bbox: BBox) -> Option[f32] {
    let (entry, exit) = intersect_ray_box(min_max, ordered, ray, bbox);
    let mask = (entry <= exit) & (exit >= 0);

    if mask {
        make_option(select(entry < 1e-5, exit, entry))
    } else {
        Option[f32]::None
    }
}

fn @intersect_ray_box_single_section(min_max: MinMax, ordered: bool, ray: Ray, bbox: BBox) -> Option[(f32, f32)] {
    let (entry, exit) = intersect_ray_box(min_max, ordered, ray, bbox);
    let mask = (entry <= exit) & (exit >= 0);

    if mask {
        make_option((entry, exit))
    } else {
        Option[(f32, f32)]::None
    }
}
