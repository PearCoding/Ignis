static flt_sun_radius_deg = 0.533:f32; // Sun solid angle seen from earth given in degrees

fn @sun_cos_angle_from_radius(radius: f32)    = 1 / math_builtins::sqrt(radius * radius + 1);               // cos(atan(R))
fn @sun_radius_from_cos_angle(cos_angle: f32) = math_builtins::sqrt(1 - cos_angle * cos_angle) / cos_angle; // tan(acos(C))
fn @sun_area_from_radius(radius: f32)         = flt_pi * radius * radius;
fn @sun_area_from_cos_angle(cos_angle: f32)   = sun_area_from_radius(sun_radius_from_cos_angle(cos_angle));

fn @make_sun_light(id: i32, sun_dir: Vec3 /* Light to Scene */, scene_bbox: BBox, cos_sun_angle: f32, radiance: Color, handle_as_delta: bool) -> Light {
    let scene_radius = bbox_radius(scene_bbox) * 1.01;
    let frame        = make_orthonormal_mat3x3(sun_dir);

    let dir_pdf = uniform_cone_pdf(cos_sun_angle);

    fn @check_if_hit(gdir: Vec3) = -vec3_dot(sun_dir, gdir) >= cos_sun_angle;
    
    Light {
        id = id,
        sample_direct = @ |rnd, _| {
            let sample = sample_uniform_cone(rnd.next_f32(), rnd.next_f32(), cos_sun_angle);
            let ndir   = mat3x3_mul(frame, sample.dir);
            make_direct_sample(vec3_expand(0), vec3_neg(ndir), color_mulf(radiance, safe_div(1, sample.pdf)), if handle_as_delta { make_delta_pdf() } else { make_solid_pdf(sample.pdf) }, sample.dir.z, flt_inf)
        },
        sample_emission = @ |rnd| {
            let sample         = sample_uniform_cone(rnd.next_f32(), rnd.next_f32(), cos_sun_angle);
            let ndir           = mat3x3_mul(frame, sample.dir);
            let (pos, pos_pdf) = env_sample_pos(rnd, vec3_neg(ndir), bbox_center(scene_bbox), scene_radius);
            make_emission_sample(pos, ndir, color_mulf(radiance, safe_div(1, pos_pdf * sample.pdf)), pos_pdf, sample.pdf, sample.dir.z)
        },
        emission = @ |ctx| {
            if !handle_as_delta && check_if_hit(ctx.ray.dir) {
                radiance
            } else {
                color_builtins::black
            }
        },
        pdf_direct = @ |ray, _|  {
            if handle_as_delta {
                make_delta_pdf()
            } else {
                make_solid_pdf(select(check_if_hit(ray.dir), dir_pdf, 0:f32))
            }
        },
        pdf_emission = @ |_, _| make_emissive_pdf(env_sample_pos_pdf(scene_radius), dir_pdf), // TODO: Check if this needs to be selective (if it hits etc)
        delta    = handle_as_delta,
        infinite = true
    }
}
