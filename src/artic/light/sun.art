fn @sun_cos_angle_from_radius(radius: f32)    = 1 / math_builtins::sqrt(radius * radius + 1);               // cos(atan(R))
fn @sun_radius_from_cos_angle(cos_angle: f32) = math_builtins::sqrt(1 - cos_angle * cos_angle) / cos_angle; // tan(acos(C))

fn @make_sun_light(id: i32, dir: Vec3, scene_bbox: BBox, cos_sun_angle: f32, color: Color) -> Light {
    let scene_radius = bbox_radius(scene_bbox) * 1.01;
    let frame        = make_orthonormal_mat3x3(dir);
    let sun_radius   = sun_radius_from_cos_angle(cos_sun_angle);
    let sun_area     = flt_pi * sun_radius* sun_radius;
    Light {
        id = id,
        sample_direct = @ |rnd, _| {
            let sample = sample_uniform_cone(randf(rnd), randf(rnd), cos_sun_angle);
            let ndir   = mat3x3_mul(frame, sample.dir);
            make_direct_sample(vec3_expand(0), vec3_neg(ndir), color_mulf(color, 1 / (sun_area * sample.pdf)), make_delta_pdf(), sample.dir.z, flt_inf)
        },
        sample_emission = @ |rnd| {
            let sample         = sample_uniform_cone(randf(rnd), randf(rnd), cos_sun_angle);
            let ndir           = mat3x3_mul(frame, sample.dir);
            let (pos, pos_pdf) = env_sample_pos(rnd, vec3_neg(ndir), bbox_center(scene_bbox), scene_radius);
            make_emission_sample(pos, ndir, color_mulf(color, safe_div(1, pos_pdf * sun_area * sample.pdf)), pos_pdf, sun_area * sample.pdf, sample.dir.z)
        },
        emission     = @ |_|    color_builtins::black,
        pdf_direct   = @ |_, _| make_delta_pdf(),
        pdf_emission = @ |_, _| make_emissive_pdf(env_sample_pos_pdf(scene_radius), sun_area * uniform_cone_pdf(cos_sun_angle)),
        delta    = true, // TODO: This is not really delta if cos_angle < 1, but is not worth the indirect hits (and MIS) usually
        infinite = true
    }
}
