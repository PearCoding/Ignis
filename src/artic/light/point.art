fn @make_point_light(id: i32, pos: Vec3, color: Color) = Light {
    id = id,
    sample_direct = @ |_, from_surf| {
        let intensity = color_mulf(color, 1 / (4 * flt_pi));
        let dir_ = vec3_sub(pos, from_surf.point);
        let dist = vec3_len(dir_);
        let dir  = vec3_mulf(dir_, safe_div(1, dist));
        make_direct_sample(pos, dir, intensity, make_area_pdf(1), 1, dist)
    },
    sample_emission = @ |rnd| {
        let sample    = sample_uniform_sphere(randf(rnd), randf(rnd));
        let intensity = color_mulf(color, 1 / (4 * flt_pi * sample.pdf));
        make_emission_sample(pos, sample.dir, intensity, 1, sample.pdf, 1)
    },
    emission     = @ |_|    color_builtins::black,
    pdf_direct   = @ |_, _| make_area_pdf(0), // Does not matter
    pdf_emission = @ |_, _| make_emissive_pdf(1, uniform_sphere_pdf()),
    delta    = true,
    infinite = false
};

fn @load_simple_point_lights(count: i32, id_off: i32, device: Device) -> LightTable {
    let tbl = device.load_fixtable("SimplePointLight");

    let elem_s = 8; // Given in floats. See PointLight.cpp
    LightTable {
        count = count,
        get   = @|id| {
            let data = shift_device_buffer(elem_s * id, elem_s, tbl);

            let position  = data.load_vec4(0);
            let intensity = data.load_vec4(4);
            
            make_point_light(id + id_off, vec4_to_3(position), vec3_to_color(vec4_to_3(intensity)))
        } 
    }
}