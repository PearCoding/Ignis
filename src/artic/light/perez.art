mod perez {
    use super as all;
    use super::math_builtins;

    static flt_solar_e = 1367:f32;
    static flt_solar_l = 127500:f32;

    static flt_dewpoint_temp   = 10.97353115:f32;
    static flt_atm_preci_water = 2:f32; // math_builtins::exp(0.07 * flt_dewpoint_temp - 0.075)

    // Data based on 'Modeling Skylight Angular Luminance Distribution from Routine Irradiance Measurements' by R. Perez, R. Seals, and J. Michalsky (1993)
    static s_bin_count = 8 : i32;
    static s_ranges : [f32 * 9] = [ 1.000, 1.065, 1.230, 1.500, 1.950, 2.800, 4.500, 6.200, 12.01 ];

    static s_param_a : [f32 * 32] = [
        1.3525, -0.2576, -0.2690, -1.4366,
        -1.2219, -0.7730, 1.4148, 1.1016,
        -1.1000, -0.2515, 0.8952, 0.0156,
        -0.5484, -0.6654, -0.2672, 0.7117,
        -0.6000, -0.3566, -2.5000, 2.3250,
        -1.0156, -0.3670, 1.0078, 1.4051,
        -1.0000, 0.0211, 0.5025, -0.5119,
        -1.0500, 0.0289, 0.4260, 0.3590
    ];

    static s_param_b : [f32 * 32] = [
        -0.7670, 0.0007, 1.2734, -0.1233,
        -0.2054, 0.0367, -3.9128, 0.9156,
        0.2782, -0.1812, -4.5000, 1.1766,
        0.7234, -0.6219, -5.6812, 2.6297,
        0.2937, 0.0496, -5.6812, 1.8415,
        0.2875, -0.5328, -3.8500, 3.3750,
        -0.3000, 0.1922, 0.7023, -1.6317,
        -0.3250, 0.1156, 0.7781, 0.0025
    ];

    static s_param_c : [f32 * 32] = [
        2.8000, 0.6004, 1.2375, 1.0000,
        6.9750, 0.1774, 6.4477, -0.1239,
        24.7219, -13.0812, -37.7000, 34.8438,
        33.3389, -18.3000, -62.2500, 52.0781,
        21.0000, -4.7656, -21.5906, 7.2492,
        14.0000, -0.9999, -7.1406, 7.5469,
        19.0000, -5.0000, 1.2438, -1.9094,
        31.0625, -14.5000, -46.1148, 55.3750
    ];

    static s_param_d : [f32 * 32] = [
        1.8734, 0.6297, 0.9738, 0.2809,
        -1.5798, -0.5081, -1.7812, 0.1080,
        -5.0000, 1.5218, 3.9229, -2.6204,
        -3.5000, 0.0016, 1.1477, 0.1062,
        -3.5000, -0.1554, 1.4062, 0.3988,
        -3.4000, -0.1078, -1.0750, 1.5702,
        -4.0000, 0.0250, 0.3844, 0.2656,
        -7.2312, 0.4050, 13.3500, 0.6234
    ];

    static s_param_e : [f32 * 32] = [
        0.0356, -0.1246, -0.5718, 0.9938,
        0.2624, 0.0672, -0.2190, -0.4285,
        -0.0156, 0.1597, 0.4199, -0.5562,
        0.4659, -0.3296, -0.0876, -0.0329,
        0.0032, 0.0766, -0.0656, -0.1294,
        -0.0672, 0.4016, 0.3017, -0.4844,
        1.0468, -0.3788, -2.4517, 1.4656,
        1.5000, -0.6426, 1.8564, 0.5636
    ];

    static s_diffuse_a : [f32 * 8] = [ 97.24, 107.22, 104.97, 102.39, 100.71, 106.42, 141.88, 152.23 ];
    static s_diffuse_b : [f32 * 8] = [ -0.46, 1.15, 2.96, 5.59, 5.94, 3.83, 1.90, 0.35 ];
    static s_diffuse_c : [f32 * 8] = [ 12.00, 0.59, -5.53, -13.95, -22.75, -36.15, -53.24, -45.27 ];
    static s_diffuse_d : [f32 * 8] = [ -8.91, -3.95, -8.77, -13.90, -23.74, -28.83, -14.03, -7.98 ];

    static s_direct_a : [f32 * 8] = [ 57.20, 98.99, 109.83, 110.34, 106.36, 107.19, 105.75, 101.18 ];
    static s_direct_b : [f32 * 8] = [ -4.55, -3.46, -4.90, -5.84, -3.97, -1.25, 0.77, 1.58 ];
    static s_direct_c : [f32 * 8] = [ -2.98, -1.21, -1.71, -1.99, -1.75, -1.51, -1.26, -1.10 ];
    static s_direct_d : [f32 * 8] = [ 117.12, 12.38, -8.81, -4.56, -6.16, -26.73, -34.44, -8.29 ];

    type ExplicitParameters = (f32, f32, f32, f32, f32);
    struct Model {
        brightness:    f32,
        clearness:     f32,
        direct_irrad:  f32, // Direct normal irradiance       [W/m^2]
        diffuse_irrad: f32, // Diffuse horizontal irradiance  [W/m^2]
        direct_illum:  f32, // Direct normal illuminance      [Lux]
        diffuse_illum: f32, // Diffuse horizontal illuminance [Lux]
        params:        ExplicitParameters
    }

    /// Validate parametrization (limits defined by J. Wienold - Radiance)
    fn @check_brightness(brightness: f32)       = all::clampf(brightness, 0.01:f32, 0.6:f32);
    fn @check_clearness(clearness: f32)         = all::clampf(clearness,  1:f32,    12:f32 - 0.001:f32);
    fn @check_diffuse_irrad(diffuse_irrad: f32) = math_builtins::fmax(diffuse_irrad, 0:f32);
    fn @check_direct_irrad(direct_irrad: f32)   = all::clampf(direct_irrad, 0:f32, flt_solar_e); // TODO: Radiance prints out an error sky if it exceeds the solar constant
    fn @check_diffuse_illum(diffuse_illum: f32) = math_builtins::fmax(diffuse_illum, 0:f32);
    fn @check_direct_illum(direct_illum: f32)   = all::clampf(direct_illum, 0:f32, flt_solar_l); // TODO: Radiance prints out an error sky if it exceeds the solar constant

    // gendaylit -P
    fn @make_model_from_brightness_clearness(mut brightness: f32, mut clearness: f32, solar_zenith: f32, day_of_the_year: f32) -> Model {
        brightness = check_brightness(brightness);
        clearness  = check_clearness(clearness);
        
        let direct_irrad  = check_direct_irrad(compute_direct_irrad(brightness, clearness, solar_zenith, day_of_the_year));
        let diffuse_irrad = check_diffuse_irrad(compute_diffuse_irrad(brightness, solar_zenith, day_of_the_year));

        Model {
            brightness    = brightness,
            clearness     = clearness,
            direct_irrad  = direct_irrad,
            diffuse_irrad = diffuse_irrad,
            direct_illum  = direct_irrad  * compute_direct_efficacy(brightness, clearness, solar_zenith),
            diffuse_illum = diffuse_irrad * compute_diffuse_efficacy(brightness, clearness, solar_zenith),
            params        = compute_explicit_parameters(brightness, clearness, solar_zenith)
        }
    }

    // gendaylit -W
    fn @make_model_from_irradiance(mut diffuse_irrad: f32, mut direct_irrad: f32, solar_zenith: f32, day_of_the_year: f32) -> Model {
        diffuse_irrad = check_direct_irrad(diffuse_irrad);
        direct_irrad  = check_diffuse_irrad(direct_irrad);

        let brightness = check_brightness(compute_brightness(diffuse_irrad, solar_zenith, day_of_the_year));
        let clearness  = check_clearness(compute_clearness(diffuse_irrad, direct_irrad, solar_zenith));

        Model {
            brightness    = brightness,
            clearness     = clearness,
            direct_irrad  = direct_irrad,
            diffuse_irrad = diffuse_irrad,
            direct_illum  = direct_irrad  * compute_direct_efficacy(brightness, clearness, solar_zenith),
            diffuse_illum = diffuse_irrad * compute_diffuse_efficacy(brightness, clearness, solar_zenith),
            params        = compute_explicit_parameters(brightness, clearness, solar_zenith)
        }
    }

    // gendaylit -G
    fn @make_model_from_irradiance_hori(diffuse_irrad: f32, direct_hori_irrad: f32, solar_zenith: f32, day_of_the_year: f32) 
        = make_model_from_irradiance(diffuse_irrad, direct_hori_irrad / math_builtins::cos(solar_zenith), solar_zenith, day_of_the_year);

    fn @compute_diffuse_irrad(brightness: f32, solar_zenith: f32, day_of_the_year: f32) 
        = brightness * flt_solar_e * compute_eccentricity(day_of_the_year) / compute_air_mass(solar_zenith);

    fn @compute_brightness(diffuse_irrad: f32, solar_zenith: f32, day_of_the_year: f32) 
        = diffuse_irrad * compute_air_mass(solar_zenith) / (flt_solar_e * compute_eccentricity(day_of_the_year));

    fn @compute_direct_irrad(brightness: f32, clearness: f32, solar_zenith: f32, day_of_the_year: f32) -> f32 {
        let diffuse_irrad = compute_diffuse_irrad(brightness, solar_zenith, day_of_the_year);
        let c = 1.041 * solar_zenith * solar_zenith * solar_zenith;

        (clearness * (1 + c) - c) * diffuse_irrad - diffuse_irrad
    }

    fn @compute_clearness(diffuse_irrad: f32, direct_irrad: f32, solar_zenith: f32) -> f32{
        let c = 1.041 * solar_zenith * solar_zenith * solar_zenith;
        ((diffuse_irrad + direct_irrad) / diffuse_irrad + c) / (1 + c)
    }

    fn @compute_eccentricity(day_of_the_year: f32) -> f32 {
        let day_angle = 2 * all::flt_pi * all::clampf(day_of_the_year / 365, 0:f32, 1:f32);
        1.00011 + 0.034221 * math_builtins::cos(day_angle) + 0.00128 * math_builtins::sin(day_angle) + 0.000719 * math_builtins::cos(2 * day_angle) + 0.000077 * math_builtins::sin(2 * day_angle)
    }

    fn @compute_air_mass(solar_zenith: f32) = 1 / (math_builtins::cos(solar_zenith) + 0.15 * math_builtins::exp(math_builtins::log(93.885 - all::deg(solar_zenith)) * -1.253));

    fn @get_category_from_range(clearness: f32) -> i32 {
        for bin in all::unroll(0, s_bin_count) {
            if clearness >= s_ranges(bin) && clearness < s_ranges(bin + 1) {
                return(bin)
            }
        }
        s_bin_count - 1
    }

    fn @compute_diffuse_efficacy(brightness: f32, clearness: f32, solar_zenith: f32) -> f32 {
        let bin = get_category_from_range(clearness);
        s_diffuse_a(bin) + s_diffuse_b(bin) * flt_atm_preci_water + s_diffuse_c(bin) * math_builtins::cos(solar_zenith) + s_diffuse_d(bin) * math_builtins::log(brightness)
    }

    fn @compute_direct_efficacy(brightness: f32, clearness: f32, solar_zenith: f32) -> f32 {
        let bin = get_category_from_range(clearness);
        math_builtins::fmax(
            0:f32, 
            s_direct_a(bin) + s_direct_b(bin) * flt_atm_preci_water + s_direct_c(bin) * math_builtins::exp(5.73 * solar_zenith - 5) + s_direct_d(bin) * brightness
        )
    }

    fn @compute_explicit_parameters(mut brightness: f32, clearness: f32, solar_zenith: f32) -> ExplicitParameters {
        // TODO: The correction has to apply way beyond clearness > 2.8 for small brightness
        // Correction factor in the Perez model
        if clearness > 1.065 && clearness < 2.8 && brightness < 0.2 {
            brightness = 0.2;
        }

        fn @compute_std(p0: f32, p1: f32, p2: f32, p3: f32) = p0 + p1 * solar_zenith + brightness * (p2 + p3 * solar_zenith);

        let bin = get_category_from_range(clearness);

        let a = compute_std(s_param_a(bin*4 + 0), s_param_a(bin*4 + 1), s_param_a(bin*4 + 2), s_param_a(bin*4 + 3));
        let b = compute_std(s_param_b(bin*4 + 0), s_param_b(bin*4 + 1), s_param_b(bin*4 + 2), s_param_b(bin*4 + 3));
        let e = compute_std(s_param_e(bin*4 + 0), s_param_e(bin*4 + 1), s_param_e(bin*4 + 2), s_param_e(bin*4 + 3));

        if bin == 0 {
            (
                a, 
                b, 
                math_builtins::exp(math_builtins::pow(brightness * (s_param_c(0) + s_param_c(1) * solar_zenith), s_param_c(2))) - s_param_c(3),
                -math_builtins::exp(brightness * (s_param_d(0) + s_param_d(1) * solar_zenith)) + s_param_d(2) + brightness * s_param_d(3),
                e
            )
        } else {
            (
                a, 
                b, 
                compute_std(s_param_c(bin*4 + 0), s_param_c(bin*4 + 1), s_param_c(bin*4 + 2), s_param_c(bin*4 + 3)),
                compute_std(s_param_d(bin*4 + 0), s_param_d(bin*4 + 1), s_param_d(bin*4 + 2), s_param_d(bin*4 + 3)),
                e
            )
        }
    }

    fn @eval(cos_sun: f32, cos_theta: f32, params: ExplicitParameters) -> f32 {
        let sun_a = math_builtins::acos(cos_sun); // Angle between sun and direction

        let A = 1 + params.0 * math_builtins::exp(params.1 / math_builtins::fmax[f32](1e-5, cos_theta));
        let B = 1 + params.2 * math_builtins::exp(params.3 * sun_a) + params.4 * cos_sun * cos_sun;
        A * B
    }
    
    static s_theta_base : [f32 * 145] = [
        84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
        84, 84, 84, 84, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
        72, 72, 72, 72, 72, 72, 72, 72, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
        60, 60, 60, 60, 60, 60, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
        48, 48, 48, 48, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24, 12, 12, 12, 12, 12, 12, 0
    ];

    static s_phi_base : [f32 * 145] = [
        0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264,
        276, 288, 300, 312, 324, 336, 348, 0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180,
        192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 0, 15, 30, 45, 60, 75, 90, 105,
        120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 0, 15, 30, 45, 60, 75,
        90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 0, 20, 40, 60,
        80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 0, 30, 60, 90, 120, 150, 180, 210,
        240, 270, 300, 330, 0, 60, 120, 180, 240, 300, 0
    ];

    fn @integrate(solar_zenith: f32, params: ExplicitParameters) -> f32 {
        let cos_solar = math_builtins::cos(solar_zenith);
        let sin_solar = math_builtins::sin(solar_zenith);

        fn @compute(cos_theta: f32, sin_theta: f32, cos_phi: f32) -> f32 {
            let cos_sun = math_builtins::fmin(1.0:f32, cos_solar * cos_theta + sin_solar * sin_theta * cos_phi);
            eval(cos_sun, cos_theta, params) * cos_theta
        }

        // Default integration base used in Radiance
        let mut integrand = 0 : f32;
        for i in all::safe_unroll(0, 145) {
            let theta = all::rad(s_theta_base(i));
            let ct    = math_builtins::cos(theta);
            let st    = math_builtins::sin(theta);

            let phi = all::rad(s_phi_base(i));
            let cp  = math_builtins::cos(phi);

            integrand += compute(ct, st, cp);
        }

        2 * all::flt_pi * integrand / 145
    }
}

fn @make_perez_light_raw(id: i32, scene_bbox: BBox, l_sun_dir: Vec3 /* Light to Scene */, sky_color: Color, ground_color: Color, cos_sun_angle: f32, sun_color: Color, params: perez::ExplicitParameters, has_ground: bool, has_sun: bool, transform: Mat3x3) -> Light {
    let sky_function = @|dir: Vec3|{
        let cos_theta = dir.y; // Cosine between zenith and direction
        let sun_c     = clampf(-vec3_dot(dir, l_sun_dir), -1, 1); // Cosine between sun and direction
        let fac       = perez::eval(sun_c, cos_theta, params);
        cie_wmean(cos_theta, color_mulf(sky_color, fac), ground_color)
    };

    if has_sun {
        let sun_model = make_sun_light(id, mat3x3_mul(transform, l_sun_dir), scene_bbox, cos_sun_angle, sun_color, false);
        sun_model.{
            sample_direct = @ |rnd, from_surf| {
                let sample    = sun_model.sample_direct(rnd, from_surf);
                let intensity = color_add(sample.intensity, color_mulf(sky_function(mat3x3_mul(transform, sample.dir)), 1 / sample.pdf.value));
                sample.{ intensity = intensity }
            },
            sample_emission = @ |rnd| {
                let sample    = sun_model.sample_emission(rnd);
                let intensity = color_add(sample.intensity, color_mulf(sky_function(mat3x3_mul(transform, vec3_neg(sample.dir))), 1 / (sample.pdf_area * sample.pdf_dir)));
                sample.{ intensity = intensity }
            },
            emission = @ |ctx| color_add(sun_model.emission(ctx), sky_function(mat3x3_mul(transform, ctx.ray.dir))),
        }
    } else {
        make_environment_light_function(id, scene_bbox, sky_function, transform, !has_ground)
    }
}

enum PerezOutputMode {
    VisibleRadiance, // gendaylit -O 0
    SolarRadiance,   // gendaylit -O 1
    Luminance        // gendaylit -O 2
}

fn @make_perez_light_from_model(id: i32, scene_bbox: BBox, l_sun_dir: Vec3 /* Light to Scene (Local) */, tint_color: Color, ground_color: Color, model_gen: fn(f32) -> perez::Model, has_ground: bool, has_sun: bool, transform: Mat3x3, output: PerezOutputMode) -> Light {
    let sin_altitude   = clampf(-l_sun_dir.y, -1:f32, 1:f32); // Y-Up
    let solar_altitude = math_builtins::asin(sin_altitude);
    let solar_zenith   = flt_pi / 2 - solar_altitude;

    // ! x = cos(pi/2 - asin(x))
    // ! cos(a) = sin(pi/2 - a)

    let model = model_gen(solar_zenith);
    
    let integrand = perez::integrate(solar_zenith, model.params);
    let diffnorm = safe_div(match(output) {
        PerezOutputMode::VisibleRadiance => model.diffuse_illum / color_builtins::white_efficiency,
        PerezOutputMode::SolarRadiance   => model.diffuse_irrad,
        PerezOutputMode::Luminance       => model.diffuse_illum,
    }, integrand);

    let sun_factor = 6.8e-5:f32; // 2 * flt_pi * (1 - math_builtins::cos(rad(flt_sun_radius_deg / 2)));
    let sun_color  = color_mulf(tint_color, match(output) {
        PerezOutputMode::VisibleRadiance => model.direct_illum / color_builtins::white_efficiency,
        PerezOutputMode::SolarRadiance   => model.direct_irrad,
        PerezOutputMode::Luminance       => model.direct_illum,
    });

    let sky_color = color_mulf(tint_color, diffnorm);
    let zenith    = color_mulf(sky_color, perez::eval(sin_altitude, 1, model.params));

    // Compute factors for the ground
    let normfactor = if model.clearness == 1 { 
        0.777778:f32
    } else if model.clearness < 6 {
        let f2 = (2.739 + 0.9891 * math_builtins::sin(0.3119 + 2.6 * solar_altitude)) * math_builtins::exp(-solar_zenith * (0.4441 + 1.48 * solar_altitude));
        let x  = solar_altitude / (flt_pi / 4) - 1;
        let norm_sc = (((0.60227 * x + 1.0660) * x - 1.3081) * x - 2.7152) * x + 3.5556;
	    safe_div(norm_sc, f2) / flt_pi
    } else {
        let f2 = 0.274 * (0.91 + 10 * math_builtins::exp(-3 * solar_zenith) + 0.45 * sin_altitude * sin_altitude);
        let x  = solar_altitude / (flt_pi / 4) - 1;
        let norm_sc = (((0.059229 * x + 0.009237) * x - 0.369832) * x + 0.547665) * x + 2.766521;
	    safe_div(norm_sc, f2) / flt_pi
    };

    let actual_ground = color_mul(ground_color, 
        color_add(if has_sun && model.clearness > 1 { color_mulf(sun_color, math_builtins::fabs(sin_altitude) / flt_pi) } else { color_builtins::black },
                  color_mulf(zenith, normfactor)));

    let actual_sun = if has_sun && model.clearness > 1 { color_mulf(sun_color, sun_factor) } else { color_builtins::black };

    make_perez_light_raw(id, scene_bbox, l_sun_dir, sky_color, actual_ground, math_builtins::cos(rad(flt_sun_radius_deg / 2)), actual_sun, model.params, has_ground, has_sun, transform)
}

fn @make_perez_light_from_brightness_clearness(id: i32, scene_bbox: BBox, l_sun_dir: Vec3, tint_color: Color, ground_color: Color, brightness: f32, clearness: f32, day_of_the_year: f32, has_ground: bool, has_sun: bool, transform: Mat3x3, output: PerezOutputMode) =
    make_perez_light_from_model(id, scene_bbox, l_sun_dir, tint_color, ground_color,
        @|sz| perez::make_model_from_brightness_clearness(brightness, clearness, sz, day_of_the_year),
        has_ground,
        has_sun,
        transform,
        output
    );

fn @make_perez_light_from_irradiance(id: i32, scene_bbox: BBox, l_sun_dir: Vec3, tint_color: Color, ground_color: Color, diffuse_irrad: f32, direct_irrad: f32, day_of_the_year: f32, has_ground: bool, has_sun: bool, transform: Mat3x3, output: PerezOutputMode) =
    make_perez_light_from_model(id, scene_bbox, l_sun_dir, tint_color, ground_color,
        @|sz| perez::make_model_from_irradiance(diffuse_irrad, direct_irrad, sz, day_of_the_year),
        has_ground,
        has_sun,
        transform,
        output
    );

fn @make_perez_light_from_irradiance_hori(id: i32, scene_bbox: BBox, l_sun_dir: Vec3, tint_color: Color, ground_color: Color, diffuse_irrad: f32, direct_hori_irrad: f32, day_of_the_year: f32, has_ground: bool, has_sun: bool, transform: Mat3x3, output: PerezOutputMode) =
    make_perez_light_from_model(id, scene_bbox, l_sun_dir, tint_color, ground_color,
        @|sz| perez::make_model_from_irradiance_hori(diffuse_irrad, direct_hori_irrad, sz, day_of_the_year),
        has_ground,
        has_sun,
        transform,
        output
    );

// TODO: Illuminance
