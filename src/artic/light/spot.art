fn @spot_from_power(power: Color, cutoff_angle: f32, falloff_angle: f32) -> Color {
    let cosCutoffAngle  = math_builtins::cos(cutoff_angle);
    let cosFalloffAngle = math_builtins::cos(falloff_angle);
    let factor = 2 * flt_pi * (1 - 0.5 * cosFalloffAngle - 0.5 * cosCutoffAngle);
    color_mulf(power, 1 / factor)
}

fn @make_spot_light(id: i32, pos: Vec3, dir: Vec3, cutoff_angle: f32, falloff_angle: f32, intensity: Color) -> Light {
    let frame           = make_orthonormal_mat3x3(dir);
    let cosCutoffAngle  = math_builtins::cos(cutoff_angle);
    let cosFalloffAngle = math_builtins::cos(falloff_angle);
    let blendRange      = cosFalloffAngle - cosCutoffAngle;
    let spot_radius     = math_builtins::sqrt(1 - cosCutoffAngle * cosCutoffAngle) / cosCutoffAngle;
    let spot_area       = flt_pi * spot_radius * spot_radius;

    fn @to_world(vec: Vec3) = mat3x3_mul(frame, vec);

    fn @check_valid(out_dir: Vec3) = vec3_dot(out_dir, dir) > cosCutoffAngle;
    fn @eval_dir(out_dir: Vec3) {
        let cos_angle = vec3_dot(out_dir, dir);
        let factor    = if blendRange <= flt_eps { 
                            select(cos_angle <= cosCutoffAngle, 0:f32, 1:f32)
                        } else {
                            smoothstep(clampf((cos_angle - cosCutoffAngle) / blendRange, 0, 1))
                        };
        color_mulf(intensity, factor)
    }

    Light{
        id = id,
        sample_direct = @ |_, from_surf| {
            let out_dir_ = vec3_sub(pos, from_surf.point);
            let dist     = vec3_len(out_dir_);
            let out_dir  = vec3_mulf(out_dir_, safe_div(1, dist));
            let color    = eval_dir(vec3_neg(out_dir));
            let cos      = -vec3_dot(out_dir, dir);

            let area_pdf = select(check_valid(vec3_neg(out_dir)), 1:f32, 0:f32);
            make_direct_sample(pos, out_dir, color, make_area_pdf(area_pdf), cos, dist)
        },
        sample_emission = @ |rnd| {
            let sample  = sample_uniform_cone(rnd.next_f32(), rnd.next_f32(), cosCutoffAngle);
            let out_dir = to_world(sample.dir);
            let color   = color_mulf(eval_dir(out_dir), 1 / (spot_area * sample.pdf));

            make_emission_sample(pos, out_dir, color, 1, spot_area * sample.pdf, sample.dir.z)
        },
        emission     = @ |_|    color_builtins::black,
        pdf_direct   = @ |_, _| make_area_pdf(0), // Does not matter
        pdf_emission = @ |_, _| make_emissive_pdf(1, spot_area * uniform_cone_pdf(cosCutoffAngle)),
        delta    = true,
        infinite = false
    }
}

fn @load_simple_spot_lights(count: i32, id_off: i32, device: Device) -> LightTable {
    let tbl = device.load_fixtable("SimpleSpotLight");

    let elem_s = 12; // Given in floats. See SpotLight.cpp
    LightTable {
        count = count,
        get   = @|id| {
            let data = shift_device_buffer(elem_s * id, elem_s, tbl);

            let position  = data.load_vec4(0);
            let direction = data.load_vec4(4);
            let intensity = data.load_vec4(8);

            let cutoff_angle  = position.w;
            let falloff_angle = direction.w;
            
            make_spot_light(id + id_off, vec4_to_3(position), vec4_to_3(direction), cutoff_angle, falloff_angle, vec3_to_color(vec4_to_3(intensity)))
        } 
    }
}