fn @make_spot_light(id: i32, pos: Vec3, dir: Vec3, cutoff_angle: f32, falloff_angle: f32, color: Color) -> Light {
    let frame           = make_orthonormal_mat3x3(dir);
    let cosCutoffAngle  = math_builtins::cos(cutoff_angle);
    let cosFalloffAngle = math_builtins::cos(falloff_angle);
    let cutoffRadius    = math_builtins::tan(cutoff_angle);
    let cutoffArea      = math_builtins::fmax[f32](0.001, 2 * flt_pi * (1 - cosCutoffAngle));

    fn @to_world(vec: Vec3) = mat3x3_mul(frame, vec);

    fn @eval_dir(out_dir: Vec3) {
        let cos_angle = vec3_dot(out_dir, dir);
        let factor    = select(cos_angle >= cosFalloffAngle, 1:f32, math_builtins::fmax[f32](0, (cos_angle - cosCutoffAngle) / (cosFalloffAngle - cosCutoffAngle)));
        color_mulf(color, factor / cutoffArea)
    }

    Light{
        id = id,
        sample_direct = @ |_, from_surf| {
            let out_dir_  = vec3_sub(pos, from_surf.point);
            let dist      = vec3_len(out_dir_);
            let out_dir   = vec3_mulf(out_dir_, safe_div(1, dist));
            let intensity = eval_dir(vec3_neg(out_dir));

            make_direct_sample(pos, out_dir, intensity, make_area_pdf(1), 1, dist)
        },
        sample_emission = @ |rnd| {
            let sample    = sample_uniform_disk(randf(rnd), randf(rnd), cutoffRadius);
            let out_dir   = vec3_normalize(to_world(vec3_add(sample.pos, make_vec3(0,0,1))));
            let intensity = eval_dir(out_dir);
            make_emission_sample(pos, out_dir, color_mulf(intensity, 1 / sample.pdf), 1, sample.pdf, 1)
        },
        emission     = @ |_|    color_builtins::black,
        pdf_direct   = @ |_, _| make_area_pdf(0), // Does not matter
        pdf_emission = @ |_, _| make_emissive_pdf(1, uniform_disk_pdf(cutoffRadius)),
        delta    = true,
        infinite = false
    }
}

fn @load_simple_spot_lights(count: i32, id_off: i32, device: Device) -> LightTable {
    let tbl = device.load_fixtable("SimpleSpotLight");

    let elem_s = 12; // Given in floats. See SpotLight.cpp
    LightTable {
        count = count,
        get   = @|id| {
            let data = shift_device_buffer(elem_s * id, elem_s, tbl);

            let position  = data.load_vec4(0);
            let direction = data.load_vec4(4);
            let intensity = data.load_vec4(8);

            let cutoff_angle  = position.w;
            let falloff_angle = direction.w;
            
            make_spot_light(id + id_off, vec4_to_3(position), vec4_to_3(direction), cutoff_angle, falloff_angle, vec3_to_color(vec4_to_3(intensity)))
        } 
    }
}