// Surface that emits light
struct AreaEmitter {
    sample_direct:   fn (Vec2, Vec3) -> (SurfaceElement, Pdf, f32),
    sample_emission: fn (Vec2)       -> (SurfaceElement, f32),
    normal:          fn (Vec2)       -> Vec3,
    pdf_direct:      fn (Vec2, Vec3) -> Pdf,
    pdf_emission:    fn (Vec2, Vec3) -> f32
}

fn @make_area_light(id: i32, area: AreaEmitter, color_f: Texture) = Light {
    id = id,
    sample_direct = @ |rnd, from_surf| {
        let (to_surf, pdf, weight) = area.sample_direct(make_vec2(randf(rnd), randf(rnd)), from_surf.point);
        let dir_ = vec3_sub(to_surf.point, from_surf.point);
        let dist = vec3_len(dir_);
        let dir  = vec3_mulf(dir_, safe_div(1, dist));
        let cos  = vec3_dot(dir, to_surf.face_normal) * select(from_surf.is_entering, -1:f32, 1:f32);
        let ctx  = make_emissive_shading_context(make_ray(from_surf.point, dir, 0, flt_max, ray_flag_shadow), to_surf, vec2_to_3(to_surf.tex_coords, 0));
        make_direct_sample(to_surf.point,
            dir,
            color_mulf(color_f(ctx), weight),
            pdf,
            cos,
            dist)
    },
    sample_emission = @ |rnd| {
        let (surf, area_pdf) = area.sample_emission(make_vec2(randf(rnd), randf(rnd)));
        let sample = sample_cosine_hemisphere(randf(rnd), randf(rnd));
        let weight = safe_div(1, area_pdf * sample.pdf);
        let ctx    = make_emissive_shading_context(make_zero_ray(), surf, vec2_to_3(surf.tex_coords, 0));
        make_emission_sample(surf.point,
            mat3x3_mul(surf.local, sample.dir),
            color_mulf(color_f(ctx), weight),
            area_pdf,
            sample.pdf,
            sample.dir.z)
    },
    emission     = color_f,
    pdf_direct   = @ |ray, surf| area.pdf_direct(surf.prim_coords, ray.org),
    pdf_emission = @ |ray, surf| make_emissive_pdf(area.pdf_emission(surf.prim_coords, ray.org), cosine_hemisphere_pdf(-vec3_dot(area.normal(surf.prim_coords), ray.dir))),
    delta    = false,
    infinite = false
};

fn @make_shape_area_emitter(entity: Entity, shape: Shape, mesh: TriMesh) -> AreaEmitter {
    let pmset = make_standard_pointmapperset(shape, entity);

    fn @sample(uv: Vec2) {
        let ux     = uv.x * (mesh.num_tris as f32);
        let f      = min(ux as i32, mesh.num_tris - 1);
        let (u, v) = sample_triangle(ux - (f as f32), uv.y);

        let surf = shape.surface_element_for_point(f, make_vec2(u, v), pmset);

        (surf, surf.inv_area / (mesh.num_tris as f32), (mesh.num_tris as f32) / surf.inv_area)
    }

    fn @pdf(uv: Vec2) {
        let ux     = uv.x * (mesh.num_tris as f32);
        let f      = min(ux as i32, mesh.num_tris - 1);
        let (u, v) = sample_triangle(ux - (f as f32), uv.y);

        let surf = shape.surface_element_for_point(f, make_vec2(u, v), pmset);

        surf.inv_area / (mesh.num_tris as f32)
    }

    AreaEmitter {
        sample_direct   = @|uv, _| {
            let (surf, pdfv, weight) = sample(uv);
            (surf, make_area_pdf(pdfv), weight)
        },
        sample_emission = @|uv| {
            let (surf, pdfv, _) = sample(uv);
            (surf, pdfv)
        },
        normal = @ |uv| {
            let ux     = uv.x * (mesh.num_tris as f32);
            let f      = min(ux as i32, mesh.num_tris - 1);
            let (u, v) = sample_triangle(ux - (f as f32), uv.y);
    
            let surf = shape.surface_element_for_point(f, make_vec2(u, v), pmset);
            surf.face_normal
        },
        pdf_direct   = @ |uv, _| make_area_pdf(pdf(uv)),
        pdf_emission = @ |uv, _| pdf(uv)
    }
}

// Ureña, C., Fajardo, M. and King, A. (2013),
// An Area‐Preserving Parametrization for Spherical Rectangles.
// Computer Graphics Forum, 32: 59-66. doi:10.1111/cgf.12151
struct SQ {
    o:  Vec3,
    n:  Vec3,
    x0: f32,
    y0: f32,
    z0: f32,
    x1: f32,
    y1: f32,
    b0: f32,
    b1: f32,
    k:  f32,
    s:  f32
}

fn @make_plane_area_emitter(origin: Vec3, x_axis: Vec3, y_axis: Vec3,
                            normal: Vec3, area: f32,
                            t0: Vec2, t1: Vec2, t2: Vec2, t3: Vec2) -> AreaEmitter {
    let inv_area = 1 / area;
    let width    = vec3_len(x_axis);
    let height   = vec3_len(y_axis);
    let ex       = vec3_mulf(x_axis, 1 / width);
    let ey       = vec3_mulf(y_axis, 1 / height);

    fn @compute_sq(from_point: Vec3) -> SQ {
        let dir = vec3_sub(origin, from_point);
		let x0  = vec3_dot(dir, ex);
		let y0  = vec3_dot(dir, ey);
		let z0_ = vec3_dot(dir, normal);
		let x1  = x0 + width;
		let y1  = y0 + height;

        let z0 = select(!math_builtins::signbit(z0_), -z0_, z0_);
        let n  = select(!math_builtins::signbit(z0_), vec3_neg(normal), normal);

		// Optimization used in Blender Cycles
	    let diff = vec4_sub(make_vec4(x0, y1, x1, y0), make_vec4(x1, y0, x0, y1));
		let nz_  = vec4_mul(make_vec4(y0, x1, y1, x0), diff);
		let nz   = vec4_div(nz_, vec4_map(vec4_add(vec4_mulf(vec4_mul(diff, diff), z0 * z0), vec4_mul(nz_, nz_)), @|x| math_builtins::sqrt(x)));

		// compute internal angles (gamma_i)
        fn safe_acos(a: f32) = math_builtins::acos(clampf(a, -1, 1));

		let g0 = safe_acos(-nz.x * nz.y);
		let g1 = safe_acos(-nz.y * nz.z);
		let g2 = safe_acos(-nz.z * nz.w);
		let g3 = safe_acos(-nz.w * nz.x);

		// compute predefined constants
		let b0 = nz.x;
		let b1 = nz.z;
		let k  = 2 * flt_pi - g2 - g3;
		let s  = g0 + g1 - k;

        SQ {
            o  = from_point,
            n  = n,
            x0 = x0,
            y0 = y0,
            z0 = z0,
            x1 = x1,
            y1 = y1,
            b0 = b0,
            b1 = b1,
            k  = k,
            s  = s
        }
    }

    fn @sample_direct(uv: Vec2, from_point: Vec3) {
		let sq = compute_sq(from_point);

        // 1. compute ’cu’
		let au = fmaf(uv.x, sq.s, sq.k);
		let fu = fmaf(math_builtins::cos(au), sq.b0, -sq.b1) / math_builtins::sin(au);
		let cu = clampf(math_builtins::copysign[f32](1.0, fu) / math_builtins::sqrt(sum_of_prod(fu, fu, sq.b0, sq.b0)), -1, 1);

		// 2. compute ’xu’
		let xu = clampf(-(cu * sq.z0) / math_builtins::sqrt(fmaf(-cu, cu, 1.0)), sq.x0, sq.x1);

		// 3. compute ’yv’
		let d   = math_builtins::sqrt(sum_of_prod(xu, xu, sq.z0, sq.z0));
		let h0  = sq.y0 / math_builtins::sqrt(sum_of_prod(d, d, sq.y0, sq.y0));
		let h1  = sq.y1 / math_builtins::sqrt(sum_of_prod(d, d, sq.y1, sq.y1));
		let hv  = fmaf(uv.y, h1 - h0, h0);
		let hv2 = hv * hv;
		let yv  = select(hv2 < 1 - 1e-6, (hv * d) / math_builtins::sqrt(1 - hv2), sq.y1);

		// 4. transform (xu,yv,z0) to entity local coords
		let p = vec3_add(sq.o, vec3_add(vec3_mulf(ex, xu), vec3_add(vec3_mulf(ey, yv), vec3_mulf(sq.n, sq.z0))));

		// 5. Get pdf
		let pdf_s = safe_div(1, sq.s);

        // Compute texture coordinates
        let tx = vec3_dot(vec3_sub(p, origin), ex) / width;
        let ty = vec3_dot(vec3_sub(p, origin), ey) / height;

        let c0 = vec2_lerp(t0, t1, tx);
        let c1 = vec2_lerp(t2, t3, tx);
        let t  = vec2_lerp(c0, c1, ty);

        let surf = SurfaceElement {
            is_entering = true,
            point       = p,
            face_normal = normal,
            inv_area    = inv_area,
            prim_coords = make_vec2(tx, ty),
            tex_coords  = t,
            local       = make_orthonormal_mat3x3(normal)
        };
        (surf, make_solid_pdf(pdf_s), sq.s)
    }

    fn @pdf_direct(_: Vec2, from_point: Vec3) {
		let sq    = compute_sq(from_point);
        let pdf_s = safe_div(1, sq.s);
		make_solid_pdf(pdf_s)
    }   

    fn @sample(uv: Vec2) {
        let p = vec3_add(vec3_add(vec3_mulf(x_axis, uv.x), vec3_mulf(y_axis, uv.y)), origin);
        
        let c0 = vec2_lerp(t0, t1, uv.x);
        let c1 = vec2_lerp(t2, t3, uv.x);
        let t  = vec2_lerp(c0, c1, uv.y);

        let surf = SurfaceElement {
            is_entering = true,
            point       = p,
            face_normal = normal,
            inv_area    = inv_area,
            prim_coords = uv,
            tex_coords  = t,
            local       = make_orthonormal_mat3x3(normal)
        };
        (surf, inv_area)
    }

    AreaEmitter {
        sample_direct   = @|uv, from_point| sample_direct(uv, from_point),
        sample_emission = @|uv| sample(uv),
        normal          = @|_| normal,
        pdf_direct      = pdf_direct,
        pdf_emission    = @|_,_| inv_area
    }
}

// Sphere sampler
fn @make_sphere_area_emitter(entity: Entity, sphere: Sphere) -> AreaEmitter {
    let shape = make_sphere_shape(sphere);
    let pmset = make_standard_pointmapperset(shape, entity);

    let area   = compute_ellipsoid_area(sphere, pmset);
    let origin = sphere.origin;

    fn @sample_direct(uv: Vec2, from_point: Vec3) {
        let glb_org = pmset.to_global_point(origin);

        // Sampler which makes sure the point lies on the visible side of the sphere
        let surf = sphere_compute_surface_element_for_normal(equal_area_square_to_sphere(uv), sphere, pmset);

        let p  = surf.point;
        let os = vec3_sub(from_point, glb_org);
        let ps = vec3_sub(from_point, p);

        // Check if the origin is closer then the actual point...
        let los = vec3_len2(os);
        let lps = vec3_len2(ps);
        
        if lps <= los {
            (surf, make_area_pdf(2 * surf.inv_area), 1 / (2 * surf.inv_area))
        } else {
            // Compute new point by offsetting it two times the radius
            let op = vec3_sub(p, glb_org);
            let np = vec3_sub(p, vec3_mulf(op, 2)); 

            // Compute normal, which is necessary for the other attributes
            let norm  = vec3_normalize(vec3_sub(np, glb_org));
            let nsurf = sphere_compute_surface_element_for_normal(norm, sphere, pmset);
            (nsurf, make_area_pdf(2 * surf.inv_area), 1 / (2 * surf.inv_area))
        }
    }

    fn @sample_emission(uv: Vec2) {
        let surf = sphere_compute_surface_element_for_normal(equal_area_square_to_sphere(uv), sphere, pmset);
        (surf, surf.inv_area)
    }

    fn @pdf_direct(_uv: Vec2, _:Vec3) {
        make_area_pdf(2 / area)
    }

    fn @pdf_emission(_uv: Vec2, _: Vec3) {
        1 / area
    }

    AreaEmitter {
        sample_direct   = sample_direct,
        sample_emission = sample_emission,
        normal          = @ |uv| equal_area_square_to_sphere(uv),
        pdf_direct      = pdf_direct,
        pdf_emission    = pdf_emission
    }
}

fn @load_simple_area_lights(count: i32, id_off: i32, device: Device, meshes: TriMeshTable) -> LightTable {
    let tbl = device.load_fixtable("SimpleAreaLight");

    let elem_s = 40; // Given in floats. See AreaLight.cpp (non-optimized)
    LightTable {
        count = count,
        get   = @|id| {
            let data = shift_device_buffer(elem_s * id, elem_s, tbl);

            let local_mat  = data.load_mat3x4(0);
            let global_mat = data.load_mat3x4(12);
            let m          = data.load_mat3x4(24); // This is faster due to aligned loading instructions
            let entity     = Entity {
                id         = id, // TODO
                local_mat  = local_mat,
                global_mat = global_mat,
                normal_mat = make_mat3x3(m.col(0),m.col(1),m.col(2)),
                shape_id   = bitcast[i32](m.col(3).x)
            };

            let mesh     = meshes(entity.shape_id);
            let shape    = make_trimesh_shape(mesh);
            let radiance = data.load_vec3(36);
    
            make_area_light(id + id_off, make_shape_area_emitter(entity, shape, mesh), @|_| vec3_to_color(radiance))
        } 
    }
}

fn @load_simple_plane_lights(count: i32, id_off: i32, device: Device) -> LightTable {
    let tbl = device.load_fixtable("SimplePlaneLight");

    let elem_s = 24; // Given in floats. See AreaLight.cpp (optimized)
    LightTable {
        count = count,
        get   = @|id| {
            let data = shift_device_buffer(elem_s * id, elem_s, tbl);

            let origin   = data.load_vec4(0);
            let x_axis   = data.load_vec4(4);
            let y_axis   = data.load_vec4(8);
            let t01      = data.load_vec4(12);
            let t23      = data.load_vec4(16);
            let radiance = data.load_vec4(20);

            let normal = make_vec3(origin.w, x_axis.w, y_axis.w);
            let area   = radiance.w;

            make_area_light(id + id_off, make_plane_area_emitter(vec4_to_3(origin), vec4_to_3(x_axis), vec4_to_3(y_axis),
                                                    normal, area,
                                                    make_vec2(t01.x, t01.y), make_vec2(t01.z, t01.w), make_vec2(t23.x, t23.y), make_vec2(t23.z, t23.w)), 
                            @|_| vec3_to_color(vec4_to_3(radiance)))
        } 
    }
}

fn @load_simple_sphere_lights(count: i32, id_off: i32, device: Device) -> LightTable {
    let tbl = device.load_fixtable("SimpleSphereLight");

    let elem_s = 40; // Given in floats. See AreaLight.cpp (optimized)
    LightTable {
        count = count,
        get   = @|id| {
            let data = shift_device_buffer(elem_s * id, elem_s, tbl);

            let local_mat  = data.load_mat3x4(0);
            let global_mat = data.load_mat3x4(12);
            let m          = data.load_mat3x4(24); // This is faster due to aligned loading instructions
            let entity     = Entity {
                id         = id, // TODO
                local_mat  = local_mat,
                global_mat = global_mat,
                normal_mat = make_mat3x3(m.col(0),m.col(1),m.col(2)),
                shape_id   = 0
            };

            let radiance = data.load_vec4(36);
            let origin   = m.col(3);
            let radius   = radiance.w;

            let sphere = Sphere{ origin = origin, radius = radius };
            make_area_light(id + id_off, make_sphere_area_emitter(entity, sphere), 
                            @|_| vec3_to_color(vec4_to_3(radiance)))
        } 
    }
}