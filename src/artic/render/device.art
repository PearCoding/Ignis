// Rendering device
// Methods marked with [Internal] are only for internal use and should not be called in random places
struct Device {
    // Internal id
    id: i32,

    //////////////// Pipeline    
    // [Internal] Run full pipeline with the given scene geometry and spi
    trace: fn (SceneGeometry, Pipeline, i32 /* spi */) -> (),

    // [Internal] Generate rays
    generate_rays: fn (RayEmitter, &mut i32, i32, i32, i32, i32, i32, i32) -> i32, 

    // [Internal] Make framebuffer changes present 
    present: fn () -> (),

    // Synchronize device
    sync: fn () -> (),

    // [Internal] Handle a miss shader
    handle_miss_shader: fn (Technique, i32, i32, i32, bool) -> (), 

    // [Internal] Handle a hit shader
    handle_hit_shader: fn (i32, Shader, Scene, Technique, i32, i32, i32, bool) -> (),

    // [Internal] Handle an advanced shadow shader (can be hit or miss)
    handle_advanced_shadow_shader: fn (Shader, Technique, i32, i32, i32, bool, bool) -> (), 
    
    //////////////// Utilities
    // Parallel one-dimensional range on the device
    parallel_range: fn (fn (i32) -> ()) -> fn (i32 /* start_x */, i32 /* end_x */) -> (),

    // Parallel two-dimensional range on the device
    parallel_range_2d: fn (fn (i32, i32) -> ()) -> fn (i32 /* start_x */, i32 /* end_x */, i32 /* start_y */, i32 /* end_y */) -> (),

    // Parallel reduce function for generic operator on the device
    parallel_reduce_i32: fn (i32 /* size */, fn (i32) -> i32 /* accessor */, fn (i32, i32) -> i32 /* operator */) -> i32,

    // Parallel reduce function for generic operator on the device
    parallel_reduce_f32: fn (i32 /* size */, fn (i32) -> f32 /* accessor */, fn (f32, f32) -> f32 /* operator */) -> f32,

    // Returns a callback function to create a virtual device buffer by providing a pointer on device memory
    get_device_buffer_accessor: fn () -> DeviceBufferAccessor,

    //////////////// Geometry
    // [Internal] Load the full scene bvh
    load_scene_bvh: fn () -> SceneBvh,

    // [Internal] Load the whole scene database
    load_scene_database: fn () -> SceneDatabase,

    // Load dynamic scene information
    // If possible, a constant scene information should be used instead
    // This is only useful for dynamic shaders
    load_scene_info: fn () -> SceneInfo,

    // [Internal] Load all entities as a dynamic table
    load_entity_table: fn (DynTable) -> EntityTable,

    // [Internal] Load all shapes as a dynamic table
    load_shape_table: fn (DynTable) -> ShapeTable,

    // [Internal] Load a specific shape given by precomputed properties and an offset within the dynamic table
    load_specific_shape: fn (i32 /* num_face */, i32 /* num_vert */, i32 /* num_norm */, i32 /* num_tex */, i32 /* off */, DynTable) -> Shape,

    // [Internal] Load a specific dyntable constructed in the loading process
    load_custom_dyntable: fn (&[u8] /* Filename */) -> DynTable,

    // [Internal] Load the whole shape bvh table from a dynamic table
    load_bvh_table: fn (DynTable, Image) -> BVHTable,

    // [Internal] Will load the rays given in 'tracing' mode
    load_rays: fn () -> &[StreamRay],

    //////////////// Resources
    // Load RGBA image from a file
    load_image: fn (&[u8] /* Filename */) -> Image,

    // Load (binary) RGBA image from a file, with hint that the given image is fully opaque
    load_packed_image: fn (&[u8] /* Filename */, bool) -> Image,

    // Load aov given by its id and the current spi
    load_aov_image: fn (i32 /* id */, i32 /* spi */) -> AOVImage,

    // Load buffer from a file and make it accessible for the host only
    load_host_buffer: fn (&[u8] /* Filename */) -> DeviceBuffer,
    // Load buffer from a file and make it accessible for the device only
    load_buffer: fn (&[u8] /* Filename */) -> DeviceBuffer,

    // Request a buffer given by the string identifier with a minimum size and accessible by the device only
    // Keep in mind that size is given in units of i32. This means the actual byte size is size * 4 on most machines
    request_buffer: fn (&[u8] /* String identifier */, i32 /* Size in units!! */, i32 /* Reserved for future use */) -> DeviceBuffer,

    // Handle given pointer as a device buffer.
    // This should only be used in very specific cases. No memory management is done from the runtime
    make_buffer: fn (&[u8] /* Pointer to data! */, i32 /* Size in units!! */) -> DeviceBuffer,

    // Dump buffer given by the string identifier to a file. Should only be used for debug purposes
    dump_buffer: fn (&[u8] /* String identifier */, &[u8] /* Filename */) -> (),

    // Special structure to allow print functions within devices. Should only be used for debug purposes
    request_debug_output: fn () -> DebugOutput,
}
