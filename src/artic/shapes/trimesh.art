// Triangle mesh with per-vertex/per-face attributes
struct TriMesh {
    vertices:   fn (i32) -> Vec3,
    normals:    fn (i32) -> Vec3,
    triangles:  fn (i32) -> (i32, i32, i32),
    tex_coords: fn (i32) -> Vec2,
    num_tris:   i32,
    bbox:       BBox
}

// Creates a geometry object from a triangle mesh definition
fn @make_trimesh_shape(tri_mesh: TriMesh) -> Shape {
    Shape {
        surface_element = @ |ray, hit, pmset| {
            let f_tris = tri_mesh.triangles;
            let f_v    = tri_mesh.vertices;
            let f_n    = tri_mesh.normals;
            let f_tx   = tri_mesh.tex_coords;

            let (i0, i1, i2) = @f_tris(hit.prim_id);

            let tri         = make_triangle(pmset.to_global_point(@f_v(i0)), pmset.to_global_point(@f_v(i1)), pmset.to_global_point(@f_v(i2)));
            let face_normal = tri.n;
            let inv_area    = 1 / tri.area;
            let normal      = vec3_normalize(pmset.to_global_normal(vec3_lerp2(@f_n(i0), @f_n(i1), @f_n(i2), hit.prim_coords.x, hit.prim_coords.y)));
            let is_entering = vec3_dot(ray.dir, face_normal) <= 0;
            let tex_coords  = vec2_lerp2(@f_tx(i0), @f_tx(i1), @f_tx(i2), hit.prim_coords.x, hit.prim_coords.y);

            SurfaceElement {
                is_entering = is_entering,
                point       = vec3_add(ray.org, vec3_mulf(ray.dir, hit.distance)),
                face_normal = if is_entering { face_normal } else { vec3_neg(face_normal) },
                inv_area    = inv_area,
                prim_coords = hit.prim_coords,
                tex_coords  = tex_coords,
                local       = make_orthonormal_mat3x3(if is_entering { normal } else { vec3_neg(normal) })
            }
        },
        surface_element_for_point = @ |prim_id, prim_coords, pmset| {
            let f_tris = tri_mesh.triangles;
            let f_v    = tri_mesh.vertices;
            let f_n    = tri_mesh.normals;
            let f_tx   = tri_mesh.tex_coords;

            let (i0, i1, i2) = @f_tris(prim_id);

            let gv0         = pmset.to_global_point(@f_v(i0));
            let gv1         = pmset.to_global_point(@f_v(i1));
            let gv2         = pmset.to_global_point(@f_v(i2));
            let tri         = make_triangle(gv0, gv1, gv2);
            let face_normal = tri.n;
            let inv_area    = 1 / tri.area;
            let point       = vec3_lerp2(gv0, gv1, gv2, prim_coords.x, prim_coords.y);
            let normal      = vec3_normalize(pmset.to_global_normal(vec3_lerp2(@f_n(i0), @f_n(i1), @f_n(i2), prim_coords.x, prim_coords.y)));
            let tex_coords  = vec2_lerp2(@f_tx(i0), @f_tx(i1), @f_tx(i2), prim_coords.x, prim_coords.y);

            SurfaceElement {
                is_entering = true,
                point       = point,
                face_normal = face_normal,
                inv_area    = inv_area,
                prim_coords = prim_coords,
                tex_coords  = tex_coords,
                local       = make_orthonormal_mat3x3(normal)
            }
        },
        local_bbox = tri_mesh.bbox
    }
}

type TriMeshTable  = fn (i32) -> TriMesh;

fn @make_trimesh_from_buffer(num_face: i32, num_verts: i32, num_norms: i32, _num_tex: i32, data: DeviceBuffer) -> TriMesh {
    let bbox = make_bbox(data.load_vec3(4), data.load_vec3(8));

    let v_start   = 12;
    let n_start   = v_start   + num_verts * 4;
    let ind_start = n_start   + num_norms * 4;
    let tex_start = ind_start + num_face  * 4;
    
    TriMesh {
        vertices   = @ |i:i32| data.load_vec3(v_start  + i*4),
        normals    = @ |i:i32| data.load_vec3(n_start  + i*4),
        triangles  = @ |i:i32| { let (i0,i1,i2,_) = data.load_int4(ind_start + i*4); (i0, i1, i2) },
        tex_coords = @ |i:i32| data.load_vec2(tex_start + i*2),
        num_tris   = num_face,
        bbox       = bbox
    }
}

fn @load_trimesh(data: DeviceBuffer) -> TriMesh {
    let (num_face, num_verts, num_norms, num_tex) = data.load_int4(0);
    make_trimesh_from_buffer(num_face, num_verts, num_norms, num_tex, data)
}

fn @load_trimesh_entry(device: Device, offset: u64, num_face: i32, num_verts: i32, num_norms: i32, num_tex: i32) -> TriMesh {
    let dtb = device.load_dyntable("shapes");

    let data = dtb.data(offset);
    make_trimesh_from_buffer(num_face, num_verts, num_norms, num_tex, data)
}

// ----------------------------------- Intersection stuff

struct Tri1 {
    v0: [f32 * 3],
    pad: i32,
    e1: [f32 * 3],
    pad2: i32,
    e2: [f32 * 3],
    prim_id: i32
}

struct Tri4 {
    v0: [[f32 * 4] * 3],
    e1: [[f32 * 4] * 3],
    e2: [[f32 * 4] * 3],
    n:  [[f32 * 4] * 3],
    prim_id: [i32 * 4]
}

fn @make_cpu_tri_prim(tris: &[Tri4]) -> fn (i32) -> Prim {
    @ |j| Prim {
        intersect = @ |i, ray| -> Option[Hit] {
            let tri_ptr = rv_align(&tris(j) as &i8, 32) as &Tri4;
            let v0  = make_vec3(tri_ptr.v0(0)(i), tri_ptr.v0(1)(i), tri_ptr.v0(2)(i));
            let e1  = make_vec3(tri_ptr.e1(0)(i), tri_ptr.e1(1)(i), tri_ptr.e1(2)(i));
            let e2  = make_vec3(tri_ptr.e2(0)(i), tri_ptr.e2(1)(i), tri_ptr.e2(2)(i));
            let n   = make_vec3(tri_ptr.n (0)(i), tri_ptr.n (1)(i), tri_ptr.n (2)(i));
            let tri = make_tri(v0, e1, e2, n);
            if let Option[(f32, f32, f32)]::Some(t, u, v) = intersect_ray_tri_cpu(false /*backface_culling*/, ray, tri) {    
                let prim_id = tri_ptr.prim_id(i) & 0x7FFFFFFF;
                make_option(make_hit(InvalidHitId, prim_id, t, make_vec2(u, v))) 
            } else {
                Option[Hit]::None
            }
        },
        is_valid = @ |i| tris(j).prim_id(i) != -1,
        is_last  = tris(j).prim_id(3) < 0,
        size     = 4
    }
}

fn @make_gpu_tri_prim(j: i32, tris: &[Tri1], is_nvvm: bool) -> Prim {
    let load4_f32 = @ |p: &addrspace(1)[simd[f32 * 4]], i: i32| if is_nvvm { nvvm_ldg4_f32(&p(i)) } else { p(i) };

    let simd_ptr = &tris(j) as &addrspace(1)[simd[f32 * 4]];
    let tri0     = load4_f32(simd_ptr, 0);
    let tri1     = load4_f32(simd_ptr, 1);
    let tri2     = load4_f32(simd_ptr, 2);
    let prim_id  = bitcast[i32](tri2(3));
    Prim {
        intersect = @ |_, ray| {
            let v0  = make_vec3(tri0(0), tri0(1), tri0(2));
            let e1  = make_vec3(tri1(0), tri1(1), tri1(2));
            let e2  = make_vec3(tri2(0), tri2(1), tri2(2));
            let n   = vec3_cross(e1, e2);
            let tri = make_tri(v0, e1, e2, n);
            if let Option[(f32, f32, f32)]::Some((t, u, v)) = intersect_ray_tri_gpu(false /*backface_culling*/, ray, tri) {
                make_option(make_hit(InvalidHitId/* Will be set later*/, prim_id & 0x7FFFFFFF, t, make_vec2(u, v)))
            } else {
                Option[Hit]::None
            }
        },
        is_valid = @ |_| true,
        is_last  = prim_id < 0,
        size     = 1
    }
}

fn @make_cpu_bvh4_tri4(nodes: &[Node4], tris: &[Tri4]) = PrimBvh {
    node = @ |j| make_cpu_node4(j, nodes),
    prim = make_cpu_tri_prim(tris),
    prefetch = @ |id| {
        let ptr = select(id < 0, &tris(!id) as &[u8], &nodes(id - 1) as &[u8]);
        cpu_prefetch_bytes(ptr, 128)
    },
    arity = 4
};

fn @make_cpu_bvh8_tri4(nodes: &[Node8], tris: &[Tri4]) = PrimBvh {
    node = @ |j| make_cpu_node8(j, nodes),
    prim = make_cpu_tri_prim(tris),
    prefetch = @ |id| {
        let ptr = select(id < 0, &tris(!id) as &[u8], &nodes(id - 1) as &[u8]);
        cpu_prefetch_bytes(ptr, 256)
    },
    arity = 8
};

fn @make_gpu_bvh2_tri1(nodes: &[Node2], tris: &[Tri1], is_nvvm: bool) -> PrimBvh {
    PrimBvh {
        node     = @ |j| @make_gpu_node(j, nodes, is_nvvm),
        prim     = @ |j| @make_gpu_tri_prim(j, tris , is_nvvm),
        prefetch = @ |_| (), // Not implemented
        arity    = 2
    }
}

fn @make_cpu_trimesh_bvh_table(device: Device, vector_width: i32) -> BVHTable {
    let dtb = device.load_fixtable("trimesh_primbvh"); 
    let acc = device.get_device_buffer_accessor();

    @ |off| {
        let ptr    = &(dtb.pointer(0) as &[f32])(off) as &[u8];
        let header = acc(ptr);
        let leaf_offset = header.load_i32(0);

        if vector_width >= 8 {
            let nodes = header.pointer(4) as &[Node8];
            let tris  = header.pointer(4 + leaf_offset * sizeof[Node8]() as i32 / 4) as &[Tri4];
            make_cpu_bvh8_tri4(nodes, tris)
        } else {
            let nodes = header.pointer(4) as &[Node4];
            let tris  = header.pointer(4 + leaf_offset * sizeof[Node4]() as i32 / 4) as &[Tri4];
            make_cpu_bvh4_tri4(nodes, tris)
        }
    } 
}

fn @make_gpu_trimesh_bvh_table(device: Device, is_nvvm: bool) -> BVHTable {
    let dtb = device.load_fixtable("trimesh_primbvh");
    let acc = device.get_device_buffer_accessor();

    @ |off| {
        let ptr    = &(dtb.pointer(0) as &[f32])(off) as &[u8];
        let header = acc(ptr);
        let leaf_offset = header.load_i32(0);

        let nodes = header.pointer(4) as &[Node2];
        let tris  = header.pointer(4 + leaf_offset * sizeof[Node2]() as i32 / 4) as &[Tri1];
        make_gpu_bvh2_tri1(nodes, tris, is_nvvm)
    }
}