fn @sphere_map_uv(dir: Vec3) -> Vec2 {
    let (theta, phi) = spherical_from_dir(make_vec3(dir.y, -dir.x, dir.z)); // Make sure it is the same coordinate system as the ico & uv sphere variant
    let v = theta / flt_pi;
    let u = phi / (2 * flt_pi);
    make_vec2(u, v)
}

fn @sphere_unmap_uv(uv: Vec2) -> Vec3 {
    let theta = uv.y * flt_pi;
    let phi   = uv.x * 2 * flt_pi;
    let dir = dir_from_spherical(theta, phi);
    make_vec3(dir.y, -dir.x, dir.z)
}

struct Sphere {
    origin: Vec3,
    radius: f32
}

// Compute (approximative) area of an ellipsoid created by mapping a sphere into a new coordinate system
fn @compute_ellipsoid_area(sphere: Sphere, pmset: PointMapperSet) {
    let l1 = vec3_len(pmset.to_global_direction(make_vec3(1, 0, 0)));
    let l2 = vec3_len(pmset.to_global_direction(make_vec3(0, 1, 0)));
    let l3 = vec3_len(pmset.to_global_direction(make_vec3(0, 0, 1)));
    let P  = 1.6:f32;
    4 * flt_pi * sphere.radius * math_builtins::pow((math_builtins::pow(l1*l2, P) + math_builtins::pow(l1*l3, P) + math_builtins::pow(l2*l3, P))/3, 1/P)
}

fn @sphere_compute_surface_element_for_normal(normal: Vec3, sphere: Sphere, pmset: PointMapperSet) {
    let point = vec3_add(sphere.origin, vec3_mulf(normal, sphere.radius));
    let uv    = sphere_map_uv(normal);
    let gn    = vec3_normalize(pmset.to_global_normal(normal));
    SurfaceElement {
        is_entering = true,
        point       = pmset.to_global_point(point),
        face_normal = gn,
        inv_area    = 1 / compute_ellipsoid_area(sphere, pmset),
        prim_coords = uv,
        tex_coords  = uv,
        local       = make_orthonormal_mat3x3(gn)
    }
}

// Creates a geometry object from a triangle mesh definition
fn @make_sphere_shape(sphere: Sphere) -> Shape {
    Shape {
        surface_element = @ |ray, hit, pmset| {
            let point  = vec3_add(ray.org, vec3_mulf(ray.dir, hit.distance));
            let dir    = vec3_sub(point, pmset.to_global_point(sphere.origin));
            let len    = vec3_len(dir);
            let normal = vec3_mulf(dir, 1 / len);

            let is_entering = true;//len < sphere.radius;

            SurfaceElement {
                is_entering = is_entering,
                point       = point,
                face_normal = normal,
                inv_area    = 1 / compute_ellipsoid_area(sphere, pmset),
                prim_coords = hit.prim_coords,
                tex_coords  = hit.prim_coords,
                local       = make_orthonormal_mat3x3(normal)
            }
        },
        surface_element_for_point = @ |_, prim_coords, pmset| {
            // TODO: Cross-check with surface_element if result is same for same input
            let normal = sphere_unmap_uv(prim_coords);
            sphere_compute_surface_element_for_normal(normal, sphere, pmset)
        },
        local_bbox = make_centered_bbox(sphere.origin, vec3_expand(2*sphere.radius))
    }
}

type SphereTable  = fn (i32) -> Sphere;

fn @load_sphere(data: DeviceBuffer) -> Sphere {
    let e0 = data.load_vec4(0);
    
    Sphere {
        origin = vec4_to_3(e0),
        radius = e0.w
    }
}

fn @load_sphere_entry(device: Device, offset: u64) -> Sphere {
    let dtb = device.load_dyntable("shapes");

    let data = dtb.data(offset);
    load_sphere(data)
}

fn @load_sphere_table(device: Device) -> SphereTable {
    let dtb = device.load_dyntable("shapes");
    @ |id| {
        let entry = dtb.lookup(id); // Assume only spheres will be accessed
        let data  = dtb.data(entry.offset);
        load_sphere(data)
    }
}

// ----------------------------------- Intersection stuff

fn @intersect_sphere(sphere: Sphere, ray: Ray) -> Option[Hit] {
    // C - O
    let L  = vec3_sub(ray.org, sphere.origin);
	let S  = -vec3_dot(L, ray.dir);
    let D2 = vec3_len2(ray.dir); // In contrary to many other implementations, our ray direction does not have to be normalized
	let L2 = vec3_len2(L);
	let R2 = sphere.radius * sphere.radius * D2;
	let M2 = L2 * D2 - S * S;

    // when object behind ray
	if (S < 0) || (M2 > R2) {
		return(Option[Hit]::None)
    }

	let Q = math_builtins::sqrt(R2 - M2);

	let t0_ = (S - Q) / D2;
	let t1_ = (S + Q) / D2;
    let (t0, t1) = select(t0_ > t1_, (t1_, t0_), (t0_, t1_));
	
    let tmin = select(t0 < ray.tmin, t1, t0);

	if tmin >= ray.tmin && tmin <= ray.tmax {
        let dir = vec3_mulf(vec3_add(L, vec3_mulf(ray.dir, tmin)), 1 / sphere.radius);
        make_option(make_hit(InvalidHitId, 0, tmin, sphere_map_uv(dir))) 
	} else {
        Option[Hit]::None
    }
}

fn @make_scene_local_handler_sphere(spheres: SphereTable) -> SceneTraverseLocalHandler {
    @|local_ray: Ray, leaf: EntityLeaf, _: bool| -> Hit {
        let sphere = spheres(leaf.shape_id);
        if let Option[Hit]::Some(hit) = intersect_sphere(sphere, local_ray) {
            hit
        } else {
            empty_hit(local_ray.tmax)
        }
    }
}
