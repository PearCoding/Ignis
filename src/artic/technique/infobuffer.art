// Special purpose technique to extract information useful for denoising and other post-processing techniques
// This technique will be injected around an existing technique

fn @wrap_infobuffer_renderer(device: Device, iter: i32, spi: i32, other: Technique) -> Technique {
    let aov_normal = device.load_aov_image("Normals", spi);
    let aov_albedo = device.load_aov_image("Albedo",  spi);
    // let aov_depth  = device.load_aov_image("Depth",   spi); // Not used for now

    if iter == 0 {
        aov_normal.mark_as_used();
        aov_albedo.mark_as_used();
        // aov_depth.mark_as_used();
    }

    fn @on_hit( ctx: ShadingContext
              , payload: RayPayload
              , mat: Material
        ) -> Option[Color] {
        if iter == 0 && ((ctx.ray.flags & ray_flag_camera) == ray_flag_camera) {
            // Compute albedo
            let out_dir = vec3_neg(ctx.ray.dir);
            let albedo  = mat.bsdf.albedo(out_dir);

            // Splat all
            aov_normal.splat(ctx.pixel, vec3_to_color(ctx.surf.local.col(2)));
            aov_albedo.splat(ctx.pixel, color_saturate(albedo, 1));
            // aov_depth.splat(ctx.pixel, make_gray_color(ctx.hit.distance));
        }

        other.on_hit(ctx, payload, mat)
    }

    other.{
        on_hit = on_hit
    }
}
