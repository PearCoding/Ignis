//#<include="driver/technique.art">
//#<include="core/colormap.art">

fn @make_debug_renderer(debug_mode: i32) -> Technique {
    Technique {
        on_hit    = @ |ctx, _, mat| {
            match debug_mode {
                1 => { // DEBUG_TANGENT
                    let n = ctx.surf.local.col(0);
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), math_builtins::fabs(n.z), 1))
                },
                2 => { // DEBUG_BITANGENT
                    let n = ctx.surf.local.col(1);
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), math_builtins::fabs(n.z), 1))
                },
                3 => { // DEBUG_GEOMETRY_NORMAL
                    let n = ctx.surf.face_normal;
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), math_builtins::fabs(n.z), 1))
                },
                4 => { // DEBUG_LOCAL_NORMAL
                    let n = vec3_normalize(ctx.coord.to_local_normal(ctx.surf.local.col(2)));
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), math_builtins::fabs(n.z), 1))
                },
                5 => { // DEBUG_LOCAL_TANGENT
                    let n = vec3_normalize(ctx.coord.to_local_normal(ctx.surf.local.col(0)));
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), math_builtins::fabs(n.z), 1))
                },
                6 => { // DEBUG_LOCAL_BITANGENT
                    let n = vec3_normalize(ctx.coord.to_local_normal(ctx.surf.local.col(1)));
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), math_builtins::fabs(n.z), 1))
                },
                7 => { // DEBUG_LOCAL_GEOMETRY_NORMAL
                    let n = vec3_normalize(ctx.coord.to_local_normal(ctx.surf.face_normal));
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), math_builtins::fabs(n.z), 1))
                },
                8 => { // DEBUG_TEXCOORDS
                    let n = ctx.surf.tex_coords;
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), 0, 1))
                },
                9 => { // DEBUG_PRIMCOORDS
                    let n = ctx.hit.prim_coords;
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), 0, 1))
                },
                10 => { // DEBUG_POINT
                    make_option(vec3_to_color(ctx.surf.point))
                },
                11 => { // DEBUG_LOCAL_POINT
                    make_option(vec3_to_color(ctx.coord.to_local_point(ctx.surf.point)))
                },
                12 => { // DEBUG_GENERATED_COORDS
                    make_option(vec3_to_color(ctx.coord.to_normalized_point(ctx.surf.point)))
                },
                13 => { // DEBUG_HIT_DISTANCE
                    make_option(make_gray_color(ctx.hit.distance))
                },
                14 => { // DEBUG_AREA
                    make_option(make_gray_color(safe_div(1, ctx.surf.inv_area)))
                },
                15 => { // DEBUG_PRIM_ID_RAW
                    let v = ctx.hit.prim_id as f32;
                    make_option(make_gray_color(v))
                },
                16 => { // DEBUG_PRIM_ID
                    make_option(colormap::palette(ctx.hit.prim_id))
                },
                17 => { // DEBUG_ENTITY_ID_RAW
                    let v = ctx.hit.ent_id as f32;
                    make_option(make_gray_color(v))
                },
                18 => { // DEBUG_ENTITY_ID
                    make_option(colormap::palette(ctx.hit.ent_id))
                },
                19 => { // DEBUG_MATERIAL_ID_RAW
                    let v = mat.id as f32;
                    make_option(make_gray_color(v))
                },
                20 => { // DEBUG_MATERAIL_ID
                    make_option(colormap::palette(mat.id))
                },
                21 => { // DEBUG_EMISSIVE
                    make_option(if mat.is_emissive { color_builtins::true_color } else { color_builtins::false_color })
                },
                22 => { // DEBUG_SPECULAR
                    make_option(if mat.bsdf.is_all_delta { color_builtins::true_color } else { color_builtins::false_color })
                },
                23 => { // DEBUG_ENTERING
                    make_option(if ctx.surf.is_entering { color_builtins::true_color } else { color_builtins::false_color })
                },
                24 => { // DEBUG_CHECK_BSDF
                    let out_dir = vec3_neg(ctx.ray.dir);
                    if mat.bsdf.is_all_delta {
                        // PDF & Eval of specular materials should always return black / zero
                        let evl = mat.bsdf.eval(vec3_reflect(out_dir, ctx.surf.local.col(2)), out_dir);
                        let pdf = mat.bsdf.pdf( vec3_reflect(out_dir, ctx.surf.local.col(2)), out_dir);

                        let pdf_diff = math_builtins::fabs(0 - pdf);
                        let w_diff   = math_builtins::fabs(0 - evl.r)
                                     + math_builtins::fabs(0 - evl.g)
                                     + math_builtins::fabs(0 - evl.b);

                        let pdf_good = select(pdf_diff <= flt_eps, 1:i32, 0:i32);
                        let w_good   = select(w_diff   <= flt_eps, 1:i32, 0:i32);
                        let index    = (w_good << 1) | pdf_good;
                        let color    = [color_builtins::red, color_builtins::orange, color_builtins::yellow, color_builtins::blue](index);
                        make_option(color)
                    } else {
                        let tmp_rnd = create_random_generator(hash_combine(hash_combine(hash_combine(hash_init(),
                                                    bitcast[u32](ctx.hit.distance)),
                                                bitcast[u32](ctx.hit.prim_coords.x)),
                                            bitcast[u32](ctx.hit.prim_coords.y)));
                        if let Option[BsdfSample]::Some(mat_sample) = mat.bsdf.sample(tmp_rnd, out_dir, false) {    
                            let pdf = mat.bsdf.pdf(mat_sample.in_dir, out_dir);
                            let evl = color_mulf(mat.bsdf.eval(mat_sample.in_dir, out_dir), safe_div(1, pdf));

                            let pdf_diff = math_builtins::fabs(mat_sample.pdf - pdf);
                            let w_diff   = math_builtins::fabs(mat_sample.color.r - evl.r)
                                         + math_builtins::fabs(mat_sample.color.g - evl.g)
                                         + math_builtins::fabs(mat_sample.color.b - evl.b);

                            let pdf_good = select(pdf_diff <= 0.001:f32, 1:i32, 0:i32);
                            let w_good   = select(w_diff   <= 0.001:f32, 1:i32, 0:i32);
                            let index    = (w_good << 1) | pdf_good;
                            let color    = [color_builtins::red, color_builtins::orange, color_builtins::yellow, color_builtins::blue](index);
                            make_option(color)
                        } else { 
                            make_option(color_builtins::pink)
                        }
                    }
                },
                25 => { // DEBUG_ALBEDO
                    let out_dir = vec3_neg(ctx.ray.dir);
                    make_option(mat.bsdf.albedo(out_dir))
                },
                26 => { // DEBUG_MEDIUM_INNER
                    make_option(if mat.interface.inner < 0 { color_builtins::black } else { colormap::palette(mat.interface.inner) })
                },
                27 => { // DEBUG_MEDIUM_OUTER
                    make_option(if mat.interface.outer < 0 { color_builtins::black } else { colormap::palette(mat.interface.outer) })
                },
                _ => { // DEBUG_NORMAL 
                    let n = ctx.surf.local.col(2);
                    make_option(make_color(math_builtins::fabs(n.x), math_builtins::fabs(n.y), math_builtins::fabs(n.z), 1))
                }
            }
        },
        on_miss        = TechniqueNoMissFunction,
        on_shadow      = TechniqueNoShadowFunction,
        on_bounce      = TechniqueNoBounceFunction,
        on_shadow_hit  = TechniqueNoShadowHitFunction,
        on_shadow_miss = TechniqueNoShadowMissFunction,
    }
}
