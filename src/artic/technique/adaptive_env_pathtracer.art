/* Pathtracer implementing "Adaptive Environment Sampling on CPU and GPU"
 * Asen Atanasov, Vladimir Koylazov, Blagovest Taskov, Alexander Soklev, Vassillen Chizov, and Jaroslav Křivánek:
 * Adaptive Environment Sampling on CPU and GPU. ACM SIGGRAPH 2018 Talks, 2018
 *
 * The algorithm splits into two distinct passes.
 * 1) A standard path tracer invoked once to learn the guiding structure.
 * 2) A standard path tracer with minimal modifications to use the previously learned guiding structure together with BSDF & NEE sampling.
 *    The guiding is applied on the BSDF path and will randomly select BSDF or our guiding approach.
 *    This pass will repeat until the end of the rendering process.
 *
 * The method is used in tandem with BSDF sampling.
 * It could replace NEE as well, but this would not benefit windows or other interfaces opaque to shadow rays and NEE is quite good enough on its own.
 */

// TODO: Future user parameter
static GridX =  50:i32;
static GridY = 100:i32;
static TileX =  32:i32;
static TileY =  16:i32;

// -------------------------------------------------
// Basic utils
struct AdaptiveEnvironmentUtils {
    to_grid:   fn (Vec3) -> (i32, i32),
    to_tile_i: fn (Vec3) -> (i32, i32),
    to_tile:   fn (Vec3) -> (f32, f32),
    from_tile: fn (f32, f32) -> Vec3,
}

fn @make_adaptive_env_utils(grid_x: i32, grid_y: i32, tile_x: i32, tile_y: i32, cam_pos: Vec3) -> AdaptiveEnvironmentUtils {
    fn @to_grid(pos: Vec3) -> (i32, i32) {
        let udir = vec3_sub(pos, cam_pos);
        if vec3_len2(udir) <= flt_eps { return (0, 0) }

        let dir          = vec3_normalize(udir);
        let (theta, phi) = spherical_from_dir(dir);
        
        let nx = grid_x as f32 * phi / (2 * flt_pi);
        let ny = grid_y as f32 * theta / flt_pi;

        (clamp(nx as i32, 0, grid_x - 1), clamp(ny as i32, 0, grid_y - 1))
    }
    fn @to_tile_i(dir: Vec3) -> (i32, i32) {
        let (theta, phi) = spherical_from_dir(dir);

        let nx = tile_x as f32 * phi / (2 * flt_pi); 
        let ny = tile_y as f32 * theta / flt_pi;

        (clamp(nx as i32, 0, tile_x - 1), clamp(ny as i32, 0, tile_y - 1))
    }
    fn @to_tile(dir: Vec3) -> (f32, f32) {
        // Normalized coordinates!
        let (theta, phi) = spherical_from_dir(dir);

        let nx = phi / (2 * flt_pi); 
        let ny = theta / flt_pi;

        (nx, ny)
    }
    fn @from_tile(ntx: f32, nty: f32) -> Vec3 {
        // Normalized coordinates!
        let phi   = ntx * 2 * flt_pi;
        let theta = nty     * flt_pi;

        dir_from_spherical(theta, phi)
    }

    AdaptiveEnvironmentUtils {
        to_grid   = to_grid, 
        to_tile_i = to_tile_i,
        to_tile   = to_tile,
        from_tile = from_tile
    }
}

// -------------------------------------------------
// 4D Guiding structure (Learning)

struct AdaptiveEnvironmentLearningCache {
    add: fn (/*pos*/ Vec3, /*dir*/ Vec3, /*contrib*/ f32) -> (),
    get: fn (/*pos*/ Vec3, /*dir*/ Vec3) -> f32, // Debug only
    sum: fn (/*pos*/ Vec3) -> f32, // Debug only
}

fn @compute_adaptive_env_buffer_size(grid_x: i32, grid_y: i32, tile_x: i32, tile_y: i32) = grid_x * grid_y * tile_x * tile_y;

fn @make_adaptive_env_learning_cache(device: Device, grid_x: i32, grid_y: i32, tile_x: i32, tile_y: i32, cam_pos: Vec3) -> AdaptiveEnvironmentLearningCache {
    let buffer = device.request_buffer("__apt_env_learning_cache", compute_adaptive_env_buffer_size(grid_x, grid_y, tile_x, tile_y) * 2, 0);
    let utils  = make_adaptive_env_utils(grid_x, grid_y, tile_x, tile_y, cam_pos);

    fn @get_index(gx: i32, gy: i32, tx: i32, ty: i32) = (((gy * grid_x + gx) * tile_y + ty) * tile_x + tx) * 2;

    AdaptiveEnvironmentLearningCache {
        add = @|pos: Vec3, dir: Vec3, contrib: f32| -> () {
            let (gx, gy) = utils.to_grid(pos);
            let (tx, ty) = utils.to_tile_i(dir);

            let index = get_index(gx, gy, tx, ty);
            buffer.add_atomic_f32(index + 0, contrib);
            buffer.add_atomic_i32(index + 1, 1);
        },
        get = @|pos: Vec3, dir: Vec3| -> f32 {
            let (gx, gy) = utils.to_grid(pos);
            let (tx, ty) = utils.to_tile_i(dir);

            let index = get_index(gx, gy, tx, ty);
            buffer.load_f32(index)
        },
        sum = @|pos: Vec3| -> f32 {
            let (gx, gy) = utils.to_grid(pos);

            let mut sum = 0:f32;
            for ty in safe_unroll(0, tile_y) {
                for tx in safe_unroll(0, tile_x) {
                    let index = get_index(gx, gy, tx, ty);
                    sum += buffer.load_f32(index);
                }
            }
            sum / (tile_x * tile_y) as f32
        }
    }
}

// -------------------------------------------------
// 4D Guiding structure (Sampling)

struct AdaptiveEnvironmentSamplingMap {
    eval:   fn (/*pos*/ Vec3, /*dir*/ Vec3) -> f32,
    sample: fn (/*pos*/ Vec3, /*uv*/ Vec2) -> (f32, Vec3),
    count:  fn (/*pos*/ Vec3) -> i32, // Number of samples in the current training iteration
}

fn @make_adaptive_env_sampling_cache(device: Device, grid_x: i32, grid_y: i32, tile_x: i32, tile_y: i32, cam_pos: Vec3) -> AdaptiveEnvironmentSamplingMap {
    let sampling_buffer_cond  = device.request_buffer("__apt_env_sampling_cache_cond",  compute_adaptive_env_buffer_size(grid_x, grid_y, tile_x, tile_y), 0);
    let sampling_buffer_marg  = device.request_buffer("__apt_env_sampling_cache_marg",  compute_adaptive_env_buffer_size(grid_x, grid_y,      1, tile_y), 0);
    let sampling_buffer_count = device.request_buffer("__apt_env_sampling_cache_count", compute_adaptive_env_buffer_size(grid_x, grid_y, 1, 1),           0);

    let get_cdf1d_marg = @|gx: i32, gy: i32|          cdf::make_cdf_1d_from_buffer(sampling_buffer_marg, tile_y, gy * grid_x * tile_y + gx * tile_y);
    let get_cdf1d_cond = @|gx: i32, gy: i32, ty: i32| cdf::make_cdf_1d_from_buffer(sampling_buffer_cond, tile_x, gy * grid_x * tile_y * tile_x + gx * tile_y * tile_x + ty * tile_x);
    
    let get_cdf2d = @|gx: i32, gy: i32| cdf::make_cdf_2d(get_cdf1d_marg(gx, gy), @|ty: i32| get_cdf1d_cond(gx, gy, ty));

    let utils = make_adaptive_env_utils(grid_x, grid_y, tile_x, tile_y, cam_pos);

    AdaptiveEnvironmentSamplingMap {
        eval = @|pos: Vec3, dir: Vec3| -> f32 {
            let (gx, gy)   = utils.to_grid(pos);
            let (ntx, nty) = utils.to_tile(dir);

            let cdf       = get_cdf2d(gx, gy);
            let cdf_pdf   = cdf.pdf_continuous(make_vec2(ntx, nty)).pdf;

            let sin_theta = math_builtins::sin(nty * flt_pi);
            safe_div(cdf_pdf, sin_theta * flt_pi * flt_pi * 2)
            // cdf_pdf
        },
        sample = @|pos: Vec3, uv: Vec2| -> (f32, Vec3) {
            let (gx, gy) = utils.to_grid(pos);

            let cdf    = get_cdf2d(gx, gy);
            let sample = cdf.sample_continuous(uv);
            // let cdf_pdf = cdf.pdf_continuous(sample.pos).pdf;

            let sin_theta = math_builtins::sin(sample.pos.y * flt_pi);
            let pdf       = safe_div(sample.pdf, sin_theta * flt_pi * flt_pi * 2);
            // let pdf = select(math_builtins::fabs(cdf_pdf-sample.pdf) < 1e-5, 1:f32, 0:f32);


            let dir = utils.from_tile(sample.pos.x, sample.pos.y);
            // let (kx,ky)= utils.to_tile(dir);
            // let pdf = select(math_builtins::fabs(kx-sample.pos.x) < 1e-5, 1:f32, 0:f32);

            (pdf, dir)
        },
        count = @|pos: Vec3| {
            let (gx, gy) = utils.to_grid(pos);
            sampling_buffer_count.load_i32(gy * grid_x + gx)
        }
    }
}

// -------------------------------------------------
// Ray payload for the learning pass

struct AdaptiveEnvLearningRayPayload {
    contrib:  Color, // Current contribution
    depth:    i32,   // Current depth
    eta:      f32,   // Current eta (n1 / n2)
    last_pos: Vec3,  // Last "rough" position
    last_dir: Vec3,  // Last "rough" direction
}

fn @write_adaptive_env_learning_raypayload(payload: RayPayload, pt: AdaptiveEnvLearningRayPayload) -> () {
    payload.set( 0, pt.contrib.r);
    payload.set( 1, pt.contrib.g);
    payload.set( 2, pt.contrib.b);
    payload.set( 3, pt.depth as f32);
    payload.set( 4, pt.eta);
    payload.set( 5, pt.last_pos.x);
    payload.set( 6, pt.last_pos.y);
    payload.set( 7, pt.last_pos.z);
    payload.set( 8, pt.last_dir.x);
    payload.set( 9, pt.last_dir.y);
    payload.set(10, pt.last_dir.z);
}

fn @unwrap_adaptive_env_learning_raypayload(payload: RayPayload) = AdaptiveEnvLearningRayPayload {
    contrib  = make_color(payload.get(0), payload.get(1), payload.get(2), 1),
    depth    = payload.get(3) as i32,
    eta      = payload.get(4),
    last_pos = make_vec3(payload.get(5), payload.get(6), payload.get(7)),
    last_dir = make_vec3(payload.get(8), payload.get(9), payload.get(10)),
};

fn @init_adaptive_env_learning_raypayload(payload: RayPayload) = write_adaptive_env_learning_raypayload(payload, AdaptiveEnvLearningRayPayload {
    contrib  = color_builtins::white,
    depth    = 1,
    eta      = 1,
    last_pos = make_vec3(0, 0, 0),
    last_dir = make_vec3(0, 0, 0),
});

// -------------------------------------------------
// Learning pass

fn @make_adaptive_env_learning_path_renderer(device: Device, max_path_len: i32, min_path_len: i32, spi: i32, light_selector: LightSelector, clamp_value: f32, _enable_nee: bool) -> Technique {
    let cam_pos  = registry::get_global_parameter_vec3("__camera_eye", make_vec3(0,0,0));
    let learning = make_adaptive_env_learning_cache(device, GridX, GridY, TileX, TileY, cam_pos);

    let offset : f32 = 0.001;
    let handle_color = if clamp_value > 0 {
        @|c: Color| color_saturate(c, clamp_value)
    } else {
        @|c: Color| c
    };

    // TODO: NEE

    fn @is_smooth(pdf: f32) = pdf < flt_pi /* Stupid constant */;

    fn @on_miss( ctx: ShadingContext
               , payload: RayPayload) -> Option[Color] {
        let mut inflights = 0;
        let mut color     = color_builtins::black;

        let pt = unwrap_adaptive_env_learning_raypayload(payload);

        for light_id in safe_unroll(0, light_selector.infinites.count) {
            let light = light_selector.infinites.get(light_id);
            // Do not include delta lights or finite lights
            if light.infinite && !light.delta {
                inflights += 1;

                let emit = light.emission(ctx);
                color    = color_add(color, handle_color(color_mul(pt.contrib, emit)));
            }
        }

        if inflights > 0 {
            if pt.depth > 1 && vec3_len2(pt.last_dir) > 0 /* We found atleast a single diffuse surface along the path! */ {
                // Only indirect connections to the environment map count
                let lum = color_average(color);
                learning.add(pt.last_pos, pt.last_dir, lum / spi as f32);
            }

            make_option(color)
        } else {
            Option[Color]::None
        }
    }

    fn @on_bounce( ctx: ShadingContext
                 , rnd: RandomGenerator
                 , payload: RayPayload
                 , mat: Material
                 ) -> Option[Ray] {
        let pt = unwrap_adaptive_env_learning_raypayload(payload);
        
        if pt.depth + 1 > max_path_len {
            return(Option[Ray]::None)
        }

        // Bounce
        let out_dir = vec3_neg(ctx.ray.dir);
        if let Option[BsdfSample]::Some(mat_sample) = mat.bsdf.sample(rnd, out_dir, false) {
            let contrib = color_mul(pt.contrib, mat_sample.color/* Pdf and cosine are already applied!*/);
            let rr_prob = if pt.depth + 1 > min_path_len { russian_roulette_pbrt(color_mulf(contrib, pt.eta * pt.eta), 0.95) } else { 1.0 };
            if rnd.next_f32() >= rr_prob {
                return(Option[Ray]::None)
            }

            let new_contrib = color_mulf(contrib, 1 / rr_prob);
            write_adaptive_env_learning_raypayload(payload, AdaptiveEnvLearningRayPayload {
                contrib  = new_contrib,
                depth    = pt.depth + 1,
                eta      = pt.eta * mat_sample.eta,
                last_pos = select(mat_sample.is_delta || !is_smooth(mat_sample.pdf), pt.last_pos, ctx.surf.point),
                last_dir = select(mat_sample.is_delta || !is_smooth(mat_sample.pdf), pt.last_dir, mat_sample.in_dir),
            });
            make_option(
                make_ray(ctx.surf.point, mat_sample.in_dir, offset, flt_max, ray_flag_bounce)
            )
        } else {
            Option[Ray]::None
        }
    }

    Technique {
        on_hit         = TechniqueNoHitFunction,
        on_miss        = on_miss,
        on_shadow      = TechniqueNoShadowFunction,
        on_bounce      = on_bounce,
        on_shadow_hit  = TechniqueNoShadowHitFunction,
        on_shadow_miss = TechniqueNoShadowMissFunction,
    }
}

// -------------------------------------------------
// Construction pass to generate a CDF
// TODO: Switch to a hierachical implementation!
fn @aept_handle_before_iteration_learning(device: Device, iter: i32) -> () {
    if iter != 0 { return() }

    let grid_x = GridX;
    let grid_y = GridY;
    let tile_x = TileX;
    let tile_y = TileY;
    let buffer = device.request_buffer("__apt_env_learning_cache", compute_adaptive_env_buffer_size(grid_x, grid_y, tile_x, tile_y) * 2, 0);

    for i in device.parallel_range(0, buffer.count) {
        buffer.store_f32(i, 0);
    }
    device.sync();
}

fn @aept_handle_after_iteration_learning(device: Device, iter: i32, last_learning_iteration: i32) -> () {
    if iter != last_learning_iteration { return() }

    let grid_x = GridX;
    let grid_y = GridY;
    let tile_x = TileX;
    let tile_y = TileY;

    let learning_buffer       = device.request_buffer("__apt_env_learning_cache"     ,  compute_adaptive_env_buffer_size(grid_x, grid_y, tile_x, tile_y) * 2, 0);
    let sampling_buffer_cond  = device.request_buffer("__apt_env_sampling_cache_cond",  compute_adaptive_env_buffer_size(grid_x, grid_y, tile_x, tile_y),     0);
    let sampling_buffer_marg  = device.request_buffer("__apt_env_sampling_cache_marg",  compute_adaptive_env_buffer_size(grid_x, grid_y,      1, tile_y),     0);
    let sampling_buffer_count = device.request_buffer("__apt_env_sampling_cache_count", compute_adaptive_env_buffer_size(grid_x, grid_y, 1, 1),               0);

    // TODO: This is a very naive implementation of the CDF construction on the GPU
    for i, j in device.parallel_range_2d(0, grid_x, 0, grid_y) {
        let m_id = j * grid_x * tile_y + i * tile_y;

        let mut counter = 0:i32;

        // Construct conditional
        let mut marg = 0:f32;
        for y in range(0, tile_y) {
            let c_id = m_id * tile_x + y * tile_x;

            let mut cond = 0:f32;
            for x in range(0, tile_x) {
                let contrib = learning_buffer.load_f32((c_id + x) * 2 + 0);
                let count   = learning_buffer.load_i32((c_id + x) * 2 + 1);
                // cond += math_builtins::fmax[f32](1e-4, select(count > 0, contrib / count as f32, 0:f32)); // Disable this if defensive sampling is already used!
                cond += select(count > 0, contrib / count as f32, 0:f32);
                sampling_buffer_cond.store_f32(c_id + x, cond);

                counter += count;
            }

            // Store marginal
            marg += cond /*/ tile_x as f32*/; // Division is to keep the number in a good range and hopefully not throw an overflow
            sampling_buffer_marg.store_f32(m_id + y, marg);

            // Normalize row
            if cond > flt_eps {
                for x in range(0, tile_x - 1) {
                    sampling_buffer_cond.store_f32(c_id + x, sampling_buffer_cond.load_f32(c_id + x) / cond);
                }
            } else {
                // Fallback to a uniform conditional
                // Skip last entry as it is explicitly set to 1
                for x in range(0, tile_x - 1) { 
                    sampling_buffer_cond.store_f32(c_id + x, (x + 1) as f32 / tile_x as f32);
                }
            }

            // Force 1 to make it numerically stable
            sampling_buffer_cond.store_f32(c_id + tile_x - 1, 1:f32);
        }

        // Normalize marginal
        if marg > flt_eps {
            for y in range(0, tile_y - 1) {
                sampling_buffer_marg.store_f32(m_id + y, sampling_buffer_marg.load_f32(m_id + y) / marg);
            }
        } else {
            // TODO: We should rather disable using the adaptive method
            // Skip last entry as it is explicitly set to 1
            for y in range(0, tile_y - 1) {
                sampling_buffer_marg.store_f32(m_id + y, (y + 1) as f32 / tile_y as f32);
            }
        }

        // Force 1 to make it numerically stable
        sampling_buffer_marg.store_f32(m_id + tile_y - 1, 1:f32);
        sampling_buffer_count.store_i32(j * grid_x + i, counter);
    }
    device.sync();

    // Set the following to true to dump the internal buffers. Use the aept.ipynb notebook to investigate
    if false {
        device.dump_buffer("__apt_env_learning_cache", "learning.bin");
        device.dump_buffer("__apt_env_sampling_cache_marg", "marg.bin");
        device.dump_buffer("__apt_env_sampling_cache_cond", "cond.bin");
        device.dump_buffer("__apt_env_sampling_cache_count", "count.bin");
    }
}

// -------------------------------------------------
// Ray payload for the learning pass

struct AdaptiveEnvSamplingRayPayload {
    inv_pdf: f32,   // Inverse BSDF pdf
    contrib: Color, // Current contribution
    depth:   i32,   // Current depth
    eta:     f32,   // Current eta (n1 / n2)
}

fn @write_adaptive_env_sampling_raypayload(payload: RayPayload, pt: AdaptiveEnvSamplingRayPayload) -> () {
    payload.set(0, pt.inv_pdf);
    payload.set(1, pt.contrib.r);
    payload.set(2, pt.contrib.g);
    payload.set(3, pt.contrib.b);
    payload.set(4, pt.depth as f32);
    payload.set(5, pt.eta);
}

fn @unwrap_adaptive_env_sampling_raypayload(payload: RayPayload) = AdaptiveEnvSamplingRayPayload {
    inv_pdf  = payload.get(0),
    contrib  = make_color(payload.get(1), payload.get(2), payload.get(3), 1),
    depth    = payload.get(4) as i32,
    eta      = payload.get(5),
};

fn @init_adaptive_env_sampling_raypayload(payload: RayPayload) = write_adaptive_env_sampling_raypayload(payload, AdaptiveEnvSamplingRayPayload {
    inv_pdf  = 0,
    contrib  = color_builtins::white,
    depth    = 1,
    eta      = 1,
});

// -------------------------------------------------
// Sampling pass
fn @make_adaptive_env_sampling_path_renderer(device: Device, max_path_len: i32, min_path_len: i32, spi: i32, light_selector: LightSelector, clamp_value: f32, enable_nee: bool) -> Technique {
    let offset  = 0.001 : f32;
    let cam_pos = registry::get_global_parameter_vec3("__camera_eye", make_vec3(0,0,0));

    // let learned = make_adaptive_env_learning_cache(device, GridX, GridY, TileX, TileY, cam_pos); // Debug only
    let guiding = make_adaptive_env_sampling_cache(device, GridX, GridY, TileX, TileY, cam_pos);
    
    let aov_guiding       = device.load_aov_image("Guiding", spi);
    let aov_guiding_pdf   = device.load_aov_image("Guiding PDF", spi);
    let aov_guiding_count = device.load_aov_image("Guiding Count", spi);
    aov_guiding.mark_as_used();
    aov_guiding_pdf.mark_as_used();
    aov_guiding_count.mark_as_used();
   
    let ae_prob = 0.75:f32; // TODO: Make this adaptive?

    let handle_color = if clamp_value > 0 {
        @|c: Color| color_saturate(c, clamp_value)
    } else {
        @|c: Color| c
    };

    fn @get_rr_prob(contrib: Color, pt: AdaptiveEnvSamplingRayPayload) = if pt.depth + 1 > min_path_len { russian_roulette_pbrt(color_mulf(contrib, pt.eta * pt.eta), 0.95) } else { 1.0 };
    fn @get_aeprob(mat: Material, pos: Vec3) = if mat.bsdf.is_all_delta { 
        0:f32 
    } else {
        select(guiding.count(pos) > 100, ae_prob, 0:f32)
    };

    fn @on_shadow( ctx: ShadingContext
                 , rnd: RandomGenerator
                 , payload: RayPayload
                 , _: RayPayload
                 , mat: Material
                 ) -> ShadowRay {
        if !enable_nee {
            return(ShadowRay::None)
        }

        // No shadow rays for specular materials
        if mat.bsdf.is_all_delta || light_selector.count == 0 {
            return(ShadowRay::None)
        }
        
        let pt = unwrap_adaptive_env_sampling_raypayload(payload);
        if pt.depth + 1 > max_path_len {
            return(ShadowRay::None)
        }

        let (light, light_select_pdf) = light_selector.sample(rnd, ctx.surf.point);

        let sample_direct = light.sample_direct;
        let light_sample  = @sample_direct(rnd, ctx.surf);

        let pdf_l_s = light_sample.pdf.as_solid(light_sample.cos, light_sample.dist * light_sample.dist) * light_select_pdf; // Pdf to sample the light based on NEE
        if pdf_l_s <= flt_eps {
            return(ShadowRay::None)
        }

        let in_dir  = light_sample.dir; 
        let out_dir = vec3_neg(ctx.ray.dir);

        if light_sample.cos > flt_eps {
            // The intensity is already divided by the pdf, adapt to the (possible) change of domain
            let factor = light_sample.pdf.value / pdf_l_s;

            let contrib = handle_color(color_mulf(
                color_mul(light_sample.intensity, color_mul(pt.contrib, mat.bsdf.eval(in_dir, out_dir))), factor));

            let mis = if light.delta { 
                1:f32
            } else {
                let ae_prob2 = get_aeprob(mat, ctx.surf.point);
                let rr_prob  = get_rr_prob(contrib, pt);
                let pdf_e_s  = mat.bsdf.pdf(in_dir, out_dir); // Pdf to sample the light based on bsdf
                let pdf_ae_s = guiding.eval(ctx.surf.point, in_dir); // Pdf to sample the light based on adaptive env sampling
                let mix_pdf  = (1 - ae_prob2) * pdf_e_s + ae_prob2 * pdf_ae_s;
                1 / (1 + rr_prob * mix_pdf / pdf_l_s)
            };

            let new_contrib = color_mulf(contrib, mis);

            // No contribution to add, so do not shoot the ray to begin with.
            if color_average(new_contrib) < flt_eps {
                return(ShadowRay::None)
            }

            if light.infinite {
                return(make_simple_shadow_ray(
                    make_ray(ctx.surf.point, in_dir, offset, flt_max, ray_flag_shadow),
                    new_contrib
                ))
            } else {
                return(make_simple_shadow_ray(
                    make_ray(ctx.surf.point, vec3_sub(light_sample.pos, ctx.surf.point), offset, 1 - offset, ray_flag_shadow),
                    new_contrib
                ))
            }
        }
        ShadowRay::None
    }

    fn @on_hit( ctx: ShadingContext
              , payload: RayPayload
              , mat: Material
              ) -> Option[Color] {
        let pt = unwrap_adaptive_env_sampling_raypayload(payload);

        // Hits on a light source
        if mat.is_emissive && ctx.surf.is_entering {
            let dot = -vec3_dot(ctx.ray.dir, ctx.surf.local.col(2));
            if dot > flt_eps { // Only contribute proper aligned directions
                let emit    = mat.emission(ctx);
                let pdf_s   = emit.pdf.as_solid(dot, ctx.hit.distance * ctx.hit.distance);
                let mis     = if enable_nee { 1 / (1 + pt.inv_pdf * light_selector.pdf(mat.light, ctx.ray.org) * pdf_s) } else { 1:f32 };
                let contrib = handle_color(color_mulf(color_mul(pt.contrib, emit.intensity), mis));
        
                return(make_option(contrib))
            }
        }

        if pt.depth == 1 {
            aov_guiding_count.splat(ctx.pixel, make_gray_color(guiding.count(ctx.surf.point) as f32));
        }

        Option[Color]::None
    }

    fn @on_miss( ctx: ShadingContext
               , payload: RayPayload) -> Option[Color] {
        let mut inflights = 0;
        let mut color     = color_builtins::black;

        for light_id in safe_unroll(0, light_selector.infinites.count) {
            let light = light_selector.infinites.get(light_id);
            // Do not include delta lights or finite lights
            if light.infinite && !light.delta {
                let pt = unwrap_adaptive_env_sampling_raypayload(payload);

                inflights += 1;

                let emit  = light.emission(ctx);
                let pdf   = light.pdf_direct(ctx.ray, make_invalid_surface_element());
                let pdf_s = pdf.as_solid(1, 1/* We assume infinite lights are always given in solid angle measure */);
                let mis   = if enable_nee { 1 / (1 + pt.inv_pdf * light_selector.pdf(light, ctx.ray.org) * pdf_s) } else { 1:f32 };
                color     = color_add(color, handle_color(color_mulf(color_mul(pt.contrib, emit), mis)));
            }
        }

        if inflights > 0 {
            make_option(color)
        } else {
            Option[Color]::None
        }
    }

    fn @on_bounce( ctx: ShadingContext
                 , rnd: RandomGenerator
                 , payload: RayPayload
                 , mat: Material
                 ) -> Option[Ray] {
        let pt = unwrap_adaptive_env_sampling_raypayload(payload);
        
        if pt.depth + 1 > max_path_len {
            return(Option[Ray]::None)
        }
    
        // Bounce
        let out_dir = vec3_neg(ctx.ray.dir);

        let ae_prob2 = get_aeprob(mat, ctx.surf.point);
        if rnd.next_f32() < ae_prob2 {
            let (pdf_ae, in_dir) = guiding.sample(ctx.surf.point, make_vec2(rnd.next_f32(), rnd.next_f32()));
    
            let eval_bsdf = mat.bsdf.eval(in_dir, out_dir);
            let pdf_bsdf  = mat.bsdf.pdf(in_dir, out_dir);
            if pdf_bsdf <= flt_eps {
                // Invalid direction
                if pt.depth == 1 {
                    aov_guiding.splat(ctx.pixel, color_builtins::blue);
                }
                return(Option[Ray]::None)
            }

            let mix_pdf = (1 - ae_prob2) * pdf_bsdf + ae_prob2 * pdf_ae;
            let contrib = color_mul(pt.contrib, color_mulf(eval_bsdf, 1 / mix_pdf));
            let rr_prob = get_rr_prob(contrib, pt);
            if rnd.next_f32() >= rr_prob {
                return(Option[Ray]::None)
            }

            if pt.depth == 1 {
                // aov_guiding_pdf.splat(ctx.pixel, make_gray_color(rr_prob * mix_pdf));
                aov_guiding_pdf.splat(ctx.pixel, make_gray_color(pdf_ae));
                aov_guiding.splat(ctx.pixel, color_builtins::green);
            }

            let inv_pdf     = 1 / (rr_prob * mix_pdf);
            let new_contrib = color_mulf(contrib, 1 / rr_prob);

            write_adaptive_env_sampling_raypayload(payload, AdaptiveEnvSamplingRayPayload {
                inv_pdf = inv_pdf,
                contrib = new_contrib,
                depth   = pt.depth + 1,
                eta     = pt.eta, // TODO
            });
            make_option(
                make_ray(ctx.surf.point, in_dir, offset, flt_max, ray_flag_bounce)
            )
        } else if let Option[BsdfSample]::Some(mat_sample) = mat.bsdf.sample(rnd, out_dir, false) {
            let pdf_ae  = guiding.eval(ctx.surf.point, mat_sample.in_dir);
            let mix_pdf = (1 - ae_prob2) * mat_sample.pdf + ae_prob2 * pdf_ae;

            let contrib = color_mul(pt.contrib, color_mulf(mat_sample.color, mat_sample.pdf / mix_pdf)/* Pdf and cosine are already applied!*/);
            let rr_prob = get_rr_prob(contrib, pt);
            if rnd.next_f32() >= rr_prob {
                return(Option[Ray]::None)
            }

            if pt.depth == 1 {
                // aov_guiding_pdf.splat(ctx.pixel, make_gray_color(rr_prob * mix_pdf));
                aov_guiding_pdf.splat(ctx.pixel, make_gray_color(pdf_ae));
                aov_guiding.splat(ctx.pixel, color_builtins::red);
            }

            let inv_pdf     = if mat_sample.is_delta { 0 } else { 1 / (rr_prob * mix_pdf) };
            let new_contrib = color_mulf(contrib, 1 / rr_prob);
            
            write_adaptive_env_sampling_raypayload(payload, AdaptiveEnvSamplingRayPayload {
                inv_pdf = inv_pdf,
                contrib = new_contrib,
                depth   = pt.depth + 1,
                eta     = pt.eta * mat_sample.eta,
            });
            make_option(
                make_ray(ctx.surf.point, mat_sample.in_dir, offset, flt_max, ray_flag_bounce)
            )
        } else {
            Option[Ray]::None
        }
    }

    Technique {
        on_hit         = on_hit,
        on_miss        = on_miss,
        on_shadow      = on_shadow,
        on_bounce      = on_bounce,
        on_shadow_hit  = TechniqueNoShadowHitFunction,
        on_shadow_miss = TechniqueNoShadowMissFunction,
    }
}
