fn @make_henyeygreenstein_phase(g: f32) -> PhaseFunction {
    let is_iso = ?g && math_builtins::fabs(g) <= 1e-3;

    let hg = @|cosTheta : f32| {
        let denom = 1 + g * g + 2 * g * cosTheta;
        safe_div(flt_inv_pi * (1 - g * g), 4 * denom * math_builtins::sqrt(denom))
    };

    PhaseFunction {
        eval   = @ |in_dir, out_dir| hg(absolute_cos(in_dir, out_dir)),
        pdf    = @ |in_dir, out_dir| {
            if is_iso { // Isotropic
                uniform_sphere_pdf()
            } else {    // Anisotropic
                hg(absolute_cos(in_dir, out_dir))
            }
        },
        sample = @ |rnd, out_dir| {
            if is_iso { // Isotropic
                let sample = sample_uniform_sphere(randf(rnd), randf(rnd));
                make_phase_sample(sample.dir, sample.pdf, 1)
            } else {    // Anisotropic
                let sqrTerm  = (1 - g * g) / (1 + g - 2 * g * randf(rnd));
                let cosTheta = -(1 + g * g - sqrTerm * sqrTerm) / (2 * g);
                let sinTheta = math_builtins::sqrt(math_builtins::fmax[f32](0, 1 - cosTheta * cosTheta));

                let phi = 2 * flt_pi * randf(rnd);
                let dir = make_vec3(sinTheta * math_builtins::cos(phi),
                                    sinTheta * math_builtins::sin(phi),
                                    cosTheta);

                make_phase_sample(dir, hg(absolute_cos(dir, out_dir)), 1)
            }
        }
    }
}