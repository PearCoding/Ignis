fn @ig_render_pipeline(device: Device, scene: Scene, payload_info: PayloadInfo) -> () {
    let pipeline = Pipeline {
        on_generate   = @ | gen_info | -> i32 {
            ignis_handle_ray_generation(gen_info.next_id, gen_info.size, gen_info.xmin, gen_info.ymin, gen_info.xmax, gen_info.ymax)
        },
        on_traverse_primary = @ | size | -> () {
            ignis_handle_traverse_primary(size)
        },
        on_traverse_secondary = @ | size | -> () {
            ignis_handle_traverse_secondary(size)
        },
        on_miss_shade = @ | first, last | {
            ignis_handle_miss_shader(first, last);
        },
        on_hit_shade  = @ | entity_id, first, last| {
            ignis_handle_hit_shader(entity_id, first, last);
        },
        on_advanced_shadow = @ | mat_id, first, last, is_hit | {
            ignis_handle_advanced_shadow_shader(mat_id, first, last, is_hit);
        }
    };

    ignis_handle_callback_shader(0/*BeforeIteration*/);
    device.trace(scene, pipeline, payload_info);
    ignis_handle_callback_shader(1/*AfterIteration*/);
}
