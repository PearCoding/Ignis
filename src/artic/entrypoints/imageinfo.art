struct ReduceOutputImageInfo {
    min: f32,
    max: f32,
    sum: f32
}

fn @ig_imageinfo_pipeline(device: Device, in_pixels: &[f32], width: i32, height: i32, settings: &ImageInfoSettings, output: &mut ImageInfoOutput) -> () {
    *output = ig_imageinfo_pipeline2(device, 
        make_aov_image_from_buffer(
            device.get_device_buffer_accessor()(in_pixels, width * height * 3),
            width,
            height
        ),
        settings);
}

fn @ig_imageinfo_pipeline2(device: Device, input: AOVImage, settings: &ImageInfoSettings) -> ImageInfoOutput {
    let width  = input.width;
    let height = input.height;
    let size   = width * height;
    let scale  = settings.scale;

    let get_color     = @|pixel: PixelCoord| color_mulf(color_map(input.get(pixel), @|a| select(math_builtins::isfinite(a), a, 0:f32)), scale);
    let get_luminance = @|pixel: PixelCoord| color_luminance(get_color(pixel)); // Only luminance

    let reduce_handler = device.parallel_reduce_handler;
    let reduce_output  = reduce[ReduceOutputImageInfo](reduce_handler, size,
        @|i:i32| { let a = get_luminance(make_pixelcoord_from_linear(i, width, height, 0, 0)); ReduceOutputImageInfo{ min=a, max=a, sum=a } },
        @|a, b|  { ReduceOutputImageInfo{ min=math_builtins::fmin(a.min, b.min), max=math_builtins::fmax(a.max, b.max), sum=(a.sum + b.sum) } }
    );

    let mut output = ImageInfoOutput{
        min         = reduce_output.min, max         = reduce_output.max, avg         = reduce_output.sum / size as f32, 
        soft_min    = 0,                 soft_max    = 0,                 median      = 0, 
        inf_counter = 0,                 nan_counter = 0,                 neg_counter = 0
    };

    let global_data = device.request_buffer("__imageinfo_stats", 8, 0);
    let mut host_arr : [i32 * 8];
    for i in unroll(0, 8) {
        host_arr(i) = 0;
    }
    host_arr(0) = bitcast[i32](flt_max);

    global_data.copy_from_host(0, 8, host_arr);

    let do_soft = width > 10 && height > 10;
    if do_soft {
        stats::begin_section(stats::Section::ImageInfoPercentile);
        // TODO: This can be optimized further
        // Window based percentile setup (which is just approximative)
        let median_factor = safe_div(1, ((width - 2) * (height - 2)) as f32);
        for (x, y) in device.parallel_range_2d(1, width - 1, 1, height - 1) {
            // First get the window information
            let mut window : [f32 * 9];
            for i in unroll(0, 3) {
                for j in unroll(0, 3) {
                    let ind = (y+i-1) * width + (x+j-1);
                    window(i*3+j) = get_luminance(make_pixelcoord_from_linear(ind, width, height, 0, 0));
                }
            }
            
            // Sort the window
            batcher_sort(9, @|i, j| {
                if window(i) > window(j) {
                    swap(&mut window(i), &mut window(j));
                }
            });

            // Put percentile information
            let soft_min = window(1);
            let soft_max = window(7);
            let median   = window(4);

            if soft_min >= 0 { global_data.min_atomic_i32(0, bitcast[i32](soft_min)); }
            if soft_max >= 0 { global_data.max_atomic_i32(1, bitcast[i32](soft_max)); }
            if median   >= 0 { global_data.add_atomic_f32(2, median * median_factor); }
        }
        stats::end_section(stats::Section::ImageInfoPercentile);
    } else {
        // Given window is not large enough, use the fixed variants
        output.soft_min = output.min;
        output.soft_max = output.max;
        output.median   = output.avg;
    }

    // Check pixels
    if settings.acquire_error_stats {
        stats::begin_section(stats::Section::ImageInfoError);
        for i in device.parallel_range(0, width * height) {
            let pixel = make_pixelcoord_from_linear(i, width, height, 0, 0);
            let c = input.get(pixel);

            let is_nan = math_builtins::isnan(c.r) || math_builtins::isnan(c.g) || math_builtins::isnan(c.b);
            let is_inf = !is_nan && (!math_builtins::isfinite(c.r) || !math_builtins::isfinite(c.g) || !math_builtins::isfinite(c.b));
            let is_neg = math_builtins::signbit(c.r) || math_builtins::signbit(c.g) || math_builtins::signbit(c.b);

            if is_inf { global_data.add_atomic_i32(3, 1); }
            if is_nan { global_data.add_atomic_i32(4, 1); }
            if is_neg { global_data.add_atomic_i32(5, 1); }
        }
        stats::end_section(stats::Section::ImageInfoError);
    }

    device.sync();

    global_data.copy_to_host(0, 8, host_arr);

    if do_soft {
        output.soft_min = bitcast[f32](host_arr(0));
        output.soft_max = bitcast[f32](host_arr(1));
        output.median   = bitcast[f32](host_arr(2));
    }

    output.inf_counter = host_arr(3);
    output.nan_counter = host_arr(4);
    output.neg_counter = host_arr(5);

    if settings.acquire_histogram {
        stats::begin_section(stats::Section::ImageInfoHistogram);
        // Setup histogram
        let histogram_start     = select(output.min < output.max, output.min, 0:f32);
        let histogram_end       = select(output.min < output.soft_max, output.soft_max, select(output.min < output.max, output.max, histogram_start + 1));
        let histogram_range     = math_builtins::fmax[f32](0, histogram_end - histogram_start);
        let histogram_bin_count = settings.bins;
        let histogram_factor    = safe_div(histogram_bin_count as f32, histogram_range);

        let dev_hist_size = round_up(histogram_bin_count, 4);
        let dev_histogram_r = device.request_buffer("__imageinfo_histogram_r", dev_hist_size, 0);
        let dev_histogram_g = device.request_buffer("__imageinfo_histogram_g", dev_hist_size, 0);
        let dev_histogram_b = device.request_buffer("__imageinfo_histogram_b", dev_hist_size, 0);
        let dev_histogram_l = device.request_buffer("__imageinfo_histogram_l", dev_hist_size, 0);

        // Reset histogram
        for i in device.parallel_range(0, dev_hist_size / 4) {
            dev_histogram_r.store_int4(i * 4, 0, 0, 0, 0);
            dev_histogram_g.store_int4(i * 4, 0, 0, 0, 0);
            dev_histogram_b.store_int4(i * 4, 0, 0, 0, 0);
            dev_histogram_l.store_int4(i * 4, 0, 0, 0, 0);
        }
        device.sync();

        // Map all components to the given min & soft max, even while RGB might be larger
        fn @get_bin(v: f32) = clamp(((v - histogram_start) * histogram_factor) as i32, 0, histogram_bin_count - 1);

        // Update histogram
        for i in device.parallel_range(0, size) {
            let c = get_color(make_pixelcoord_from_linear(i, width, height, 0, 0));
            let L = color_luminance(c);

            dev_histogram_r.add_atomic_i32(get_bin(c.r), 1);
            dev_histogram_g.add_atomic_i32(get_bin(c.g), 1);
            dev_histogram_b.add_atomic_i32(get_bin(c.b), 1);
            dev_histogram_l.add_atomic_i32(get_bin(L), 1);
        }
        device.sync();

        // Copy histogram to host
        dev_histogram_r.copy_to_host(0, histogram_bin_count, settings.histogram_r);
        dev_histogram_g.copy_to_host(0, histogram_bin_count, settings.histogram_g);
        dev_histogram_b.copy_to_host(0, histogram_bin_count, settings.histogram_b);
        dev_histogram_l.copy_to_host(0, histogram_bin_count, settings.histogram_l);
        device.sync();
        stats::end_section(stats::Section::ImageInfoHistogram);
    }

    output
}