enum FisheyeAspectMode {
    Circular,
    Cropped,
    Full
}

// Creates a fishlens camera
fn @make_fishlens_camera(eye: Vec3, dir: Vec3, up: Vec3, w: i32, h: i32, mode: FisheyeAspectMode, tmin: f32, tmax: f32, mask: bool) -> Camera {
    let right = vec3_normalize(vec3_cross(dir, up));
    let view  = make_mat3x3(right, up, dir);
    let fov   = flt_pi;
    let asp   = w as f32 / h as f32;

    // Select aspect ratio mode
    let (xasp, yasp) = match(mode) {
        FisheyeAspectMode::Circular => {
            let xasp = if asp < 1 { 1 } else { asp };
            let yasp = if asp > 1 { 1 } else { asp };
            (xasp, yasp)
        },
        FisheyeAspectMode::Cropped => {
            let xasp = if asp < 1 { 1 / asp } else { 1 };
            let yasp = if asp > 1 { 1 / asp } else { 1 };
            (xasp, yasp)
        },
        FisheyeAspectMode::Full => {
            let diameter = math_builtins::sqrt(asp * asp + 1) * h as f32;
            let min_s	 = min(w, h);
            let f        = diameter / min_s as f32;
            let xasp = if asp < 1 { f } else { f / asp };
            let yasp = if asp > 1 { f } else { f * asp };
            (xasp, yasp)
        }
    };

    fn @compute_d(x:f32, y:f32) -> Option[Vec3] {
        let nx    = x * xasp;
        let ny    = y * yasp;
        let r	  = math_builtins::sqrt(nx * nx + ny * ny);
		let theta = r * fov / 2;

        if mask && r > 1 { return(Option[Vec3]::None) }

		let sT = math_builtins::sin(theta);
        let cT = math_builtins::cos(theta);
        let sP = if r < flt_eps { 0 } else { ny / r };
        let cP = if r < flt_eps { 0 } else { nx / r };
        let nd = make_vec3(sT*cP, sT*sP, cT);
        make_option(mat3x3_mul(view, nd))
    }
    
    fn @pos_to_pixel(pos: Vec3) -> Option[PixelCoord] {
        let dir = vec3_normalize(vec3_sub(pos, eye)); // FROM camera to point
        let un  = mat3x3_left_mul(view, dir);

        let theta    = math_builtins::acos(un.z);
        let sinTheta = math_builtins::sqrt(1 - un.z * un.z);

        let r = 2 * theta / fov;

        if mask && r > 1 { return(Option[PixelCoord]::None) }

        let sx = safe_div(un.x * r, sinTheta);
        let sy = safe_div(un.y * r, sinTheta);

        let nx = sx / xasp;
        let ny = sy / yasp;

        if nx >= -1 && nx <= 1 && ny >= -1 && ny <= 1 {
            make_option(make_pixelcoord_from_normalized(nx, ny, w, h))
        } else {
            Option[PixelCoord]::None
        }
    }

    Camera {
        generate_ray = @ |_, coord| {
            if let Option[Vec3]::Some(dir) = compute_d(coord.nx, coord.ny) {
                make_option(make_ray(eye, dir, tmin, tmax, ray_flag_camera))
            } else {
                Option[Ray]::None
            }
        },
        sample_pixel = @ |_rnd, pos| {
            if let Option[PixelCoord]::Some(coord) = pos_to_pixel(pos) {
                if let Option[Vec3]::Some(dir) = compute_d(coord.nx, coord.ny) {
                    let ray   = make_ray(eye, dir, tmin, tmax, ray_flag_camera);
                    let s_dir = vec3_sub(ray.org, pos);

                    let cos = vec3_dot(dir, ray.dir);
                    let jacobian = 1 / math_builtins::fabs(cos * cos * cos); // TODO: Check this

                    make_option(CameraSample{
                        coord  = coord,
                        dir    = s_dir, // From pos to camera
                        weight = make_gray_color(jacobian),
                        pdf    = 1,
                    })
                } else{
                    Option[CameraSample]::None
                }
            } else {
                Option[CameraSample]::None
            }
        },
        pos_to_pixel = pos_to_pixel,
        differential = @ |coord| {
            let d0  = if let Option[Vec3]::Some(dir) = compute_d(coord.nx, coord.ny) { dir } else { vec3_expand(0) };
            let d1x = if let Option[Vec3]::Some(dir) = compute_d(coord.nx + 1 / w as f32, coord.ny) { dir } else { vec3_expand(0) };
            let d1y = if let Option[Vec3]::Some(dir) = compute_d(coord.nx, coord.ny + 1 / h as f32) { dir } else { vec3_expand(0) };
            
            (
                vec3_mulf(vec3_sub(d1x, d0), w as f32),
                vec3_mulf(vec3_sub(d1y, d0), h as f32)
            )
        }
    }
}
