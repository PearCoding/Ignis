// Compute scale based on horizontal field of view and aspect ratio (w/h)
fn @compute_scale_from_hfov(fov: f32, aspect: f32) -> Vec2 {
    let sw = math_builtins::tan(fov / 2);
    let sh = sw / aspect;
    make_vec2(sw, sh)
}

// Compute scale based on vertical field of view and aspect ratio (w/h)
fn @compute_scale_from_vfov(fov: f32, aspect: f32) -> Vec2 {
    let sh = math_builtins::tan(fov / 2);
    let sw = sh * aspect;
    make_vec2(sw, sh)
}

// Return pixel coordinate from a point for a perspective projection
fn @perspective_pos_to_pixel(v: Vec3, eye: Vec3, view: Mat3x3, scale: Vec2, w: i32, h: i32) -> Option[PixelCoord] {
    let dir = (vec3_sub(v, eye)); // FROM camera to point
    let un  = mat3x3_left_mul(view, dir);
    let d   = un.z;
    let n   = make_vec2(un.x / (d * scale.x), un.y / (d * scale.y));
    if n.x >= -1 && n.x <= 1 && n.y >= -1 && n.y <= 1 {
        make_option(make_pixelcoord_from_normalized(n.x, n.y, w, h))
    } else {
        Option[PixelCoord]::None
    }
}

// Creates a perspective camera
fn @make_perspective_camera(eye: Vec3, dir: Vec3, up: Vec3, scale: Vec2, w: i32, h: i32, tmin: f32, tmax: f32) -> Camera {
    let right = vec3_normalize(vec3_cross(dir, up));
    let view  = make_mat3x3(right, up, dir);

    // nx, ny in [-1, 1]
    fn @compute_dir(nx: f32, ny: f32) = vec3_normalize(mat3x3_mul(view, make_vec3(scale.x * nx, scale.y * ny, 1)));

    let image_area = 1:f32;//4 * scale.x * scale.y * (w * h) as f32; // Area total image area per pixel in world space without projection due to the normalization

    Camera {
        generate_ray = @ |_, coord| {
            let d = compute_dir(coord.nx, coord.ny);
            make_ray(eye, d, tmin, tmax, ray_flag_camera)
        },
        sample_pixel = @ |_, pos| {
            if let Option[PixelCoord]::Some(coord) = perspective_pos_to_pixel(pos, eye, view, scale, w, h) {
                let s_dir = vec3_sub(eye, pos);
                // let cos   = safe_div(vec3_dot(s_dir, dir), vec3_len(s_dir));
                let jacobian = safe_div(image_area, 1/* math_builtins::fabs(cos*cos)*/);
                make_option(CameraSample{
                    coord  = coord,
                    dir    = s_dir,
                    weight = make_gray_color(jacobian),
                    pdf    = 1,
                })
            } else {
                Option[CameraSample]::None
            }
        },
        pos_to_pixel = @ |pos| perspective_pos_to_pixel(pos, eye, view, scale, w, h),
        differential = @ |_| {
            (
                vec3_mulf(right, scale.x),
                vec3_mulf(up, scale.y)
            )
        }
    }
}

// Creates a perspective camera with depth of field
fn @make_perspective_dof_camera(eye: Vec3, dir: Vec3, up: Vec3, scale: Vec2, aperture_radius: f32, focal_length: f32, w: i32, h: i32, tmin: f32, tmax: f32) -> Camera {
    let right = vec3_normalize(vec3_cross(dir, up));
    let view  = make_mat3x3(right, up, dir);

    fn @gen_ray(rnd: RandomGenerator, coord: PixelCoord ) {
        let global_dir = vec3_normalize(mat3x3_mul(view, make_vec3(scale.x * coord.nx, scale.y * coord.ny, 1)));
        let focus_pos  = vec3_mulf(global_dir, focal_length);

        let aperature_coord = vec2_mulf(square_to_concentric_disk(make_vec2(rnd.next_f32(), rnd.next_f32())), aperture_radius);
        let aperature_pos   = mat3x3_mul(view, make_vec3(aperature_coord.x, aperature_coord.y, 0));
        let d               = vec3_normalize(vec3_sub(focus_pos, aperature_pos));

        make_ray(vec3_add(eye, aperature_pos), d, tmin, tmax, ray_flag_camera)
    }

    Camera {
        generate_ray = gen_ray,
        sample_pixel = @ |rnd, pos| {
            if let Option[PixelCoord]::Some(coord) = perspective_pos_to_pixel(pos, eye, view, scale, w, h) {
                let ray = gen_ray(rnd, coord);
                let s_dir = vec3_sub(ray.org, pos);
                // let inv_area = if aperture_radius > flt_eps { 1 / (flt_pi * aperture_radius * aperture_radius) } else { 1:f32 };

                let cos = vec3_dot(dir, ray.dir);
                let jacobian = 1 / math_builtins::fabs(cos * cos * cos);

                make_option(CameraSample{
                    coord  = coord,
                    dir    = s_dir, // From pos to camera
                    weight = make_gray_color(jacobian),
                    pdf    = 1,
                })
            } else {
                Option[CameraSample]::None
            }
        },
        pos_to_pixel = @ |pos| perspective_pos_to_pixel(pos, eye, view, scale, w, h),
        differential = @ |_| {
            (
                // TODO: We ignore the lens effect here
                vec3_mulf(right, scale.x),
                vec3_mulf(up, scale.y)
            )
        }
    }
}