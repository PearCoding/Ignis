struct GlareSettings {
    mul:                  f32,
    scale:                f32,
    vertical_illuminance: f32 // Set < 0 to compute it automatically
}

struct ReduceOutputInfo {
    total_omega: f32,
    total_lum:   f32,
    max_lum:     f32,
    e_v:         f32,
}

struct ReduceOutputGlare {
    source_pixels: i32,
    source_omega:  f32,
    source_lum:    f32,
    source_x:      f32,
    source_y:      f32,
}

// An evalglare.c implementation using the GPU.
// The biggest difference to the original code, beyond the missing features, is that it only supports a single glare source!
fn @compute_glare(device: Device, camera: Camera, input: AOVImage, source_luminance: DeviceBuffer, settings: &GlareSettings) {
    let width  = input.width;
    let height = input.height;

    //let cam_eye = registry::get_global_parameter_vec3("__camera_eye", vec3_expand(0));
    let cam_up  = vec3_normalize(registry::get_global_parameter_vec3("__camera_up", vec3_expand(0)));
    let cam_dir = vec3_normalize(registry::get_global_parameter_vec3("__camera_dir", vec3_expand(0)));

    let cam_hv = vec3_normalize(vec3_cross(cam_dir, cam_up));
    let cam_vv = vec3_normalize(vec3_cross(cam_dir, cam_hv));

    fn @check_if_valid(pixel: PixelCoord) = if let Option[Ray]::Some(_) = camera.generate_ray(create_random_generator(42), pixel) { true } else { false };

    fn @calc_posindex(pixel: PixelCoord) -> f32 {
        let pseudo_rng = create_random_generator(42);
        if let Option[Ray]::Some(ray) = camera.generate_ray(pseudo_rng, pixel) {
            let vangle = math_builtins::acos(vec3_dot(cam_vv, ray.dir)) - flt_pi / 2.0;
            let hangle = flt_pi / 2.0 - math_builtins::acos(vec3_dot(cam_hv, ray.dir));
            let t      = vec3_dot(cam_dir, ray.dir);
            let sigma  = deg(math_builtins::fabs(math_builtins::acos(t)));

            let hv  = vec3_normalize(vec3_sub(vec3_mulf(ray.dir, 1.0 / t), ray.dir));
            let tau = deg(math_builtins::acos(vec3_dot(cam_vv, hv)));

            let phi   = math_builtins::fmax[f32](0.00001:f32, vangle);
            let theta = math_builtins::fmax[f32](0.00001:f32, hangle);

            // position index calculation with KIM model (postype==1)
            //posindex = math_builtins::exp ((sigma-(-0.000009*tau*tau*tau+0.0014*tau*tau+0.0866*tau+21.633))/(-0.000009*tau*tau*tau+0.0013*tau*tau+0.0853*tau+8.772));
            
            let posindex = if (phi < 0.0) {
                // use Iwata model below line of sight
                let d = 1.0 / math_builtins::tan(phi);
                let s = math_builtins::tan(theta) / math_builtins::tan(phi);
                let r = math_builtins::fmin[f32](math_builtins::sqrt(1.0 / d * 1.0 / d + s * s / d / d), 3.0:f32);

                let fact = select(r > 0.6, 1.2:f32, 0.8:f32);

                1.0 + fact * r
            } else {
                // position index calculation with Guth model
                math_builtins::exp((35.2 - 0.31889 * tau - 1.22 * math_builtins::exp(-2 * tau / 9)) / 1000 * sigma + (21 + 0.26667 * tau - 0.002963 * tau * tau) / 100000 * sigma * sigma)
            };

            math_builtins::fmin[f32](posindex, 16:f32)
        } else {
            0:f32
        }
    }

    // Loosely adapted from pict_get_omega, pict_get_sangle and splane_normal
    fn @calc_omega(pixel: PixelCoord) -> (f32, Vec3) {
        fn @splane(p_a: Vec3, p_b: Vec3) -> Vec3 {
            let e1 = p_a;
            let e2 = vec3_sub(p_b, p_a);
            let n  = vec3_cross(e1, e2);
            select(vec3_len2(n) > 0, vec3_normalize(n), vec3_expand(0))
        }

        let (r1, r2, r3, r4) = match (  camera.generate_ray(create_random_generator(42), pixel),
                                        camera.generate_ray(create_random_generator(42), shift_pixelcoord(pixel, 0, 1)),
                                        camera.generate_ray(create_random_generator(42), shift_pixelcoord(pixel, 1, 1)),
                                        camera.generate_ray(create_random_generator(42), shift_pixelcoord(pixel, 1, 0))) {
            (Option[Ray]::Some(k1), Option[Ray]::Some(k2), Option[Ray]::Some(k3), Option[Ray]::Some(k4)) => (k1.dir, k2.dir, k3.dir, k4.dir),
            _ => (vec3_expand(0), vec3_expand(0), vec3_expand(0), vec3_expand(0))
        };

        let n1 = splane(r1, r2);
        let n2 = splane(r2, r3);
        let n3 = splane(r3, r4);
        let n4 = splane(r4, r1);

        let a1 = flt_pi - math_builtins::fabs(math_builtins::acos(vec3_dot(n1, n2)));
        let a2 = flt_pi - math_builtins::fabs(math_builtins::acos(vec3_dot(n2, n3)));
        let a3 = flt_pi - math_builtins::fabs(math_builtins::acos(vec3_dot(n3, n4)));
        let a4 = flt_pi - math_builtins::fabs(math_builtins::acos(vec3_dot(n4, n1)));

        let ang = a1 + a2 + a3 + a4;
        (ang - 2 * flt_pi, r1)
    }

    let scale     = settings.scale;
    let luminance = @|col:Color| -> f32 { color_builtins::white_efficiency * color_luminance(col) * scale }; // Only luminance. In contrary to other parts this is explicit in Lux (assuming sRGB).

    // Run pass to get standard info from image
    let reduce_info = reduce[ReduceOutputInfo](device.parallel_reduce_handler, width * height,
        @|i:i32| {
            let pixel = make_pixelcoord_from_linear(i, width, height, 0, 0);
            if check_if_valid(pixel) {
                let (omega, dir) = calc_omega(pixel);
                let act_lum      = luminance(input.get(pixel));
                let cos_f        = math_builtins::fabs(vec3_dot(cam_dir, dir));
                let e_v          = act_lum * omega * cos_f;
                
                ReduceOutputInfo {
                    total_omega = omega,
                    total_lum   = act_lum * omega,
                    max_lum     = act_lum,
                    e_v         = e_v 
                }
            } else {
                ReduceOutputInfo {
                    total_omega = 0,
                    total_lum   = 0,
                    max_lum     = 0,
                    e_v         = 0
                }
            }
        },
        @|a, b| ReduceOutputInfo{ 
            total_omega   = a.total_omega + b.total_omega,
            total_lum     = a.total_lum   + b.total_lum,
            max_lum       = math_builtins::fmax(a.max_lum, b.max_lum),
            e_v           = a.e_v         + b.e_v }
    );

    let lum_avg    = reduce_info.total_lum / reduce_info.total_omega;
    let lum_max    = reduce_info.max_lum;
    let lum_source = lum_avg * settings.mul;
    let E_v        = if settings.vertical_illuminance < 0 { reduce_info.e_v } else { settings.vertical_illuminance };

    // Run pass to get info for glare source
    let reduce_glare = reduce[ReduceOutputGlare](device.parallel_reduce_handler, width * height,
        @|i:i32| {
            let pixel      = make_pixelcoord_from_linear(i, width, height, 0, 0);
            let (omega, _) = calc_omega(pixel);
            let act_lum    = luminance(input.get(pixel));
            if check_if_valid(pixel) && act_lum > lum_source {
                ReduceOutputGlare {
                    source_pixels = 1,
                    source_omega  = omega,
                    source_lum    = act_lum * omega,
                    source_x      = pixel.x as f32 * omega,
                    source_y      = pixel.y as f32 * omega,
                }
            } else {
                ReduceOutputGlare {
                    source_pixels = 0,
                    source_omega  = 0,
                    source_lum    = 0,
                    source_x      = 0,
                    source_y      = 0 
                }
            }
        },
        @|a, b| ReduceOutputGlare{ 
            source_pixels = a.source_pixels + b.source_pixels,
            source_omega  = a.source_omega  + b.source_omega,
            source_lum    = a.source_lum    + b.source_lum,
            source_x      = a.source_x      + b.source_x,
            source_y      = a.source_y      + b.source_y }
    );

    let glare_pixels = reduce_glare.source_pixels;
    let glare_omega  = reduce_glare.source_omega;
    let glare_lum    = reduce_glare.source_lum / glare_omega;
    let glare_x      = reduce_glare.source_x / glare_omega;
    let glare_y      = reduce_glare.source_y / glare_omega;

    let lum_a     = E_v / flt_pi;
    let lum_backg = if glare_pixels == width * height { lum_avg } else { (reduce_info.total_lum - reduce_glare.source_lum) / (reduce_info.total_omega - reduce_glare.source_omega) };

    // primary glare source scan
    for idx in device.parallel_range(0, width * height) {
        let pixel         = make_pixelcoord_from_linear(idx, width, height, 0, 0);
        let current_color = input.get(pixel);
        let act_lum       = luminance(current_color);

        let rel_luminance = if check_if_valid(pixel) && act_lum > lum_source {
            // compute relative luminance
            let max_diff = math_builtins::fmax(flt_eps, lum_max - lum_source);
            let lum_diff = act_lum - lum_source;
            lum_diff / max_diff
        } else {
            0:f32
        };
        source_luminance.store_f32(pixel.linear, rel_luminance);
    }

    let glare_posi = calc_posindex(make_pixelcoord_from_xy(glare_x as i32, glare_y as i32, width, height, math::fract(glare_x), math::fract(glare_y)));

    fn @compute_dgp() -> f32 {
        let c1 = 5.87e-5 : f32;
        let c2 = 0.092   : f32;
        let c3 = 0.159   : f32;
        let a1 = 2.0     : f32;
        let a2 = 1.0     : f32;
        let a3 = 1.87    : f32;
        let a4 = 2.0     : f32;
        let a5 = 1.0     : f32;

        let dgp_acc    = math_builtins::pow(glare_lum, a1) / math_builtins::pow(glare_posi, a4) * math_builtins::pow(glare_omega, a2) / math_builtins::pow(E_v, a3);
        let source_dgp = math_builtins::log10(1 + dgp_acc);

        if glare_pixels > 0 {
            c1 * math_builtins::pow(E_v, a5) + c2 * source_dgp + c3
        } else {
            // No glare sources
            c1 * math_builtins::pow(E_v, a5) + c3
        }
    }

    fn @compute_dgi() -> f32 {
        let omega_s   = glare_omega / (glare_posi * glare_posi);
        let sum_glare = 0.478 * math_builtins::pow(glare_lum, 1.6:f32) * math_builtins::pow(omega_s, 0.8:f32) / (lum_backg + 0.07 * math_builtins::pow(glare_omega, 0.5:f32) * glare_lum);
        10 * math_builtins::log10(sum_glare)
    }

    fn @compute_dgi_mod() -> f32 {
        let omega_s   = glare_omega / (glare_posi * glare_posi);
        let sum_glare = 0.478 * math_builtins::pow(glare_lum, 1.6:f32) * math_builtins::pow(omega_s, 0.8:f32) / (math_builtins::pow(lum_a, 0.85:f32) + 0.07 * math_builtins::pow(glare_omega, 0.5:f32) * glare_lum);
        10 * math_builtins::log10(sum_glare)
    }

    fn @compute_dgr() -> f32 {
        let sum_glare = 0.5 * glare_lum * (20.4 * glare_omega + 1.52 * math_builtins::pow(glare_omega, 0.2:f32) - 0.075) / (glare_posi * math_builtins::pow(lum_avg, 0.44:f32));
        math_builtins::pow(sum_glare, math_builtins::pow(glare_pixels as f32, -0.0914:f32))
    }

    fn @compute_vcp(dgr_v: f32) = if dgr_v > 750 { 
        0:f32 
    } else if dgr_v < 20 {
        100:f32 
    } else {
        50 * math::erf((6.374 - 1.3227 * math_builtins::log(dgr_v)) / 1.414213562373) + 50
    };

    fn @compute_ugr() -> f32 {
        let sum_glare = math_builtins::pow(glare_lum / glare_posi, 2:f32) * glare_omega;
        if sum_glare == 0 {
            0:f32
        } else {
            8 * math_builtins::log10(0.25 / lum_backg * sum_glare)
        }
    }

    fn @compute_ugr_exp() -> f32 {
        let sum_glare = math_builtins::pow(1 / glare_posi, 2:f32) * glare_lum * glare_omega;
        if sum_glare == 0 {
            0:f32
        } else {
            8 * math_builtins::log10(lum_a) + 8 * math_builtins::log10(sum_glare / lum_backg)
        }
    }

    fn @compute_ugp() = compute_ugr() / 8 * 0.26;

    // low-light correction
    let low_light_corr = if E_v < 1000 {
        let k = math_builtins::exp(0.024 * E_v - 4);
        k/(1 + k)
    } else { 
        1.0:f32
    };

    // TODO: Add age correction

    let not_sufficient = glare_pixels == 0 || E_v < 100;

    let dgp     = if not_sufficient { 0:f32 } else { low_light_corr * compute_dgp() };
    let dgi     = if not_sufficient { 0:f32 } else { compute_dgi() };
    let dgi_mod = if not_sufficient { 0:f32 } else { compute_dgi_mod() };
    let dgr     = if not_sufficient { 0:f32 } else { compute_dgr() };
    let vcp     = if not_sufficient { 0:f32 } else { compute_vcp(dgr) };
    let ugr     = if not_sufficient { 0:f32 } else { compute_ugr() };
    let ugr_exp = if not_sufficient { 0:f32 } else { compute_ugr_exp() };
    let ugp     = if not_sufficient { 0:f32 } else { compute_ugp() };

    registry::set_global_parameter_f32("glare_dgp", dgp);
    registry::set_global_parameter_f32("glare_dgi", dgi);
    registry::set_global_parameter_f32("glare_dgi_mod", dgi_mod);
    registry::set_global_parameter_f32("glare_dgr", dgr);
    registry::set_global_parameter_f32("glare_vcp", vcp);
    registry::set_global_parameter_f32("glare_ugr", ugr);
    registry::set_global_parameter_f32("glare_ugr_exp", ugr_exp);
    registry::set_global_parameter_f32("glare_ugp", ugp);
    registry::set_global_parameter_f32("glare_vertical_illuminance", E_v);
    registry::set_global_parameter_f32("glare_source_luminance", glare_lum);
    registry::set_global_parameter_f32("glare_omega", glare_omega);
    registry::set_global_parameter_f32("glare_background_luminance", lum_backg);
    registry::set_global_parameter_f32("total_omega", reduce_info.total_omega);
    registry::set_global_parameter_f32("total_lum", reduce_info.total_lum);
    registry::set_global_parameter_f32("max_lum", reduce_info.max_lum);
    registry::set_global_parameter_i32("num_glare_pixels", glare_pixels);

    device.sync();
}