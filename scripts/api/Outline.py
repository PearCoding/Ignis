#!/usr/bin/env python3
# coding: utf-8

from utils import load_api
import inspect
import re


def parse_obj(obj, ident):
    for name in dir(obj):
        if name.startswith("__"):
            continue

        try:
            data = getattr(obj, name)
        except:
            continue

        if inspect.isclass(data):
            print(f'{ident}{name}: {repr(data)}')
            parse_obj(data, ident=ident+"  ")
        else:
            print(f'{ident}{name}: {repr(data)}')


def dir_class(c):
    for prop_name in dir(c):
        if prop_name.startswith("__"):
            continue

        try:
            data = getattr(c, prop_name)
        except:
            continue

        yield prop_name, data


def cleanup_doc(doc):
    return doc.replace("ignis.pyignis.", "").strip()


single_newline = re.compile(r"([^\n])\n([^\n])")
func_match = re.compile(r"\w+\([^\n]*\)([\t ]*->[\t ]*[\[\]\. \t\,\w]+)?")
ident_line = re.compile(r"\n([^\n])")
list_with_content = re.compile(r"(\d+\.[^\n]+)\n\n([^\d].*)")
# Documentation generated by pybind11
enum_entry_section = re.compile(r"^\s{2}(\w+)$", re.M)


def prepare_lines(lines):
    '''Prepare lines such that single new lines are collapsed'''
    return re.sub(single_newline, r"\g<1> \g<2>", lines)


def ident_lines(lines, prefix=" "):
    return re.sub(ident_line, r"\n"+prefix+r"\g<1>", lines)


def escape_func(lines):
    return re.sub(func_match, r"``\g<0>``", prepare_lines(lines))


def handle_func_doc(lines):
    lines = prepare_lines(lines)

    func_signature = re.match(func_match, lines).group(0)
    documentation = escape_func(lines.replace(func_signature, "").strip())
    documentation = re.sub(
        list_with_content, r"\g<1>\n\n   \g<2>", documentation)
    documentation = ident_lines(documentation, "  ")

    func_line = f"- ``{func_signature}``"

    doc_line = f"  {documentation}"

    return f"{func_line}\n{doc_line}"


def handle_class_doc(lines):
    return re.sub(enum_entry_section, r"- ``\g<1>``\n", lines)


SUBSECTION = "-----------------------------------------------"
SUBSUBSECTION = "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"


def generate_doc(root):
    doc_str = ""
    todo = [("Ignis (module)", root)]
    while len(todo) > 0:
        name, cur = todo.pop(0)

        doc_str += f'{name}\n{SUBSECTION}\n\n{handle_class_doc(inspect.getdoc(cur))}\n\n'

        # Properties
        has_props = False
        for prop_name, data in dir_class(cur):
            if isinstance(data, property):
                inner_doc = cleanup_doc(inspect.getdoc(data))

                if not has_props:
                    doc_str += f"Properties:\n{SUBSUBSECTION}\n\n"
                    has_props = True
                doc_str += f'- ``{prop_name}``: {escape_func(inner_doc)}\n\n'

        # Methods
        has_funcs = False
        for prop_name, data in dir_class(cur):
            if inspect.isroutine(data):
                inner_doc = cleanup_doc(inspect.getdoc(data))
                if inner_doc == "":
                    continue

                if not has_funcs:
                    doc_str += f"Methods:\n{SUBSUBSECTION}\n\n"
                    has_funcs = True
                doc_str += f'{handle_func_doc(inner_doc)}\n\n'

        # Embedded classes
        for prop_name, data in dir_class(cur):
            if inspect.isclass(data):
                if cur != root:
                    todo.append((f"{name}.{prop_name}", data))
                else:
                    todo.append((prop_name, data))

        doc_str += "\n\n"

    return doc_str.rstrip()


if __name__ == "__main__":
    ignis = load_api()
    print(generate_doc(ignis))
